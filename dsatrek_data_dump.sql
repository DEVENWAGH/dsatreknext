--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: __drizzle_migrations; Type: TABLE DATA; Schema: drizzle; Owner: -
--

COPY drizzle.__drizzle_migrations (id, hash, created_at) FROM stdin;
0	nebulous_silk_fever_initial_state	1751798210845
14	724d35ddef431b528b95172429195c7db9c6fd96dd5d3d989a61544321e3e647	1751798362069
15	b013c8133436b495994e31cb2312eab0de79a048f8c33e9b82784eccb9fe03ef	1751803820477
16	f6248f3e185f66ac10d779a04c932d9fd7aa2ce63c681c663e7900ae9e4b29f1	1751813175736
17	4cf0e82e5409203a899481a9bcdbf36f0593196d20667a73ef2d428101752739	1751813561213
18	6b806d0041c68f369be914ab48c1fcaeedec04569e7b455dd6a1d88fc0683a28	1751826797929
19	bd90ac42967d49c36017a95e4316aaaa042b892fb8cbc910974611eab81876ce	1751830698578
20	7fa6b08816a90243966419e280514559d9bfc564e17f1c2336fcb8515044fb2c	1751889497281
21	0008_tan_korvac	1751907776235
22	0009_milky_wendell_rand	1751907795103
23	ff2a3ce559f58837662aa56072794a9fe9e34ede32fc50a4f61f4fa05912d911	1751972016855
24	a8a1da30ac5191f655467840bf77d5f29c009e0b14304325cdf0bc4f92399e8e	1752227812554
25	095536c24d654441f072e5b31b81b9c08d7c988d16c9766982ed0fd641669dc7	1752229197881
26	04c5506265df3ca56692ca5ad3aff5796865282982cbcd2ee8b6639813c07dd5	1752341207662
27	660557b625c202e20b4999546db6e813f8b645239ec395adb3decbb3f3c926bc	1752343333374
28	1e900b4c10b52d430fff7d09be17a1e4dca7d407aa0cfc7d85a0249ad71db865	1752345317384
29	f81f6956c737fe6127f4e15e9f88cc109df55c8e01323997718e819dd406ee88	1752350024997
30	3096df3cde4ec1177a3a76c2fc6d908fa1f150b8a0bd6c48ca00285493838395	1752651958633
31	e377bd0957b63ddd36bf5f975ff8b1d975e4d9d940954e61b543514cf8683761	1753599589410
32	19cc87b013b6583832548a4321b1a1db33e246c552a9f5066e7f1fb539b9f512	1753600099082
33	1a78e88a9c2029026b025e98c159e5251c41fa00a1624190b80e163f81aaf92c	1753629911566
\.


--
-- Data for Name: users_sync; Type: TABLE DATA; Schema: neon_auth; Owner: -
--

COPY neon_auth.users_sync (raw_json, updated_at, deleted_at) FROM stdin;
\.


--
-- Data for Name: accounts; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.accounts (id, "userId", type, provider, "providerAccountId", refresh_token, access_token, expires_at, id_token, scope, session_state, token_type) FROM stdin;
\.


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.comments (id, post_id, user_id, username, content, created_at, updated_at) FROM stdin;
85d52a89-7c49-48d7-8bba-8c7cf762e1da	b52460e4-7d6b-4db2-bf4e-4bf0f26ff726	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	I'm Interested	2025-07-22 10:03:39.89737	2025-08-02 11:26:43.625315
8a4e0af6-fc11-43f8-bbc6-cd1e20ef7710	27752004-e675-46f4-9f49-c474921610d0	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	thanks for sharing	2025-07-22 13:50:22.812205	2025-08-02 11:26:43.625315
768a2f80-c1f1-4592-8c0d-2fe2f94e3419	528d6d96-025b-46e2-9155-c8b56db5c309	8a1bb73d-9293-4a4b-bd5a-8836031002ff	AFZAL ANSARI	Alright, Its under processing, you will get to know about it after 24 hours.	2025-08-01 17:49:59.900033	2025-08-02 11:26:43.625315
2ffe8faa-4010-41e2-a9d3-4c5a8cea8af8	528d6d96-025b-46e2-9155-c8b56db5c309	8a1bb73d-9293-4a4b-bd5a-8836031002ff	AFZAL ANSARI	I got Pro version, without paying for it. what an application. wish every application would be like this only, we will get subscription without paying it.	2025-08-01 17:53:06.341409	2025-08-02 11:26:43.625315
78acac81-4da6-4d58-811e-7ef560bd1fee	6796baa4-9b8a-43b3-a3e1-6523a64823e0	91b63c9a-5abb-4e2e-9095-5a6f121e4228	Rohit Negi	thanks shivam	2025-08-01 23:18:42.099755	2025-08-02 11:26:43.625315
4b2d7a52-9210-4646-9398-82d9baa713ea	070f8b6d-8700-4906-9dba-729fcd9a9bf9	91b63c9a-5abb-4e2e-9095-5a6f121e4228	Rohit Negi	thanks sameer	2025-08-01 23:23:08.046338	2025-08-02 11:26:43.625315
445ec8e8-832e-4f7a-a15c-51a891e3b559	528d6d96-025b-46e2-9155-c8b56db5c309	91b63c9a-5abb-4e2e-9095-5a6f121e4228	Rohit Negi	"Enjoy your free subscription üòÑ. I‚Äôve fixed the bug all sorted!	2025-08-01 23:40:22.951407	2025-08-02 11:26:43.625315
29a0faaf-3834-410a-b124-4e39aedf9a90	528d6d96-025b-46e2-9155-c8b56db5c309	91b63c9a-5abb-4e2e-9095-5a6f121e4228	Rohit Negi	tumari payment capture huwi he  Test Mode  we are cucurrently in test mode No real money is involved	2025-08-02 00:03:13.275736	2025-08-02 11:26:43.625315
6d8718c4-d2f5-43fc-b4c6-17ddb8374997	250df1f6-818e-4ee4-8de8-36a9d2afcd08	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	hey	2025-08-02 12:02:19.565804	2025-08-02 12:02:19.565804
d08cf775-7848-4958-8c95-fe4d9887b13b	250df1f6-818e-4ee4-8de8-36a9d2afcd08	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	hello	2025-08-02 12:06:59.596864	2025-08-02 12:06:59.596864
f5b79c63-e781-4f5c-9fdc-c9bad6570349	5c0fc3be-2fa9-4710-a037-fc77b1cff06b	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	thanks	2025-08-02 12:44:30.706568	2025-08-02 12:44:30.706568
a17521a6-ff25-4620-a444-9552748c9f14	070f8b6d-8700-4906-9dba-729fcd9a9bf9	6ff10bb6-fe18-46ee-89e9-cdc48ec293b6	mangilal bhairi	hiii	2025-08-03 06:34:53.971779	2025-08-03 06:34:53.971779
\.


--
-- Data for Name: community; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.community (id, user_id, username, title, content, topic, is_anonymous, created_at, expires_at) FROM stdin;
40bdc964-cad9-4877-8d8d-24abb6c87750	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	98892b62-c56d-4769-bd0d-711a4ce0ff76	[{"type": "p", "children": [{"text": ""}]}]	Problem Discussion	f	2025-07-24 16:22:01.209107	2025-08-23 16:21:55.443
1d7f63d7-08c5-4c8b-8c70-a2d0ed23b91c	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	Day 30: Common Interview Questions Using Backtracking ‚Äì Applying It All üîÅüéØ	[{"id": "h02ImijgU6", "url": "https://assets.leetcode.com/users/images/01444322-d641-4a4c-99fe-edc525382d39_1752335358.0451243.png", "type": "img", "width": 177, "children": [{"text": ""}]}, {"id": "eQbW_X1BrH", "type": "p", "align": "start", "children": [{"text": "You‚Äôve made it through subsets, permutations, and pruning.\\nNow it‚Äôs time to apply backtracking to classic interview problems."}], "lineHeight": "1.5rem"}, {"id": "xUpvyZHitb", "type": "h1", "align": "start", "children": [{"text": "üß† What‚Äôs the Real Game Here?"}], "lineHeight": "2rem"}, {"id": "H97nWZ6GpT", "type": "p", "align": "start", "children": [{"text": "Backtracking is all about:"}], "lineHeight": "1.5rem"}, {"id": "0R4IdoBYmq", "type": "p", "align": "start", "children": [{"text": "Making a decision"}], "lineHeight": "1.5rem"}, {"id": "A--Nj21lNg", "type": "p", "align": "start", "children": [{"text": "Recursing"}], "lineHeight": "1.5rem"}, {"id": "r2xUzkPQCR", "type": "p", "align": "start", "children": [{"text": "Undoing that decision"}], "lineHeight": "1.5rem"}, {"id": "kf5-cxShlY", "type": "p", "align": "start", "children": [{"text": "It shines in problems with:"}], "lineHeight": "1.5rem"}, {"id": "mnlCCyXT25", "type": "p", "align": "start", "children": [{"text": "Choices that build over time"}], "lineHeight": "1.5rem"}, {"id": "whua1HYjTC", "type": "p", "align": "start", "children": [{"text": "Constraints that must be met"}], "lineHeight": "1.5rem"}, {"id": "HaTrUX5GqQ", "type": "p", "align": "start", "children": [{"text": "Multiple valid paths to explore"}], "lineHeight": "1.5rem"}, {"id": "zZ2oUM13sS", "type": "p", "align": "start", "children": [{"text": "This final day brings it all together ‚Äî now you're solving real problems with backtracking intuition."}], "lineHeight": "1.5rem"}, {"id": "NsJh7II9Vf", "type": "h1", "align": "start", "children": [{"text": "üß© Core Interview Themes"}], "lineHeight": "2rem"}, {"id": "yQN5JdMmU-", "type": "h1", "align": "start", "children": [{"text": "üß© Try All Valid Options"}], "lineHeight": "2rem"}, {"id": "RRBwO5qu_m", "type": "p", "align": "start", "children": [{"text": "‚Üí Fill a board, construct a sequence, pick next elements."}], "lineHeight": "1.5rem"}, {"id": "rbi3RG0w2U", "type": "h1", "align": "start", "children": [{"text": "üß© Respect Constraints"}], "lineHeight": "2rem"}, {"id": "XaRvQ6H0Li", "type": "p", "align": "start", "children": [{"text": "‚Üí Only move forward if the path is valid (e.g., safety check in N-Queens)."}], "lineHeight": "1.5rem"}, {"id": "gEWykJ7XJ3", "type": "h1", "align": "start", "children": [{"text": "üß© Prune When Needed"}], "lineHeight": "2rem"}, {"id": "mMyXiIIM8X", "type": "p", "align": "start", "children": [{"text": "‚Üí Don‚Äôt explore branches you know are invalid early on."}], "lineHeight": "1.5rem"}, {"id": "5G1WSuwbec", "type": "h1", "align": "start", "children": [{"text": "üß© Restore State After Recursion"}], "lineHeight": "2rem"}, {"id": "2_HXBgx8xE", "type": "p", "align": "start", "children": [{"text": "‚Üí Backtrack to previous state before the next call."}], "lineHeight": "1.5rem"}, {"id": "0QQ1SQuIVe", "type": "h1", "align": "start", "children": [{"text": "‚ö†Ô∏è Rookie Mistakes to Avoid"}], "lineHeight": "2rem"}, {"id": "4M4DmawiMz", "type": "p", "align": "start", "children": [{"text": "‚ùå Not undoing choices after recursion"}], "lineHeight": "1.5rem"}, {"id": "J1MQ8n1w6q", "type": "p", "align": "start", "children": [{"text": "‚ùå Skipping base cases"}], "lineHeight": "1.5rem"}, {"id": "G8Uy424cHL", "type": "p", "align": "start", "children": [{"text": "‚ùå Not using used[] or sets correctly for permutations"}], "lineHeight": "1.5rem"}, {"id": "bPZpWU4XRY", "type": "p", "align": "start", "children": [{"text": "‚ùå Forgetting to pass new state (copy vs ref)"}], "lineHeight": "1.5rem"}, {"id": "UjzPNHz37u", "type": "h1", "align": "start", "children": [{"text": "üéß Real-World Analogy"}], "lineHeight": "2rem"}, {"id": "NKsqkhj59y", "type": "h1", "align": "start", "children": [{"text": "üîÑ Solving a maze:"}], "lineHeight": "2rem"}, {"id": "_dsdGujHBw", "type": "p", "align": "start", "children": [{"text": "You try one path. If it leads to a wall, you backtrack and try a different turn.\\nEventually, you find the way out ‚Äî but only if you remember where you've been."}], "lineHeight": "1.5rem"}, {"id": "jMZRbQjAQ9", "type": "h1", "align": "start", "children": [{"text": "üß† It‚Äôs like solving a crossword ‚Äî each word must fit in context. If it doesn‚Äôt, you erase and try again."}], "lineHeight": "2rem"}, {"id": "zH8x0YT_zs", "type": "h1", "align": "start", "children": [{"text": "üß© Practice These Must-Know Problems"}], "lineHeight": "2rem"}, {"id": "VYyNKTzAh3", "type": "h1", "align": "start", "children": [{"text": "üîó "}, {"id": "IHZT0Q4Gn1", "url": "https://leetcode.com/problems/word-search/", "type": "a", "target": "_blank", "children": [{"text": "Word Search"}]}, {"text": ""}], "lineHeight": "2rem"}, {"id": "rDTwmNd0rB", "type": "h1", "align": "start", "children": [{"text": "üîó "}, {"id": "e_B996l4Zx", "url": "https://leetcode.com/problems/n-queens/", "type": "a", "target": "_blank", "children": [{"text": "N-Queens"}]}, {"text": ""}], "lineHeight": "2rem"}, {"id": "X3SOrvmqOC", "type": "h1", "align": "start", "children": [{"text": "üîó "}, {"id": "mErqFjoqkK", "url": "https://leetcode.com/problems/palindrome-partitioning/", "type": "a", "target": "_blank", "children": [{"text": "Palindrome Partitioning"}]}, {"text": ""}], "lineHeight": "2rem"}, {"id": "hVldul24f3", "type": "h1", "align": "start", "children": [{"text": "üîó "}, {"id": "jqvMUm78L3", "url": "https://leetcode.com/problems/letter-combinations-of-a-phone-number/", "type": "a", "target": "_blank", "children": [{"text": "Letter Combinations of a Phone Number"}]}, {"text": ""}], "lineHeight": "2rem"}, {"id": "wG03_oVjpJ", "type": "h1", "align": "start", "children": [{"text": "üîó "}, {"id": "WqDTSytE8z", "url": "https://leetcode.com/problems/restore-ip-addresses/", "type": "a", "target": "_blank", "children": [{"text": "Restore IP Addresses"}]}, {"text": ""}], "lineHeight": "2rem"}, {"id": "ybeVbZ2lEM", "type": "h1", "align": "start", "children": [{"text": "‚öîÔ∏è Your Final Mission:"}], "lineHeight": "2rem"}, {"id": "tIOnpmVJPi", "type": "p", "align": "start", "children": [{"text": "‚úÖ Spot where backtracking applies"}], "lineHeight": "1.5rem"}, {"id": "_DLUO3sbxQ", "type": "p", "align": "start", "children": [{"text": "‚úÖ Prune early, track state, undo properly"}], "lineHeight": "1.5rem"}, {"id": "iibrsSCT8J", "type": "p", "align": "start", "children": [{"text": "‚úÖ Bonus: Solve a problem without writing extra helper functions"}], "lineHeight": "1.5rem"}, {"id": "aeKznvKqpl", "type": "p", "align": "start", "children": [{"text": "üí¨ Drop a ‚Äú‚ôüÔ∏è‚Äù if backtracking once confused you ‚Äî but now you‚Äôre leading the game."}], "lineHeight": "1.5rem"}]	Interview	f	2025-07-12 20:26:31.805865	2025-08-11 20:26:29.861
070f8b6d-8700-4906-9dba-729fcd9a9bf9	623c6999-3b5f-4ac6-ad3f-34c6ab17bfb8	Sameer Verma	Amazing work brother.	[{"id": "P6LLufwWRs", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-01 19:32:46.780218	2025-08-31 19:32:46.778
c3535ef5-f3b0-4a8d-b0c4-05f0de0f8cb2	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	98892b62-c56d-4769-bd0d-711a4ce0ff76	[{"id": "eATgZZj3iu", "type": "p", "children": [{"text": ""}, {"id": "e3mhFbuHxu", "url": "/**\\r\\n * Calculates the maximum area of water that can be contained.\\r\\n * @param {number[]} height - Array of non-negative integers\\r\\n * @return {number} - Maximum area\\r\\n */\\r\\nfunction maxArea(height) {\\r\\n    // Write your Code here:\\r\\n    let max_area = 0;\\r\\n    let left = 0;\\r\\n    let right = height.length - 1;\\r\\n    while (left < right) {\\r\\n        const current_area = Math.min(height[left], height[right]) * (right - left);\\r\\n        max_area = Math.max(max_area, current_area);\\r\\n        if (height[left] < height[right]) {\\r\\n            left++;\\r\\n        } else {\\r\\n            right--;\\r\\n        }\\r\\n    }\\r\\n    return max_area;\\r\\n}\\r\\n\\r\\n// Input handling\\r\\nconst readline = require(\\"readline\\");\\r\\nconst rl = readline.createInterface({\\r\\n    input: process.stdin,\\r\\n    output: process.stdout,\\r\\n    terminal: false\\r\\n});\\r\\n\\r\\nrl.on(\\"line\\", (line) => {\\r\\n    try {\\r\\n        const heights = line.split(\\",\\").map(num => parseInt(num.trim()));\\r\\n        const result = maxArea(heights);\\r\\n        console.log(result);\\r\\n    } catch (e) {\\r\\n        console.log(\\"Invalid input format\\");\\r\\n        process.exit(1);\\r\\n    }\\r\\n    rl.close();\\r\\n});", "type": "a", "children": [{"text": "/**\\r\\n * Calculates the maximum area of water that can be contained.\\r\\n * @param {number[]} height - Array of non-negative integers\\r\\n * @return {number} - Maximum area\\r\\n */\\r\\nfunction maxArea(height) {\\r\\n    // Write your Code here:\\r\\n    let max_area = 0;\\r\\n    let left = 0;\\r\\n    let right = height.length - 1;\\r\\n    while (left < right) {\\r\\n        const current_area = Math.min(height[left], height[right]) * (right - left);\\r\\n        max_area = Math.max(max_area, current_area);\\r\\n        if (height[left] < height[right]) {\\r\\n            left++;\\r\\n        } else {\\r\\n            right--;\\r\\n        }\\r\\n    }\\r\\n    return max_area;\\r\\n}\\r\\n\\r\\n// Input handling\\r\\nconst readline = require(\\"readline\\");\\r\\nconst rl = readline.createInterface({\\r\\n    input: process.stdin,\\r\\n    output: process.stdout,\\r\\n    terminal: false\\r\\n});\\r\\n\\r\\nrl.on(\\"line\\", (line) => {\\r\\n    try {\\r\\n        const heights = line.split(\\",\\").map(num => parseInt(num.trim()));\\r\\n        const result = maxArea(heights);\\r\\n        console.log(result);\\r\\n    } catch (e) {\\r\\n        console.log(\\"Invalid input format\\");\\r\\n        process.exit(1);\\r\\n    }\\r\\n    rl.close();\\r\\n});"}]}, {"text": ""}]}]	Problem Discussion	f	2025-07-24 16:21:52.009044	2025-08-23 16:21:46.248
250df1f6-818e-4ee4-8de8-36a9d2afcd08	454a7f7a-7b5d-42aa-87ff-901b7d706b46	deven wagh	welcome Message	[{"id": "5KyWi5_cTV", "type": "p", "children": [{"text": "welcome to DSATrek Everyone"}]}]	Feedback	f	2025-07-22 10:05:49.608843	2025-08-21 10:05:48.267
27752004-e675-46f4-9f49-c474921610d0	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	IDFC First Bank F2F	[{"id": "vbb8L-_QVy", "type": "p", "align": "start", "children": [{"bold": true, "text": "Company", "color": "rgb(255, 255, 255)"}, {"text": ": "}, {"bold": true, "text": "IDFC First Bank", "color": "rgb(255, 255, 255)"}, {"text": "\\n"}, {"bold": true, "text": "Role", "color": "rgb(255, 255, 255)"}, {"text": ": Fullstack/Backend Developer"}], "lineHeight": "1.5rem"}, {"id": "zR-yQOTPI_", "type": "p", "align": "start", "children": [{"bold": true, "text": "Online Assisment:", "color": "rgb(255, 255, 255)"}, {"text": "\\n1. Implementing methods in a Java class (easy to medium)\\n2. DSA (Hard)\\nI have solved only 1st question. got shortlisted for F2F interview."}], "lineHeight": "1.5rem"}, {"id": "V0XDOJmvc1", "type": "p", "align": "start", "children": [{"bold": true, "text": "Onsite Interview:", "color": "rgb(255, 255, 255)"}, {"text": "\\n"}, {"bold": true, "text": "Round 1:", "color": "rgb(255, 255, 255)"}, {"text": "\\nProblem: Given 5 cards in the format \\"3-H\\", find the card with the highest value.\\nrefer this: "}, {"id": "piSOLiPFOY", "url": "https://leetcode.com/discuss/post/6981837/idfc-frist-bank-backend-dev-3-yr-by-anon-k0xv/", "type": "a", "target": "_blank", "children": [{"text": "https://leetcode.com/discuss/post/6981837/idfc-frist-bank-backend-dev-3-yr-by-anon-k0xv/"}]}, {"text": ""}], "lineHeight": "1.5rem"}, {"id": "XIJGIrGbcA", "type": "p", "align": "start", "children": [{"bold": true, "text": "Round 2:", "color": "rgb(255, 255, 255)"}], "lineHeight": "1.5rem"}, {"id": "0akz77vNU9", "type": "p", "indent": 0, "children": [{"text": "Design logging System which must collect the logs and store it for one year. They have focused more on how will I store the logs. also they didn't allowed me to use any of cloud services. I gave the solution like this, storing in the multiple files once it is full we can create new ones and old ones we can compess and store it in disk. also we can have jobs which are runing to delete the files with 1 year old logs.", "color": "rgb(255, 255, 255)", "fontSize": "1rem", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(26, 26, 26)"}], "listStyleType": ""}, {"id": "pxrmZUTjQW", "type": "p", "indent": 0, "children": [{"text": "you have a lift class. write a method implementation for move(). which will tell the sensor to go up or down. I wrote a simple method for it.", "color": "rgb(255, 255, 255)", "fontSize": "1rem", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(26, 26, 26)"}], "listStyleType": ""}, {"id": "SMksBw2dZM", "type": "p", "align": "start", "children": [{"bold": true, "text": "Final verdict: Rejected", "color": "rgb(255, 255, 255)"}], "lineHeight": "1.5rem"}]	Interview	f	2025-07-22 13:49:06.558964	2025-08-21 13:49:05.428
ff5a03d1-ab39-4d9c-a05e-db0acecbf0e6	60ef8034-5a20-4ece-b185-2bfab0b68fca	Anonymous	98892b62-c56d-4769-bd0d-711a4ce0ff76	"hello guys"	Problem Discussion	t	2025-07-24 14:42:17.722139	2025-08-23 14:42:11.914
a7eb9b8e-499d-42a6-a45c-bf2605b1553a	60ef8034-5a20-4ece-b185-2bfab0b68fca	wagh1.2.3.002	98892b62-c56d-4769-bd0d-711a4ce0ff76	"give me solution"	Problem Discussion	f	2025-07-24 14:42:31.712196	2025-08-23 14:42:25.884
528d6d96-025b-46e2-9155-c8b56db5c309	8a1bb73d-9293-4a4b-bd5a-8836031002ff	AFZAL ANSARI	Related to payment.	[{"id": "tpc8cOUVrN", "type": "p", "children": [{"text": "I was trying to make payment but it got failed and not able to clear payment. what to do?"}]}]	Interview	f	2025-08-01 17:48:55.49431	2025-08-31 17:48:55.492
bc010adb-3167-45f1-98d3-ad461b4510f1	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	98892b62-c56d-4769-bd0d-711a4ce0ff76	[{"id": "PkKI4BiZpq", "type": "p", "children": [{"text": ""}, {"id": "aXY7dBotsg", "url": "/**\\r\\n * Calculates the maximum area of water that can be contained.\\r\\n * @param {number[]} height - Array of non-negative integers\\r\\n * @return {number} - Maximum area\\r\\n */\\r\\nfunction maxArea(height) {\\r\\n    // Write your Code here:\\r\\n    let max_area = 0;\\r\\n    let left = 0;\\r\\n    let right = height.length - 1;\\r\\n    while (left < right) {\\r\\n        const current_area = Math.min(height[left], height[right]) * (right - left);\\r\\n        max_area = Math.max(max_area, current_area);\\r\\n        if (height[left] < height[right]) {\\r\\n            left++;\\r\\n        } else {\\r\\n            right--;\\r\\n        }\\r\\n    }\\r\\n    return max_area;\\r\\n}\\r\\n\\r\\n// Input handling\\r\\nconst readline = require(\\"readline\\");\\r\\nconst rl = readline.createInterface({\\r\\n    input: process.stdin,\\r\\n    output: process.stdout,\\r\\n    terminal: false\\r\\n});\\r\\n\\r\\nrl.on(\\"line\\", (line) => {\\r\\n    try {\\r\\n        const heights = line.split(\\",\\").map(num => parseInt(num.trim()));\\r\\n        const result = maxArea(heights);\\r\\n        console.log(result);\\r\\n    } catch (e) {\\r\\n        console.log(\\"Invalid input format\\");\\r\\n        process.exit(1);\\r\\n    }\\r\\n    rl.close();\\r\\n});", "type": "a", "children": [{"text": "/**\\r\\n * Calculates the maximum area of water that can be contained.\\r\\n * @param {number[]} height - Array of non-negative integers\\r\\n * @return {number} - Maximum area\\r\\n */\\r\\nfunction maxArea(height) {\\r\\n    // Write your Code here:\\r\\n    let max_area = 0;\\r\\n    let left = 0;\\r\\n    let right = height.length - 1;\\r\\n    while (left < right) {\\r\\n        const current_area = Math.min(height[left], height[right]) * (right - left);\\r\\n        max_area = Math.max(max_area, current_area);\\r\\n        if (height[left] < height[right]) {\\r\\n            left++;\\r\\n        } else {\\r\\n            right--;\\r\\n        }\\r\\n    }\\r\\n    return max_area;\\r\\n}\\r\\n\\r\\n// Input handling\\r\\nconst readline = require(\\"readline\\");\\r\\nconst rl = readline.createInterface({\\r\\n    input: process.stdin,\\r\\n    output: process.stdout,\\r\\n    terminal: false\\r\\n});\\r\\n\\r\\nrl.on(\\"line\\", (line) => {\\r\\n    try {\\r\\n        const heights = line.split(\\",\\").map(num => parseInt(num.trim()));\\r\\n        const result = maxArea(heights);\\r\\n        console.log(result);\\r\\n    } catch (e) {\\r\\n        console.log(\\"Invalid input format\\");\\r\\n        process.exit(1);\\r\\n    }\\r\\n    rl.close();\\r\\n});"}]}, {"text": ""}]}]	Problem Discussion	f	2025-07-24 16:19:36.28394	2025-08-23 16:19:29.423
406875dd-19a5-46d5-8772-e252ad6dc799	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	[{"id": "6rITiMhT1X", "type": "p", "children": [{"text": "hello ruby"}]}, {"id": "lu_i4xrfFt", "type": "p", "children": [{"text": ""}]}, {"id": "1AlthjWluL", "lang": "ruby", "type": "code_block", "children": [{"id": "1B8KARas1N", "type": "code_line", "children": [{"text": "def two_sum(nums, target)\\r"}]}, {"id": "vcWEKARnCB", "type": "code_line", "children": [{"text": "  # Write your solution here\\r"}]}, {"id": "NN5kQJToGV", "type": "code_line", "children": [{"text": "  []\\r"}]}, {"id": "XMYZP_THvt", "type": "code_line", "children": [{"text": "end"}]}]}, {"id": "TE6ucbQJ04", "type": "p", "children": [{"text": ""}]}, {"id": "ZgxMZTx1pa", "url": "https://dsatrek.s3.ap-south-1.amazonaws.com/community/1753375637876-goku-dragon.jpg", "name": "", "type": "img", "width": 373, "children": [{"text": ""}], "isUpload": true, "placeholderId": "IPaL3KUnnuIyTIuJTHrqW"}, {"id": "oLEBrsjB5A", "type": "p", "children": [{"text": ""}]}]	Problem Discussion	f	2025-07-24 16:48:23.489798	2025-08-23 16:48:17.809
440ea050-5cb3-4ac3-b2e2-4d8904ea3d91	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	[{"id": "H7tK871zGY", "type": "p", "children": [{"text": "hello two sum"}]}, {"id": "3TS-SC-wdf", "lang": "cpp", "type": "code_block", "children": [{"id": "UD4Zez5Trt", "type": "code_line", "children": [{"text": "vector<int> twoSum(vector<int>& nums, int target) {\\r"}]}, {"id": "RiO70Rwh8y", "type": "code_line", "children": [{"text": "    // Write your solution here\\r"}]}, {"id": "I8XlsI9Ubl", "type": "code_line", "children": [{"text": "    return {};\\r"}]}, {"id": "db9MsAchcT", "type": "code_line", "children": [{"text": "}"}]}]}, {"id": "0hQA4GF4kS", "type": "p", "children": [{"text": ""}]}]	Problem Discussion	f	2025-07-24 16:46:08.890063	2025-08-23 16:46:03.176
06e0ea20-05c8-4bac-9cb2-17f5b13c2fb9	32e4a38c-87d8-416b-bf64-6bc4a7f77eb7	Abhinav Singh	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	[{"id": "QKaJD7pRuD", "type": "p", "children": [{"text": "hii"}]}]	Problem Discussion	f	2025-07-26 16:17:42.648445	2025-08-25 16:17:42.54
b1ffe8b0-3aed-4d92-a298-51ecbeb53b41	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	49b1bb9a-0e0e-480e-8f0a-67edce76056b	[{"id": "axeitqVg_I", "type": "p", "children": [{"text": "hey everyone"}]}]	Problem Discussion	f	2025-07-31 12:12:54.232337	2025-08-30 12:12:54.229
6814723b-c7e4-498f-b1a3-bab1a5fd0b60	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	[{"id": "-i55me00OP", "type": "p", "children": [{"text": "hello abhinav"}]}]	Problem Discussion	f	2025-07-31 13:16:23.139409	2025-08-30 13:16:20.95
53478329-0227-4daa-a799-760991fcb5e0	d179c4df-7ddf-4b4a-85c2-409915ed74e0	Sumit  Kumar 	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	[{"id": "anmkZucpKT", "type": "p", "children": [{"text": "Kaie ho dosto "}]}]	Problem Discussion	f	2025-07-31 16:51:30.019848	2025-08-30 16:51:30.017
ec403c5a-cec4-44b1-beba-c097285d4610	91b63c9a-5abb-4e2e-9095-5a6f121e4228	Anonymous	afa5c09c-a868-4acd-9895-51e6dae3a81f	[{"id": "Mbi3mbTx4i", "type": "p", "children": [{"text": "hey"}]}]	Problem Discussion	t	2025-07-31 21:38:55.418555	2025-08-30 21:38:55.416
6796baa4-9b8a-43b3-a3e1-6523a64823e0	f036813e-ea86-4f6e-853c-81f7c774f322	shivam modi	Bro website is really cool	[{"id": "SIa05JEC4q", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-01 17:20:40.512904	2025-08-31 17:20:40.51
54cd3003-ebe8-48c2-b55b-79d1824f8804	dce06c54-6db8-4b5f-8b9a-a1b23663e4d2	Alok Kumar	Rtyy	[{"id": "gukxWma5w5", "type": "h1", "children": [{"text": "Gyyuu"}]}, {"id": "bBRPWfI1GH", "type": "table", "children": [{"id": "Fc8NaIo15r", "type": "tr", "children": [{"id": "pViNuPtT1m", "type": "td", "children": [{"id": "7qMHYX2MNb", "type": "p", "children": [{"text": ""}]}, {"id": "8wOtMtXKs2", "type": "p", "children": [{"text": ""}]}]}, {"id": "fpcuPzRA2S", "type": "td", "colSpan": 1, "rowSpan": 1, "children": [{"id": "h3BFM0LKR9", "type": "p", "children": [{"text": ""}]}]}, {"id": "hgsuGOOaDw", "type": "td", "children": [{"id": "6uYVH8sKEN", "type": "p", "children": [{"text": ""}]}]}]}, {"id": "tps1sy6s6u", "type": "tr", "children": [{"id": "0xuBrlU66B", "type": "td", "children": [{"id": "YHEG39VSIY", "type": "p", "children": [{"text": ""}]}]}, {"id": "lUDNhgzPyX", "type": "td", "colSpan": 1, "rowSpan": 1, "children": [{"id": "0snirCEEwj", "type": "p", "children": [{"text": ""}]}]}, {"id": "wjwFtK6RTM", "type": "td", "children": [{"id": "k0O8nSRm-h", "type": "p", "children": [{"text": ""}]}]}]}]}, {"id": "AownXebPGi", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-02 02:17:48.738939	2025-09-01 02:17:48.736
dbede4d4-b06a-41a0-a84c-8fa670a7ecd8	71a2bc95-b908-419b-91f3-7d6835f9eb6a	abc xyz	Hiiii	[{"id": "GfnDvYwLt3", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-02 02:43:26.639621	2025-09-01 02:43:26.637
f8311563-8784-4ee4-b7e8-06adaddb09bf	60ef8034-5a20-4ece-b185-2bfab0b68fca	deven wagh	image	[{"id": "J7Eum-HTdf", "type": "p", "children": [{"text": ""}]}, {"id": "-vmUDmXxDt", "url": "https://dsatrek.s3.ap-south-1.amazonaws.com/community/1754141248596-lg202507.png", "name": "", "type": "img", "children": [{"text": ""}], "isUpload": true, "placeholderId": "qP3qFXyVk-lwQoQ9NHde2"}, {"id": "PWlmCHhZ7Y", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-02 13:27:58.420775	2025-09-01 13:27:58.276
c9a9bb46-877a-4541-bfe4-106bf7bd5581	b2017bf5-b899-4dc3-a44d-186da5b1e4bd	Neon	Nice project	[{"id": "UZN24Gqtcg", "type": "p", "children": [{"text": ""}]}]	Feedback	f	2025-08-02 15:41:23.071663	2025-09-01 15:41:23.068
331eac82-953b-447a-b922-86fde2c1249a	23db0541-4ad7-407e-8a73-6000a590b14b	demo tek	mast hai bhai	[{"id": "n543xaTLMB", "type": "p", "children": [{"text": ""}]}]	Interview	f	2025-08-02 19:32:41.739634	2025-09-01 19:32:41.737
\.


--
-- Data for Name: company; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.company (id, name, company_url) FROM stdin;
407ec9ad-ffc5-4b8f-b962-0a60cb624a74	Google	{"url": "https://www.google.com/"}
f4f114e1-989a-495b-82c6-88b787f1b684	Meta	{"url": "https://www.meta.com"}
bca7bda3-4e09-4aec-9cf1-70d1878904c1	Microsoft	{"url": "https://www.microsoft.com"}
202a36bd-2095-4d13-a8be-e6df6ef32f8a	Amazon	{"url": "https://www.amazon.com"}
48133990-7a31-4831-a7dc-112842fcf416	Netflix	{"url": "https://www.netflix.com"}
6aec25b8-1171-4c4d-bfaa-e39531573dea	Apple	{"url": "https://www.apple.com"}
ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac	Nvidia	{"url": "https://www.nvidia.com"}
\.


--
-- Data for Name: problems; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.problems (id, title, description, difficulty, tags, starter_code, solution, test_cases, hints, created_at, updated_at, companies, editorial, top_code, bottom_code, is_premium, is_active) FROM stdin;
25c514f9-2b6e-490c-a2aa-a48c8560bcb8	1. Two Sum	[{"id": "uZVuSwvj9Lx_", "type": "p", "align": "start", "children": [{"text": "Given an array of integers "}, {"code": true, "text": "nums", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": " and an integer "}, {"code": true, "text": "target", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": ", return "}, {"bold": true, "text": "indices of the two numbers"}, {"text": " such that they add up to "}, {"code": true, "text": "target", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "."}]}, {"id": "07Tc2sGa3G", "type": "p", "align": "start", "children": [{"text": "You may assume that each input would have "}, {"bold": true, "text": "exactly one solution"}, {"text": ", and you may not use the same element twice."}]}, {"id": "uQG7sjtopB", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "Xj9vKmc9lt", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "SQG04hhyLS", "type": "code_block", "children": [{"id": "JWFhC5R_Fk", "type": "code_line", "children": [{"text": "Input: nums = [2,7,11,15], target = 9"}]}, {"id": "VYoTz2quh4", "type": "code_line", "children": [{"text": "Output: [0,1]"}]}, {"id": "KwbhdgUoXH", "type": "code_line", "children": [{"text": "Explanation: nums[0] + nums[1] == 9, so we return [0, 1]."}]}]}, {"id": "HpCwojzRhu", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "OpX1St--TU", "type": "code_block", "children": [{"id": "7SEute_zbX", "type": "code_line", "children": [{"text": "Input: nums = [3,2,4], target = 6"}]}, {"id": "hU1_Ag1yvX", "type": "code_line", "children": [{"text": "Output: [1,2]"}]}]}, {"id": "A26ojuUw19", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "0yCJ-QnQE2", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "PqbXFoNlWD", "type": "p", "indent": 0, "children": [{"code": true, "text": "2 <= nums.length <= 10^4", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "3oDhgmEwNc", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10^9 <= nums[i] <= 10^9", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "jV8yUJTFXS", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10^9 <= target <= 10^9", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "RLrZ7Y72O0", "type": "p", "indent": 0, "children": [{"code": true, "text": "Only one valid answer exists.", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}]	easy	["Array", "Hash Table"]	{"C": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\\n    *returnSize = 2;\\n    int* result = (int*)malloc(2 * sizeof(int));\\n    \\n    for (int i = 0; i < numsSize; i++) {\\n        for (int j = i + 1; j < numsSize; j++) {\\n            if (nums[i] + nums[j] == target) {\\n                result[0] = i;\\n                result[1] = j;\\n                return result;\\n            }\\n        }\\n    }\\n    return result;\\n}", "GO": "func twoSum(nums []int, target int) []int {\\n    numMap := make(map[int]int)\\n    for i, num := range nums {\\n        complement := target - num\\n        if idx, exists := numMap[complement]; exists {\\n            return []int{idx, i}\\n        }\\n        numMap[num] = i\\n    }\\n    return []int{}\\n}", "CPP": "vector<int> twoSum(vector<int>& nums, int target) {\\n    unordered_map<int, int> map;\\n    for (int i = 0; i < nums.size(); i++) {\\n        int diff = target - nums[i];\\n        if (map.count(diff)) {\\n            return {map[diff], i};\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return {};\\n}", "JAVA": "int[] twoSum(int[] nums, int target) {\\n    Map<Integer, Integer> map = new HashMap<>();\\n    for (int i = 0; i < nums.length; i++) {\\n        int complement = target - nums[i];\\n        if (map.containsKey(complement)) {\\n            return new int[]{map.get(complement), i};\\n        }\\n        map.put(nums[i], i);\\n    }\\n    return new int[]{};\\n}", "RUBY": "def two_sum(nums, target)\\n  map = {}\\n  nums.each_with_index do |num, i|\\n    complement = target - num\\n    return [map[complement], i] if map.key?(complement)\\n    map[num] = i\\n  end\\n  []\\nend", "RUST": "fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n    let mut map = HashMap::new();\\n    for (i, &num) in nums.iter().enumerate() {\\n        let complement = target - num;\\n        if let Some(&index) = map.get(&complement) {\\n            return vec![index as i32, i as i32];\\n        }\\n        map.insert(num, i);\\n    }\\n    vec![]\\n}", "CSHARP": "public int[] TwoSum(int[] nums, int target) {\\n    Dictionary<int, int> map = new Dictionary<int, int>();\\n    for (int i = 0; i < nums.Length; i++) {\\n        int complement = target - nums[i];\\n        if (map.ContainsKey(complement)) {\\n            return new int[] { map[complement], i };\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return new int[]{};\\n}", "PYTHON": "def two_sum(nums, target):\\n    num_map = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if complement in num_map:\\n            return [num_map[complement], i]\\n        num_map[num] = i\\n    return []", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar twoSum = function (nums, target) {\\n    let map = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        let complement = target - nums[i];\\n        if (map.hasOwnProperty(complement)) {\\n            return [map[complement], i];\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return [];\\n};", "TYPESCRIPT": "function twoSum(nums: number[], target: number): number[] {\\n    const map: {[key: number]: number} = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n        if (map.hasOwnProperty(complement)) {\\n            return [map[complement], i];\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return [];\\n}"}	{"C": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\\n    *returnSize = 2;\\n    int* result = (int*)malloc(2 * sizeof(int));\\n    \\n    for (int i = 0; i < numsSize; i++) {\\n        for (int j = i + 1; j < numsSize; j++) {\\n            if (nums[i] + nums[j] == target) {\\n                result[0] = i;\\n                result[1] = j;\\n                return result;\\n            }\\n        }\\n    }\\n    return result;\\n}", "GO": "func twoSum(nums []int, target int) []int {\\n    numMap := make(map[int]int)\\n    for i, num := range nums {\\n        complement := target - num\\n        if idx, exists := numMap[complement]; exists {\\n            return []int{idx, i}\\n        }\\n        numMap[num] = i\\n    }\\n    return []int{}\\n}", "CPP": "vector<int> twoSum(vector<int>& nums, int target) {\\n    unordered_map<int, int> map;\\n    for (int i = 0; i < nums.size(); i++) {\\n        int diff = target - nums[i];\\n        if (map.count(diff)) {\\n            return {map[diff], i};\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return {};\\n}", "JAVA": "int[] twoSum(int[] nums, int target) {\\n    Map<Integer, Integer> map = new HashMap<>();\\n    for (int i = 0; i < nums.length; i++) {\\n        int complement = target - nums[i];\\n        if (map.containsKey(complement)) {\\n            return new int[]{map.get(complement), i};\\n        }\\n        map.put(nums[i], i);\\n    }\\n    return new int[]{};\\n}", "RUBY": "def two_sum(nums, target)\\n  map = {}\\n  nums.each_with_index do |num, i|\\n    complement = target - num\\n    return [map[complement], i] if map.key?(complement)\\n    map[num] = i\\n  end\\n  []\\nend", "RUST": "fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n    let mut map = HashMap::new();\\n    for (i, &num) in nums.iter().enumerate() {\\n        let complement = target - num;\\n        if let Some(&index) = map.get(&complement) {\\n            return vec![index as i32, i as i32];\\n        }\\n        map.insert(num, i);\\n    }\\n    vec![]\\n}", "CSHARP": "public int[] TwoSum(int[] nums, int target) {\\n    Dictionary<int, int> map = new Dictionary<int, int>();\\n    for (int i = 0; i < nums.Length; i++) {\\n        int complement = target - nums[i];\\n        if (map.ContainsKey(complement)) {\\n            return new int[] { map[complement], i };\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return new int[]{};\\n}", "PYTHON": "def two_sum(nums, target):\\n    num_map = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if complement in num_map:\\n            return [num_map[complement], i]\\n        num_map[num] = i\\n    return []", "JAVASCRIPT": "var twoSum = function (nums, target) {\\n    let map = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        let complement = target - nums[i];\\n        if (map.hasOwnProperty(complement)) {\\n            return [map[complement], i];\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return [];\\n};", "TYPESCRIPT": "function twoSum(nums: number[], target: number): number[] {\\n    const map: {[key: number]: number} = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n        if (map.hasOwnProperty(complement)) {\\n            return [map[complement], i];\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return [];\\n}"}	[{"input": "[2,7,11,15],9", "output": "[0,1]"}, {"input": "[3,2,4],6", "output": "[1,2]"}, {"input": "[3,3],6", "output": "[0,1]"}]	["Use a hash map to store the numbers you've seen so far", "For each number, check if target - number exists in the hash map"]	2025-07-16 15:57:02.285541	2025-07-28 13:15:05.618	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "6ZRSlixM00", "type": "p", "children": [{"bold": true, "text": "Editorial: Two Sum"}]}, {"id": "_zC84lblI-", "url": "https://www.youtube.com/watch?v=KLlXCFG5TnA", "type": "video", "children": [{"text": ""}]}, {"id": "niIohJ31p-", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}]}, {"id": "POA5ZtKku4", "type": "hr", "children": [{"text": ""}]}, {"id": "rF2qzxZZz0", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "8Nfm3kN-cp", "type": "p", "children": [{"text": "Given an array "}, {"code": true, "text": "nums"}, {"text": " and an integer "}, {"code": true, "text": "target"}, {"text": ", find "}, {"bold": true, "text": "two indices"}, {"text": " such that "}, {"code": true, "text": "nums[i] + nums[j] == target"}, {"text": ". Return them as an array. Each input has exactly one solution."}]}, {"id": "x7n4XLUfgO", "type": "hr", "children": [{"text": ""}]}, {"id": "8sjNbsCqKt", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "Ood4AH_GAh", "type": "p", "indent": 0, "children": [{"text": "You "}, {"bold": true, "text": "cannot"}, {"text": " use brute force "}, {"code": true, "text": "O(n^2)"}, {"text": " for large inputs."}], "listStyleType": ""}, {"id": "qdBXhG2vZN", "type": "p", "indent": 0, "children": [{"text": "You must achieve "}, {"bold": true, "text": "O(n)"}, {"text": " time complexity."}], "listStyleType": ""}, {"id": "B_VARvffbE", "type": "p", "indent": 0, "children": [{"text": "Input size is up to 10,000 elements."}], "listStyleType": ""}, {"id": "XFWfNGhqeC", "type": "p", "indent": 0, "children": [{"text": "Values can be negative, positive, or zero."}], "listStyleType": ""}, {"id": "k7P3c2m4gd", "type": "hr", "children": [{"text": ""}]}, {"id": "rWFZBPyh_h", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "2ce6VZF2S2", "type": "p", "children": [{"text": "For each number, check if its complement (target - number) has already been seen. Use a hash map for fast lookup."}]}, {"id": "647MZtSWpB", "type": "hr", "children": [{"text": ""}]}, {"id": "YLTaj7LrBC", "type": "h2", "children": [{"text": "‚úÖ Hash Map Approach (Optimal)"}]}, {"id": "lKnyrrLOzY", "type": "p", "children": [{"text": "Iterate through "}, {"code": true, "text": "nums"}, {"text": ", storing each value's index in a hash map. For each element, check if "}, {"code": true, "text": "target - nums[i]"}, {"text": " exists in the map."}]}, {"id": "GRk6LK_NGb", "type": "hr", "children": [{"text": ""}]}, {"id": "yG12IEI2V0", "type": "h3", "children": [{"text": "‚ú® Step-by-step Algorithm"}]}, {"id": "YXqDtfmULw", "type": "p", "indent": 0, "children": [{"text": "Initialize an empty hash map."}], "listStyleType": ""}, {"id": "SRwF_q522e", "type": "p", "indent": 0, "children": [{"text": "For each index "}, {"code": true, "text": "i"}, {"text": " in "}, {"code": true, "text": "nums"}, {"text": ":"}], "listStyleType": ""}, {"id": "QQ87tnT4IB", "type": "p", "indent": 0, "children": [{"text": "If "}, {"code": true, "text": "target - nums[i]"}, {"text": " is in the map, return [map[target - nums[i]], i]."}], "listStyleType": ""}, {"id": "4NWaquKa-S", "type": "p", "indent": 0, "children": [{"text": "Else, add "}, {"code": true, "text": "nums[i]: i"}, {"text": " to the map."}], "listStyleType": ""}, {"id": "gGxWmj5nDy", "type": "hr", "children": [{"text": ""}]}, {"id": "7DoSvakpBy", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "EzHFWPpum4", "type": "code_block", "children": [{"id": "IMM-5BUuLW", "type": "code_line", "children": [{"text": "def twoSum(nums, target):"}]}, {"id": "rqQTaYvX_V", "type": "code_line", "children": [{"text": "    num_map = {}"}]}, {"id": "Ol6xqzjGH2", "type": "code_line", "children": [{"text": "    for i, num in enumerate(nums):"}]}, {"id": "p5v-YMkLbL", "type": "code_line", "children": [{"text": "        complement = target - num"}]}, {"id": "ZKCYYCDvA5", "type": "code_line", "children": [{"text": "        if complement in num_map:"}]}, {"id": "_dtkXqoPpj", "type": "code_line", "children": [{"text": "            return [num_map[complement], i]"}]}, {"id": "Z5gBXAFfDe", "type": "code_line", "children": [{"text": "        num_map[num] = i"}]}]}, {"id": "hbNrLsFrgm", "type": "hr", "children": [{"text": ""}]}, {"id": "i2Umc1fjWM", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "3E9k9t2nEo", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "6_918WeNtK", "type": "code_block", "children": [{"id": "zzYQfGZByG", "type": "code_line", "children": [{"text": "nums = [2, 7, 11, 15], target = 9"}]}, {"id": "tRtPH-fM2_", "type": "code_line", "children": [{"text": "Output: [0, 1]"}]}]}, {"id": "JFkAlVI2Ds", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "Iu9jzI-Y0V", "type": "code_block", "children": [{"id": "5XlYl9QzGE", "type": "code_line", "children": [{"text": "nums = [3, 2, 4], target = 6"}]}, {"id": "tLI3Z8eFL8", "type": "code_line", "children": [{"text": "Output: [1, 2]"}]}]}, {"id": "LsP4zBUA1q", "type": "hr", "children": [{"text": ""}]}, {"id": "Fxa6pfQZyj", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "wtc5XlU5jt", "type": "p", "indent": 0, "children": [{"text": "Negative numbers"}], "listStyleType": ""}, {"id": "VgN0ww3Ttg", "type": "p", "indent": 0, "children": [{"text": "Duplicate values"}], "listStyleType": ""}, {"id": "2y4b6wTjnS", "type": "p", "indent": 0, "children": [{"text": "Target is zero"}], "listStyleType": ""}, {"id": "xfOMCPDIvF", "type": "p", "indent": 0, "children": [{"text": "All numbers are the same"}], "listStyleType": ""}, {"id": "goU2LmIeqT", "type": "hr", "children": [{"text": ""}]}, {"id": "HHkdd9X9bu", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "qS9wbxDjbO", "type": "table", "children": [{"id": "jhcsqf4G3N", "type": "tr", "children": [{"id": "ftjPqdV7DK", "type": "th", "children": [{"id": "bleMuiCjwQ", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "rrtzw8eF5P", "type": "th", "children": [{"id": "j5zX-9IU2V", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "J9FARYi0r4", "type": "tr", "children": [{"id": "xkeIWBSorx", "type": "td", "children": [{"id": "CIzBMpcDCH", "type": "p", "children": [{"text": "Hash Map"}]}]}, {"id": "eNYxV4G6Bx", "type": "td", "children": [{"id": "UBSylNgpPP", "type": "p", "children": [{"text": "Store seen values and their indices"}]}]}]}, {"id": "m9SptDHAJH", "type": "tr", "children": [{"id": "XurCuROCbM", "type": "td", "children": [{"id": "q0Yyi5MilM", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "KzpfJrAPZW", "type": "td", "children": [{"id": "7sZhTmUptB", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "WKQM6LY77M", "type": "tr", "children": [{"id": "24l-cYL5dc", "type": "td", "children": [{"id": "RIl96Su6Tw", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "K7AtxTZaOp", "type": "td", "children": [{"id": "0OxJUay1Rq", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "VSVPWH4r3m", "type": "tr", "children": [{"id": "DDOLSZOl9J", "type": "td", "children": [{"id": "Uhs71jduRg", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "p_2ZRCbd3Z", "type": "td", "children": [{"id": "ssfHV0Jiyw", "type": "p", "children": [{"text": "Use a hash map for fast lookup"}]}]}]}]}, {"id": "RAheaA01BL", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strconv\\"\\n    \\"strings\\"\\n)", "CPP": "#include <iostream>\\n#include <unordered_map>\\n#include <vector>\\n#include <sstream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUST": "use std::collections::HashMap;\\nuse std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\n\\nclass Solution {", "PYTHON": "import sys", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char input[1000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    char* comma = strrchr(input, ',');\\n    *comma = '\\\\0';\\n    int target = atoi(comma + 1);\\n    \\n    char* arrayStr = input + 1;\\n    arrayStr[strlen(arrayStr) - 1] = '\\\\0';\\n    \\n    int nums[1000];\\n    int numsSize = 0;\\n    char* token = strtok(arrayStr, \\",\\");\\n    while (token != NULL) {\\n        nums[numsSize++] = atoi(token);\\n        token = strtok(NULL, \\",\\");\\n    }\\n    \\n    int returnSize;\\n    int* result = twoSum(nums, numsSize, target, &returnSize);\\n    printf(\\"[%d,%d]\\\\n\\", result[0], result[1]);\\n    free(result);\\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    commaPos := strings.LastIndex(input, \\",\\")\\n    numsStr := input[:commaPos]\\n    targetStr := input[commaPos+1:]\\n    \\n    numsStr = strings.Trim(numsStr, \\"[]\\")\\n    target, _ := strconv.Atoi(targetStr)\\n    \\n    parts := strings.Split(numsStr, \\",\\")\\n    nums := make([]int, len(parts))\\n    for i, s := range parts {\\n        nums[i], _ = strconv.Atoi(s)\\n    }\\n    \\n    result := twoSum(nums, target)\\n    fmt.Printf(\\"[%d,%d]\\\\n\\", result[0], result[1])\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n\\n    size_t commaPos = input.find_last_of(',');\\n    string arrayStr = input.substr(0, commaPos);\\n    string targetStr = input.substr(commaPos + 1);\\n\\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\\n    stringstream ss(arrayStr);\\n    vector<int> nums;\\n    string num;\\n\\n    while (getline(ss, num, ',')) {\\n        nums.push_back(stoi(num));\\n    }\\n\\n    int target = stoi(targetStr);\\n\\n    vector<int> result = twoSum(nums, target);\\n    cout << \\"[\\" << result[0] << \\",\\" << result[1] << \\"]\\" << endl;\\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        int commaPos = input.lastIndexOf(',');\\n        String numsStr = input.substring(0, commaPos);\\n        int target = Integer.parseInt(input.substring(commaPos + 1));\\n        \\n        numsStr = numsStr.substring(1, numsStr.length() - 1);\\n        String[] parts = numsStr.split(\\",\\");\\n        int[] nums = new int[parts.length];\\n        for (int i = 0; i < parts.length; i++) {\\n            nums[i] = Integer.parseInt(parts[i]);\\n        }\\n        \\n        Solution sol = new Solution();\\n        int[] result = sol.twoSum(nums, target);\\n        System.out.println(\\"[\\" + result[0] + \\",\\" + result[1] + \\"]\\");\\n    }\\n}", "RUBY": "# Parse input and test the function\\ninput = gets.strip\\nparts = input.split(',')\\ntarget = parts[-1].to_i\\nnums_str = parts[0..-2].join(',')\\nnums = eval(nums_str)\\nresult = two_sum(nums, target)\\nputs \\"[#{result.join(',')}]\\"", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let input = input.trim();\\n    \\n    let comma_pos = input.rfind(',').unwrap();\\n    let nums_str = &input[..comma_pos];\\n    let target_str = &input[comma_pos+1..];\\n    \\n    let nums_str = &nums_str[1..nums_str.len()-1];\\n    let target: i32 = target_str.parse().unwrap();\\n    \\n    let nums: Vec<i32> = nums_str.split(',').map(|s| s.parse().unwrap()).collect();\\n    let result = two_sum(nums, target);\\n    \\n    println!(\\"[{},{}]\\", result[0], result[1]);\\n}", "CSHARP": "}\\nclass Program {\\n    static void Main() {\\n        string input = Console.ReadLine();\\n        int commaPos = input.LastIndexOf(',');\\n        string numsStr = input.Substring(0, commaPos);\\n        int target = int.Parse(input.Substring(commaPos + 1));\\n        \\n        numsStr = numsStr.Substring(1, numsStr.Length - 2);\\n        string[] parts = numsStr.Split(',');\\n        int[] nums = new int[parts.Length];\\n        for (int i = 0; i < parts.Length; i++) {\\n            nums[i] = int.Parse(parts[i]);\\n        }\\n        \\n        Solution sol = new Solution();\\n        int[] result = sol.TwoSum(nums, target);\\n        Console.WriteLine(\\"[\\" + result[0] + \\",\\" + result[1] + \\"]\\");\\n    }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\ncomma_pos = input_data.rfind(',')\\nnums_str = input_data[:comma_pos]\\ntarget = int(input_data[comma_pos+1:])\\nnums_str = nums_str[1:-1]\\nnums = [int(x) for x in nums_str.split(',')]\\nresult = two_sum(nums, target)\\nprint('[' + ','.join(map(str, result)) + ']')", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const match = input.match(/^(\\\\[.*\\\\]),(\\\\d+)$/);\\n    if (!match) {\\n        console.log('[]');\\n        return;\\n    }\\n    const nums = JSON.parse(match[1]);\\n    const target = parseInt(match[2]);\\n    const result = twoSum(nums, target);\\n    console.log(JSON.stringify(result));\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const match = input.match(/^(\\\\[.*\\\\]),(\\\\d+)$/);\\n    if (!match) {\\n        console.log('[]');\\n        return;\\n    }\\n    const nums = JSON.parse(match[1]);\\n    const target = parseInt(match[2]);\\n    const result = twoSum(nums, target);\\n    console.log(JSON.stringify(result));\\n});"}	f	t
a08e5b03-7893-48b2-9379-5525c420ca77	11. Bubble Sort	[{"id": "d1", "type": "p", "children": [{"text": "Bubble Sort is a simple sorting algorithm that repeatedly steps through the array, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the array is sorted. After each pass, the largest unsorted element 'bubbles up' to its correct position at the end of the array. Bubble Sort works in-place and is stable, but is not efficient for large datasets."}]}, {"id": "d2", "type": "p", "children": [{"text": "Given an array "}, {"code": true, "text": "arr[]"}, {"text": ", sort it in ascending order using Bubble Sort."}]}, {"id": "d3", "type": "p", "children": [{"bold": true, "text": "Examples:"}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: arr[] = [4, 1, 3, 9, 7]"}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "Output: [1, 3, 4, 7, 9]"}]}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}]}]}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: arr[] = [1, 2, 3, 4, 5]"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: [1, 2, 3, 4, 5]"}]}, {"id": "d6-3", "type": "code_line", "children": [{"text": "Explanation: An array that is already sorted should remain unchanged after applying bubble sort."}]}]}, {"id": "d7", "type": "p", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d8", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= arr.size() <= 10^3"}], "listStyleType": ""}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= arr[i] <= 10^3"}], "listStyleType": ""}]	easy	["Array", "Sorting", "Algorithm"]	{"C": "void bubbleSort(int* arr, int n) {\\n    // Write your solution here\\n}", "GO": "func bubbleSort(arr []int) []int {\\n    // Write your solution here\\n    return arr\\n}", "CPP": "vector<int> bubbleSort(vector<int>& arr) {\\n    // Write your solution here\\n    return arr;\\n}", "JAVA": "public int[] bubbleSort(int[] arr) {\\n    // Write your solution here\\n    return arr;\\n}", "RUBY": "def bubble_sort(arr)\\n  # Write your solution here\\n  arr\\nend", "RUST": "fn bubble_sort(arr: &mut Vec<i32>) -> Vec<i32> {\\n    // Write your solution here\\n    arr.clone()\\n}", "CSHARP": "public int[] BubbleSort(int[] arr) {\\n    // Write your solution here\\n    return arr;\\n}", "PYTHON": "def bubble_sort(arr):\\n    # Write your solution here\\n    return arr", "JAVASCRIPT": "function bubbleSort(arr) {\\n    // Write your solution here\\n    return arr;\\n}", "TYPESCRIPT": "function bubbleSort(arr: number[]): number[] {\\n    // Write your solution here\\n    return arr;\\n}"}	{"C": "void bubbleSort(int* arr, int n) {\\n    for (int i = 0; i < n - 1; i++) {\\n        int swapped = 0;\\n        \\n        for (int j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                int temp = arr[j];\\n                arr[j] = arr[j + 1];\\n                arr[j + 1] = temp;\\n                swapped = 1;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n}", "GO": "func bubbleSort(arr []int) []int {\\n    n := len(arr)\\n    \\n    for i := 0; i < n-1; i++ {\\n        swapped := false\\n        \\n        for j := 0; j < n-i-1; j++ {\\n            if arr[j] > arr[j+1] {\\n                // Swap arr[j] and arr[j+1]\\n                arr[j], arr[j+1] = arr[j+1], arr[j]\\n                swapped = true\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if !swapped {\\n            break\\n        }\\n    }\\n    \\n    return arr\\n}", "CPP": "vector<int> bubbleSort(vector<int>& arr) {\\n    int n = arr.size();\\n    \\n    for (int i = 0; i < n - 1; i++) {\\n        bool swapped = false;\\n        \\n        for (int j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                swap(arr[j], arr[j + 1]);\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n    \\n    return arr;\\n}", "JAVA": "public int[] bubbleSort(int[] arr) {\\n    int n = arr.length;\\n    \\n    for (int i = 0; i < n - 1; i++) {\\n        boolean swapped = false;\\n        \\n        for (int j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                int temp = arr[j];\\n                arr[j] = arr[j + 1];\\n                arr[j + 1] = temp;\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n    \\n    return arr;\\n}", "RUBY": "def bubble_sort(arr)\\n  n = arr.length\\n  \\n  for i in 0...n\\n    swapped = false\\n    \\n    for j in 0...(n-i-1)\\n      if arr[j] > arr[j+1]\\n        # Swap arr[j] and arr[j+1]\\n        arr[j], arr[j+1] = arr[j+1], arr[j]\\n        swapped = true\\n      end\\n    end\\n    \\n    # If no swapping occurred in this pass, array is sorted\\n    break unless swapped\\n  end\\n  \\n  arr\\nend", "RUST": "fn bubble_sort(arr: &mut Vec<i32>) -> Vec<i32> {\\n    let n = arr.len();\\n    \\n    for i in 0..n {\\n        let mut swapped = false;\\n        \\n        for j in 0..n-i-1 {\\n            if arr[j] > arr[j+1] {\\n                // Swap arr[j] and arr[j+1]\\n                arr.swap(j, j+1);\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if !swapped {\\n            break;\\n        }\\n    }\\n    \\n    arr.clone()\\n}", "CSHARP": "public int[] BubbleSort(int[] arr) {\\n    int n = arr.Length;\\n    \\n    for (int i = 0; i < n - 1; i++) {\\n        bool swapped = false;\\n        \\n        for (int j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                int temp = arr[j];\\n                arr[j] = arr[j + 1];\\n                arr[j + 1] = temp;\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n    \\n    return arr;\\n}", "PYTHON": "def bubble_sort(arr):\\n    n = len(arr)\\n    \\n    for i in range(n):\\n        swapped = False\\n        \\n        for j in range(0, n - i - 1):\\n            if arr[j] > arr[j + 1]:\\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\\n                swapped = True\\n                \\n        if not swapped:\\n            break\\n            \\n    return arr", "JAVASCRIPT": "function bubbleSort(arr) {\\n    const n = arr.length;\\n    \\n    for (let i = 0; i < n - 1; i++) {\\n        let swapped = false;\\n        \\n        for (let j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n    \\n    return arr;\\n}", "TYPESCRIPT": "function bubbleSort(arr: number[]): number[] {\\n    const n = arr.length;\\n    \\n    for (let i = 0; i < n - 1; i++) {\\n        let swapped = false;\\n        \\n        for (let j = 0; j < n - i - 1; j++) {\\n            if (arr[j] > arr[j + 1]) {\\n                // Swap arr[j] and arr[j+1]\\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\\n                swapped = true;\\n            }\\n        }\\n        \\n        // If no swapping occurred in this pass, array is sorted\\n        if (!swapped) break;\\n    }\\n    \\n    return arr;\\n}"}	[{"input": "[5,1,4,2,8]", "output": "[1,2,4,5,8]"}, {"input": "[5,2,3,1,4]", "output": "[1,2,3,4,5]"}, {"input": "[1,2,3,4,5]", "output": "[1,2,3,4,5]"}]	["Compare adjacent elements and swap them if they are in the wrong order", "After each pass, the largest element will be at the end of the array", "Keep track of whether any swaps were made in a pass to optimize the algorithm"]	2025-07-19 08:18:04.666223	2025-07-19 08:18:04.666223	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "url": "https://www.youtube.com/watch?v=V3vM_m2iFtk", "type": "video", "children": [{"text": ""}]}, {"id": "e2", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n"}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n^2)"}, {"text": "\\n"}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e3", "type": "hr", "children": [{"text": ""}]}, {"id": "e4", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e5", "type": "p", "children": [{"text": "Sort an array in ascending order using Bubble Sort. Swap adjacent elements if they are out of order, repeat until sorted."}]}, {"id": "e6", "type": "hr", "children": [{"text": ""}]}, {"id": "e7", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e8", "type": "p", "children": [{"text": "Bubble Sort works by moving the largest unsorted element to the end of the array in each pass. The process continues until no swaps are needed."}]}, {"id": "e9", "type": "hr", "children": [{"text": ""}]}, {"id": "e10", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e11", "type": "code_block", "children": [{"id": "e11-1", "type": "code_line", "children": [{"text": "def bubble_sort(arr):"}]}, {"id": "e11-2", "type": "code_line", "children": [{"text": "  n = len(arr)"}]}, {"id": "e11-3", "type": "code_line", "children": [{"text": "  for i in range(n):"}]}, {"id": "e11-4", "type": "code_line", "children": [{"text": "    swapped = False"}]}, {"id": "e11-5", "type": "code_line", "children": [{"text": "    for j in range(0, n - i - 1):"}]}, {"id": "e11-6", "type": "code_line", "children": [{"text": "      if arr[j] > arr[j + 1]:"}]}, {"id": "e11-7", "type": "code_line", "children": [{"text": "        arr[j], arr[j + 1] = arr[j + 1], arr[j]"}]}, {"id": "e11-8", "type": "code_line", "children": [{"text": "        swapped = True"}]}, {"id": "e11-9", "type": "code_line", "children": [{"text": "    if not swapped:"}]}, {"id": "e11-10", "type": "code_line", "children": [{"text": "      break"}]}, {"id": "e11-11", "type": "code_line", "children": [{"text": "  return arr"}]}]}, {"id": "e12", "type": "hr", "children": [{"text": ""}]}, {"id": "e13", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e14", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e15", "type": "code_block", "children": [{"id": "e15-1", "type": "code_line", "children": [{"text": "Input: arr[] = [4, 1, 3, 9, 7]"}]}, {"id": "e15-2", "type": "code_line", "children": [{"text": "Output: [1, 3, 4, 7, 9]"}]}]}, {"id": "e16", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e17", "type": "code_block", "children": [{"id": "e17-1", "type": "code_line", "children": [{"text": "Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"}]}, {"id": "e17-2", "type": "code_line", "children": [{"text": "Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}]}]}, {"id": "e18", "type": "h3", "children": [{"text": "Example 3:"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "Input: arr[] = [1, 2, 3, 4, 5]"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "Output: [1, 2, 3, 4, 5]"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "Explanation: An array that is already sorted should remain unchanged after applying bubble sort."}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e22", "type": "p", "indent": 0, "children": [{"text": "Empty array"}], "listStyleType": ""}, {"id": "e23", "type": "p", "indent": 0, "children": [{"text": "Array with one element"}], "listStyleType": ""}, {"id": "e24", "type": "hr", "children": [{"text": ""}]}, {"id": "e25", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e26", "type": "table", "children": [{"id": "e26-1", "type": "tr", "children": [{"id": "e26-1-1", "type": "th", "children": [{"id": "e26-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e26-1-2", "type": "th", "children": [{"id": "e26-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e26-2", "type": "tr", "children": [{"id": "e26-2-1", "type": "td", "children": [{"id": "e26-2-1-1", "type": "p", "children": [{"text": "Bubble Sort"}]}]}, {"id": "e26-2-2", "type": "td", "children": [{"id": "e26-2-2-1", "type": "p", "children": [{"text": "Repeatedly swap adjacent elements if out of order"}]}]}]}, {"id": "e26-3", "type": "tr", "children": [{"id": "e26-3-1", "type": "td", "children": [{"id": "e26-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e26-3-2", "type": "td", "children": [{"id": "e26-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n^2)"}]}]}]}, {"id": "e26-4", "type": "tr", "children": [{"id": "e26-4-1", "type": "td", "children": [{"id": "e26-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e26-4-2", "type": "td", "children": [{"id": "e26-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e26-5", "type": "tr", "children": [{"id": "e26-5-1", "type": "td", "children": [{"id": "e26-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e26-5-2", "type": "td", "children": [{"id": "e26-5-2-1", "type": "p", "children": [{"text": "Largest elements bubble to the end each pass"}]}]}]}]}, {"id": "e27", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strings\\"\\n    \\"strconv\\"\\n    \\"encoding/json\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <string>\\n#include <sstream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "require 'json'", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\nclass Solution {", "PYTHON": "import sys\\nimport json", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char input[1000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    // Remove brackets and newline\\n    int len = strlen(input);\\n    if (input[len-1] == '\\\\n') input[len-1] = '\\\\0';\\n    if (input[0] == '[') memmove(input, input+1, len-1);\\n    len = strlen(input);\\n    if (input[len-1] == ']') input[len-1] = '\\\\0';\\n    char* arr_str = input;\\n    \\n    // Count elements\\n    int count = 1;\\n    for (int i = 0; arr_str[i]; i++) {\\n        if (arr_str[i] == ',') count++;\\n    }\\n    \\n    // Parse array\\n    int* arr = (int*)malloc(count * sizeof(int));\\n    char* token = strtok(arr_str, \\",\\");\\n    int i = 0;\\n    while (token != NULL) {\\n        while (*token == ' ') token++; // skip leading spaces\\n        arr[i++] = atoi(token);\\n        token = strtok(NULL, \\",\\");\\n    }\\n    \\n    bubbleSort(arr, count);\\n    \\n    // Print result\\n    printf(\\"[\\");\\n    for (int i = 0; i < count; i++) {\\n        printf(\\"%d\\", arr[i]);\\n        if (i < count - 1) {\\n            printf(\\",\\");\\n        }\\n    }\\n    printf(\\"]\\\\n\\");\\n    \\n    free(arr);\\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    // Remove brackets\\n    input = input[1:len(input)-1]\\n    \\n    // Split by comma\\n    parts := strings.Split(input, \\",\\")\\n    arr := make([]int, len(parts))\\n    \\n    for i, s := range parts {\\n        arr[i], _ = strconv.Atoi(s)\\n    }\\n    \\n    result := bubbleSort(arr)\\n    \\n    // Convert to JSON\\n    jsonResult, _ := json.Marshal(result)\\n    fmt.Println(string(jsonResult))\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n    \\n    // Remove brackets\\n    input = input.substr(1, input.length() - 2);\\n    \\n    vector<int> arr;\\n    stringstream ss(input);\\n    string item;\\n    \\n    while (getline(ss, item, ',')) {\\n        arr.push_back(stoi(item));\\n    }\\n    \\n    vector<int> result = bubbleSort(arr);\\n    \\n    cout << \\"[\\";\\n    for (int i = 0; i < result.size(); i++) {\\n        cout << result[i];\\n        if (i < result.size() - 1) {\\n            cout << \\",\\";\\n        }\\n    }\\n    cout << \\"]\\" << endl;\\n    \\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        input = input.substring(1, input.length() - 1);\\n        String[] parts = input.split(\\",\\");\\n        int[] arr = new int[parts.length];\\n        for (int i = 0; i < parts.length; i++) {\\n            arr[i] = Integer.parseInt(parts[i]);\\n        }\\n        \\n        Solution sol = new Solution();\\n        int[] result = sol.bubbleSort(arr);\\n        \\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < result.length; i++) {\\n            System.out.print(result[i]);\\n            if (i < result.length - 1) {\\n                System.out.print(\\",\\");\\n            }\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "RUBY": "input = gets.strip\\narr = JSON.parse(input)\\nresult = bubble_sort(arr)\\nputs result.to_json", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    // Parse input\\n    let input = input.trim();\\n    let input = &input[1..input.len()-1]; // Remove brackets\\n    let arr: Vec<i32> = input.split(',')\\n                            .map(|s| s.parse().unwrap())\\n                            .collect();\\n    \\n    let mut arr_copy = arr.clone();\\n    let result = bubble_sort(&mut arr_copy);\\n    \\n    // Format output\\n    print!(\\"[\\");\\n    for (i, num) in result.iter().enumerate() {\\n        print!(\\"{}\\", num);\\n        if i < result.len() - 1 {\\n            print!(\\",\\");\\n        }\\n    }\\n    println!(\\"]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        string input = Console.ReadLine();\\n        input = input.Trim('[', ']');\\n        int[] arr = input.Split(',').Select(int.Parse).ToArray();\\n        \\n        Solution sol = new Solution();\\n        int[] result = sol.BubbleSort(arr);\\n        \\n        Console.Write(\\"[\\");\\n        for (int i = 0; i < result.Length; i++) {\\n            Console.Write(result[i]);\\n            if (i < result.Length - 1) {\\n                Console.Write(\\",\\");\\n            }\\n        }\\n        Console.WriteLine(\\"]\\");\\n    }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\narr = json.loads(input_data)\\nresult = bubble_sort(arr)\\nprint('[' + ','.join(map(str, result)) + ']')", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const arr = JSON.parse(input);\\n    const result = bubbleSort(arr);\\n    console.log(JSON.stringify(result));\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const arr = JSON.parse(input);\\n    const result = bubbleSort(arr);\\n    console.log(JSON.stringify(result));\\n});"}	f	t
29021bca-113b-4d80-a0bc-372090fef41c	6. Valid Parentheses	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given a string "}, {"code": true, "text": "s"}, {"text": " containing just the characters "}, {"code": true, "text": "'('"}, {"text": ", "}, {"code": true, "text": "')'"}, {"text": ", "}, {"code": true, "text": "'{'"}, {"text": ", "}, {"code": true, "text": "'}'"}, {"text": ", "}, {"code": true, "text": "'['"}, {"text": ", and "}, {"code": true, "text": "']'"}, {"text": ", determine if the input string is valid."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "A string is valid if:"}]}, {"id": "d3", "type": "p", "indent": 0, "children": [{"text": "Open brackets are closed by the same type of brackets."}], "listStyleType": ""}, {"id": "d4", "type": "p", "indent": 0, "children": [{"text": "Open brackets are closed in the correct order."}], "listStyleType": ""}, {"id": "d5", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: s = \\"()\\""}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d9", "type": "code_block", "children": [{"id": "d9-1", "type": "code_line", "children": [{"text": "Input: s = \\"()[]{}\\""}]}, {"id": "d9-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d10", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 3:"}]}, {"id": "d11", "type": "code_block", "children": [{"id": "d11-1", "type": "code_line", "children": [{"text": "Input: s = \\"(]\\""}]}, {"id": "d11-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "d12", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d13", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= s.length <= 10^4"}], "listStyleType": ""}, {"id": "d14", "type": "p", "indent": 0, "children": [{"code": true, "text": "s consists of parentheses only: '()[]{}'"}], "listStyleType": ""}]	easy	["String", "Stack"]	{"C": "bool isValid(char* s) {\\n  // Write your solution here\\n  return false;\\n}", "GO": "func isValid(s string) bool {\\n  // Write your solution here\\n  return false\\n}", "CPP": "bool isValid(string s) {\\n  // Write your solution here\\n  return false;\\n}", "JAVA": "boolean isValid(String s) {\\n  // Write your solution here\\n  return false;\\n}", "RUBY": "def is_valid(s)\\n  # Write your solution here\\n  false\\nend", "RUST": "fn is_valid(s: String) -> bool {\\n  // Write your solution here\\n  false\\n}", "CSHARP": "public bool IsValid(string s) {\\n  // Write your solution here\\n  return false;\\n}", "PYTHON": "def is_valid(s):\\n  # Write your solution here\\n  return False", "JAVASCRIPT": "function isValid(s) {\\n  // Write your solution here\\n  return false;\\n}", "TYPESCRIPT": "function isValid(s: string): boolean {\\n  // Write your solution here\\n  return false;\\n}"}	{"C": "bool isValid(char* s) {\\n  int len = strlen(s);\\n  char* stack = (char*)malloc(len + 1);\\n  int top = -1;\\n  \\n  for (int i = 0; i < len; i++) {\\n    if (s[i] == '(' || s[i] == '{' || s[i] == '[') {\\n      stack[++top] = s[i];\\n    } else {\\n      if (top == -1) return false;\\n      if (s[i] == ')' && stack[top] != '(') return false;\\n      if (s[i] == '}' && stack[top] != '{') return false;\\n      if (s[i] == ']' && stack[top] != '[') return false;\\n      top--;\\n    }\\n  }\\n  \\n  free(stack);\\n  return top == -1;\\n}", "GO": "func isValid(s string) bool {\\n  stack := []rune{}\\n  mapping := map[rune]rune{\\n    ')': '(',\\n    '}': '{',\\n    ']': '[',\\n  }\\n  \\n  for _, char := range s {\\n    if _, found := mapping[char]; found {\\n      if len(stack) == 0 || stack[len(stack)-1] != mapping[char] {\\n        return false\\n      }\\n      stack = stack[:len(stack)-1]\\n    } else {\\n      stack = append(stack, char)\\n    }\\n  }\\n  \\n  return len(stack) == 0\\n}", "CPP": "bool isValid(string s) {\\n  stack<char> stack;\\n  unordered_map<char, char> map = {{')', '('}, {'}', '{'}, {']', '['}};\\n  \\n  for (char c : s) {\\n    if (map.find(c) != map.end()) {\\n      if (stack.empty() || stack.top() != map[c]) {\\n        return false;\\n      }\\n      stack.pop();\\n    } else {\\n      stack.push(c);\\n    }\\n  }\\n  \\n  return stack.empty();\\n}", "JAVA": "boolean isValid(String s) {\\n  Stack<Character> stack = new Stack<>();\\n  Map<Character, Character> map = new HashMap<>();\\n  map.put(')', '(');\\n  map.put('}', '{');\\n  map.put(']', '[');\\n  \\n  for (char c : s.toCharArray()) {\\n    if (map.containsKey(c)) {\\n      if (stack.isEmpty() || stack.pop() != map.get(c)) {\\n        return false;\\n      }\\n    } else {\\n      stack.push(c);\\n    }\\n  }\\n  \\n  return stack.isEmpty();\\n}", "RUBY": "def is_valid(s)\\n  stack = []\\n  mapping = {')' => '(', '}' => '{', ']' => '['}\\n  \\n  s.each_char do |char|\\n    if mapping.key?(char)\\n      top = stack.pop || '#'\\n      return false if mapping[char] != top\\n    else\\n      stack.push(char)\\n    end\\n  end\\n  \\n  stack.empty?\\nend", "RUST": "fn is_valid(s: String) -> bool {\\n  let mut stack = Vec::new();\\n  let mut map = HashMap::new();\\n  map.insert(')', '(');\\n  map.insert('}', '{');\\n  map.insert(']', '[');\\n  \\n  for c in s.chars() {\\n    if let Some(&matching) = map.get(&c) {\\n      if stack.pop() != Some(matching) {\\n        return false;\\n      }\\n    } else {\\n      stack.push(c);\\n    }\\n  }\\n  \\n  stack.is_empty()\\n}", "CSHARP": "public bool IsValid(string s) {\\n  Stack<char> stack = new Stack<char>();\\n  Dictionary<char, char> map = new Dictionary<char, char> {\\n    {')', '('},\\n    {'}', '{'},\\n    {']', '['}\\n  };\\n  \\n  foreach (char c in s) {\\n    if (map.ContainsKey(c)) {\\n      if (stack.Count == 0 || stack.Pop() != map[c]) {\\n        return false;\\n      }\\n    } else {\\n      stack.Push(c);\\n    }\\n  }\\n  \\n  return stack.Count == 0;\\n}", "PYTHON": "def is_valid(s):\\n  stack = []\\n  mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"}\\n  \\n  for char in s:\\n    if char in mapping:\\n      top_element = stack.pop() if stack else '#'\\n      if mapping[char] != top_element:\\n        return False\\n    else:\\n      stack.append(char)\\n  \\n  return not stack", "JAVASCRIPT": "function isValid(s) {\\n  const stack = [];\\n  const map = {\\n    '(': ')',\\n    '[': ']',\\n    '{': '}'\\n  };\\n  \\n  for (let i = 0; i < s.length; i++) {\\n    if (s[i] in map) {\\n      stack.push(s[i]);\\n    } else {\\n      const last = stack.pop();\\n      if (map[last] !== s[i]) return false;\\n    }\\n  }\\n  \\n  return stack.length === 0;\\n}", "TYPESCRIPT": "function isValid(s: string): boolean {\\n  const stack: string[] = [];\\n  const map: {[key: string]: string} = {\\n    '(': ')',\\n    '[': ']',\\n    '{': '}'\\n  };\\n  \\n  for (let i = 0; i < s.length; i++) {\\n    if (s[i] in map) {\\n      stack.push(s[i]);\\n    } else {\\n      const last = stack.pop();\\n      if (map[last as string] !== s[i]) return false;\\n    }\\n  }\\n  \\n  return stack.length === 0;\\n}"}	[{"input": "()", "output": "true"}, {"input": "()[]{}", "output": "true"}, {"input": "(]", "output": "false"}, {"input": "([)]", "output": "false"}, {"input": "{[]}", "output": "true"}]	["Use a stack data structure to keep track of opening brackets", "When you encounter a closing bracket, check if it matches the most recent opening bracket"]	2025-07-18 07:48:58.79492	2025-07-18 07:48:58.79492	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://youtu.be/abQZotIl70g?si=KaIXwB0I5L_-Eh61&t=5143", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Check if a string of parentheses is valid using a stack."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must process each character once."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 10,000 characters."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use a stack to keep track of open brackets. Match each closing bracket with the top of the stack."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Stack Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Push open brackets onto the stack. For each closing bracket, check if it matches the top of the stack. If not, return false."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def is_valid(s):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  stack = []"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  mapping = {')': '(', '}': '{', ']': '['}"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  for char in s:"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "    if char in mapping.values():"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "      stack.append(char)"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    elif char in mapping:"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "      if not stack or stack[-1] != mapping[char]:"}]}, {"id": "e19-9", "type": "code_line", "children": [{"text": "        return False"}]}, {"id": "e19-10", "type": "code_line", "children": [{"text": "      stack.pop()"}]}, {"id": "e19-11", "type": "code_line", "children": [{"text": "  return not stack"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: s = \\"()\\""}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "e24", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e25", "type": "code_block", "children": [{"id": "e25-1", "type": "code_line", "children": [{"text": "Input: s = \\"()[]{}\\""}]}, {"id": "e25-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "e26", "type": "h3", "children": [{"text": "Example 3:"}]}, {"id": "e27", "type": "code_block", "children": [{"id": "e27-1", "type": "code_line", "children": [{"text": "Input: s = \\"(]\\""}]}, {"id": "e27-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "e28", "type": "hr", "children": [{"text": ""}]}, {"id": "e29", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e30", "type": "p", "indent": 0, "children": [{"text": "Empty string"}], "listStyleType": ""}, {"id": "e31", "type": "p", "indent": 0, "children": [{"text": "Single type of bracket only"}], "listStyleType": ""}, {"id": "e32", "type": "p", "indent": 0, "children": [{"text": "Unmatched opening or closing brackets"}], "listStyleType": ""}, {"id": "e33", "type": "hr", "children": [{"text": ""}]}, {"id": "e34", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e35", "type": "table", "children": [{"id": "e35-1", "type": "tr", "children": [{"id": "e35-1-1", "type": "th", "children": [{"id": "e35-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e35-1-2", "type": "th", "children": [{"id": "e35-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e35-2", "type": "tr", "children": [{"id": "e35-2-1", "type": "td", "children": [{"id": "e35-2-1-1", "type": "p", "children": [{"text": "Stack"}]}]}, {"id": "e35-2-2", "type": "td", "children": [{"id": "e35-2-2-1", "type": "p", "children": [{"text": "Track open brackets and match with closing"}]}]}]}, {"id": "e35-3", "type": "tr", "children": [{"id": "e35-3-1", "type": "td", "children": [{"id": "e35-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e35-3-2", "type": "td", "children": [{"id": "e35-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e35-4", "type": "tr", "children": [{"id": "e35-4-1", "type": "td", "children": [{"id": "e35-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e35-4-2", "type": "td", "children": [{"id": "e35-4-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e35-5", "type": "tr", "children": [{"id": "e35-5-1", "type": "td", "children": [{"id": "e35-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e35-5-2", "type": "td", "children": [{"id": "e35-5-2-1", "type": "p", "children": [{"text": "Stack matches brackets in order"}]}]}]}]}, {"id": "e36", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdbool.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"bufio\\"\\n  \\"os\\"\\n)", "CPP": "#include <iostream>\\n#include <string>\\n#include <stack>\\n#include <unordered_map>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;\\nuse std::collections::HashMap;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n  char input[10001];\\n  fgets(input, sizeof(input), stdin);\\n  input[strcspn(input, \\"\\\\n\\")] = 0;\\n  bool result = isValid(input);\\n  printf(\\"%s\\\\n\\", result ? \\"true\\" : \\"false\\");\\n  return 0;\\n}", "GO": "func main() {\\n  scanner := bufio.NewScanner(os.Stdin)\\n  scanner.Scan()\\n  input := scanner.Text()\\n  result := isValid(input)\\n  if result {\\n    fmt.Println(\\"true\\")\\n  } else {\\n    fmt.Println(\\"false\\")\\n  }\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  bool result = isValid(input);\\n  cout << (result ? \\"true\\" : \\"false\\") << endl;\\n  return 0;\\n}", "JAVA": "}\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    Solution sol = new Solution();\\n    boolean result = sol.isValid(input);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\nresult = is_valid(input)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  let input = input.trim().to_string();\\n  let result = is_valid(input);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    Solution sol = new Solution();\\n    bool result = sol.IsValid(input);\\n    Console.WriteLine(result.ToString().ToLower());\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nresult = is_valid(input_data)\\nprint(str(result).lower())", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const result = isValid(input);\\n  console.log(result);\\n});", "TYPESCRIPT": "const fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst result = isValid(input);\\nconsole.log(result);"}	f	t
afa5c09c-a868-4acd-9895-51e6dae3a81f	10. N-Queens	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "The n-queens puzzle asks you to place "}, {"code": true, "text": "n"}, {"text": " queens on an "}, {"code": true, "text": "n x n"}, {"text": " chessboard so that no two queens threaten each other (no two queens share the same row, column, or diagonal)."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "Return all distinct solutions. Each solution is a list of "}, {"code": true, "text": "n"}, {"text": " strings of length "}, {"code": true, "text": "n"}, {"text": ", where "}, {"code": true, "text": "\\"Q\\""}, {"text": " represents a queen and "}, {"code": true, "text": "\\".\\""}, {"text": " represents an empty space."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "alt": "N-Queens Example Board", "src": "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg", "type": "img", "children": []}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: n = 4"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: [["}, {"text": "\\".Q..\\""}, {"text": ", "}, {"text": "\\"...Q\\""}, {"text": ", "}, {"text": "\\"Q...\\""}, {"text": ", "}, {"text": "\\"..Q.\\""}, {"text": "], ["}, {"text": "\\"..Q.\\""}, {"text": ", "}, {"text": "\\"Q...\\""}, {"text": ", "}, {"text": "\\"...Q\\""}, {"text": ", "}, {"text": "\\".Q..\\""}, {"text": "]]"}]}]}, {"id": "d7", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d8", "type": "code_block", "children": [{"id": "d8-1", "type": "code_line", "children": [{"text": "Input: n = 1"}]}, {"id": "d8-2", "type": "code_line", "children": [{"text": "Output: [[\\"Q\\"]]"}]}]}, {"id": "d9", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d10", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= n <= 9"}], "listStyleType": ""}]	hard	["Array", "Backtracking"]	{"C": "char*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {\\n    // Write your solution here\\n    *returnSize = 0;\\n    return NULL;\\n}", "GO": "func solveNQueens(n int) [][]string {\\n    // Write your solution here\\n    return [][]string{}\\n}", "CPP": "vector<vector<string>> solveNQueens(int n) {\\n    // Write your solution here\\n    return {};\\n}", "JAVA": "List<List<String>> solveNQueens(int n) {\\n    // Write your solution here\\n    return new ArrayList<>();\\n}", "RUBY": "def solve_n_queens(n)\\n  # Write your solution here\\n  []\\nend", "RUST": "fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\\n    // Write your solution here\\n    vec![]\\n}", "CSHARP": "public IList<IList<string>> SolveNQueens(int n) {\\n    // Write your solution here\\n    return new List<IList<string>>();\\n}", "PYTHON": "def solve_n_queens(n):\\n    # Write your solution here\\n    return []", "JAVASCRIPT": "var solveNQueens = function(n) {\\n    // Write your solution here\\n    return [];\\n};", "TYPESCRIPT": "function solveNQueens(n: number): string[][] {\\n    // Write your solution here\\n    return [];\\n}"}	{"C": "char*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {\\n    *returnSize = 0;\\n    char*** result = (char***)malloc(1000 * sizeof(char**));\\n    *returnColumnSizes = (int*)malloc(1000 * sizeof(int));\\n    \\n    // Create board\\n    char** board = (char**)malloc(n * sizeof(char*));\\n    for (int i = 0; i < n; i++) {\\n        board[i] = (char*)malloc((n + 1) * sizeof(char));\\n        for (int j = 0; j < n; j++) {\\n            board[i][j] = '.';\\n        }\\n        board[i][n] = '\\\\0';\\n    }\\n    \\n    // Check if position is valid\\n    bool isValid(char** board, int row, int col) {\\n        // Check column\\n        for (int i = 0; i < row; i++) {\\n            if (board[i][col] == 'Q') return false;\\n        }\\n        \\n        // Check upper left diagonal\\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n            if (board[i][j] == 'Q') return false;\\n        }\\n        \\n        // Check upper right diagonal\\n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\\n            if (board[i][j] == 'Q') return false;\\n        }\\n        \\n        return true;\\n    }\\n    \\n    // Add solution to result\\n    void addSolution(char** board) {\\n        char** solution = (char**)malloc(n * sizeof(char*));\\n        for (int i = 0; i < n; i++) {\\n            solution[i] = (char*)malloc((n + 1) * sizeof(char));\\n            strcpy(solution[i], board[i]);\\n        }\\n        result[*returnSize] = solution;\\n        (*returnColumnSizes)[*returnSize] = n;\\n        (*returnSize)++;\\n    }\\n    \\n    // Backtracking function\\n    void backtrack(int row) {\\n        if (row == n) {\\n            addSolution(board);\\n            return;\\n        }\\n        \\n        for (int col = 0; col < n; col++) {\\n            if (isValid(board, row, col)) {\\n                board[row][col] = 'Q';\\n                backtrack(row + 1);\\n                board[row][col] = '.';\\n            }\\n        }\\n    }\\n    \\n    backtrack(0);\\n    \\n    // Free board\\n    for (int i = 0; i < n; i++) {\\n        free(board[i]);\\n    }\\n    free(board);\\n    \\n    return result;\\n}", "GO": "func solveNQueens(n int) [][]string {\\n    result := [][]string{}\\n    board := make([][]byte, n)\\n    for i := range board {\\n        board[i] = make([]byte, n)\\n        for j := range board[i] {\\n            board[i][j] = '.'\\n        }\\n    }\\n    \\n    var backtrack func(row int)\\n    backtrack = func(row int) {\\n        if row == n {\\n            solution := make([]string, n)\\n            for i := 0; i < n; i++ {\\n                solution[i] = string(board[i])\\n            }\\n            result = append(result, solution)\\n            return\\n        }\\n        \\n        for col := 0; col < n; col++ {\\n            if isValid(board, row, col, n) {\\n                board[row][col] = 'Q'\\n                backtrack(row + 1)\\n                board[row][col] = '.'\\n            }\\n        }\\n    }\\n    \\n    backtrack(0)\\n    return result\\n}\\n\\nfunc isValid(board [][]byte, row, col, n int) bool {\\n    // Check column\\n    for i := 0; i < row; i++ {\\n        if board[i][col] == 'Q' {\\n            return false\\n        }\\n    }\\n    \\n    // Check upper left diagonal\\n    for i, j := row-1, col-1; i >= 0 && j >= 0; i, j = i-1, j-1 {\\n        if board[i][j] == 'Q' {\\n            return false\\n        }\\n    }\\n    \\n    // Check upper right diagonal\\n    for i, j := row-1, col+1; i >= 0 && j < n; i, j = i-1, j+1 {\\n        if board[i][j] == 'Q' {\\n            return false\\n        }\\n    }\\n    \\n    return true\\n}", "CPP": "vector<vector<string>> solveNQueens(int n) {\\n    vector<vector<string>> result;\\n    vector<string> board(n, string(n, '.'));\\n    \\n    // Check if position is valid\\n    auto isValid = [&](int row, int col) -> bool {\\n        // Check column\\n        for (int i = 0; i < row; i++) {\\n            if (board[i][col] == 'Q') {\\n                return false;\\n            }\\n        }\\n        \\n        // Check upper left diagonal\\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n            if (board[i][j] == 'Q') {\\n                return false;\\n            }\\n        }\\n        \\n        // Check upper right diagonal\\n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\\n            if (board[i][j] == 'Q') {\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    };\\n    \\n    // Backtracking function\\n    function<void(int)> backtrack = [&](int row) {\\n        if (row == n) {\\n            result.push_back(board);\\n            return;\\n        }\\n        \\n        for (int col = 0; col < n; col++) {\\n            if (isValid(row, col)) {\\n                board[row][col] = 'Q';\\n                backtrack(row + 1);\\n                board[row][col] = '.';\\n            }\\n        }\\n    };\\n    \\n    backtrack(0);\\n    return result;\\n}", "JAVA": "List<List<String>> solveNQueens(int n) {\\n    List<List<String>> result = new ArrayList<>();\\n    char[][] board = new char[n][n];\\n    \\n    // Initialize board\\n    for (int i = 0; i < n; i++) {\\n        for (int j = 0; j < n; j++) {\\n            board[i][j] = '.';\\n        }\\n    }\\n    \\n    backtrack(board, 0, result);\\n    return result;\\n}\\n\\nprivate void backtrack(char[][] board, int row, List<List<String>> result) {\\n    if (row == board.length) {\\n        result.add(constructSolution(board));\\n        return;\\n    }\\n    \\n    for (int col = 0; col < board.length; col++) {\\n        if (isValid(board, row, col)) {\\n            board[row][col] = 'Q';\\n            backtrack(board, row + 1, result);\\n            board[row][col] = '.';\\n        }\\n    }\\n}\\n\\nprivate boolean isValid(char[][] board, int row, int col) {\\n    // Check column\\n    for (int i = 0; i < row; i++) {\\n        if (board[i][col] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    // Check upper left diagonal\\n    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n        if (board[i][j] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    // Check upper right diagonal\\n    for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {\\n        if (board[i][j] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    return true;\\n}\\n\\nprivate List<String> constructSolution(char[][] board) {\\n    List<String> solution = new ArrayList<>();\\n    for (int i = 0; i < board.length; i++) {\\n        solution.add(new String(board[i]));\\n    }\\n    return solution;\\n}", "RUBY": "def solve_n_queens(n)\\n  result = []\\n  board = Array.new(n) { Array.new(n, '.') }\\n  \\n  def is_valid(board, row, col)\\n    # Check column\\n    (0...row).each do |i|\\n      return false if board[i][col] == 'Q'\\n    end\\n    \\n    # Check upper left diagonal\\n    i, j = row - 1, col - 1\\n    while i >= 0 && j >= 0\\n      return false if board[i][j] == 'Q'\\n      i -= 1\\n      j -= 1\\n    end\\n    \\n    # Check upper right diagonal\\n    i, j = row - 1, col + 1\\n    while i >= 0 && j < board.length\\n      return false if board[i][j] == 'Q'\\n      i -= 1\\n      j += 1\\n    end\\n    \\n    true\\n  end\\n  \\n  def backtrack(board, row, result)\\n    if row == board.length\\n      result << board.map(&:join)\\n      return\\n    end\\n    \\n    (0...board.length).each do |col|\\n      if is_valid(board, row, col)\\n        board[row][col] = 'Q'\\n        backtrack(board, row + 1, result)\\n        board[row][col] = '.'\\n      end\\n    end\\n  end\\n  \\n  backtrack(board, 0, result)\\n  result\\nend", "RUST": "fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\\n    let n = n as usize;\\n    let mut result = Vec::new();\\n    let mut board = vec![vec!['.'; n]; n];\\n    \\n    fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize) -> bool {\\n        // Check column\\n        for i in 0..row {\\n            if board[i][col] == 'Q' {\\n                return false;\\n            }\\n        }\\n        \\n        // Check upper left diagonal\\n        let mut i = row as i32 - 1;\\n        let mut j = col as i32 - 1;\\n        while i >= 0 && j >= 0 {\\n            if board[i as usize][j as usize] == 'Q' {\\n                return false;\\n            }\\n            i -= 1;\\n            j -= 1;\\n        }\\n        \\n        // Check upper right diagonal\\n        let mut i = row as i32 - 1;\\n        let mut j = col as i32 + 1;\\n        while i >= 0 && j < board.len() as i32 {\\n            if board[i as usize][j as usize] == 'Q' {\\n                return false;\\n            }\\n            i -= 1;\\n            j += 1;\\n        }\\n        \\n        true\\n    }\\n    \\n    fn backtrack(board: &mut Vec<Vec<char>>, row: usize, result: &mut Vec<Vec<String>>) {\\n        if row == board.len() {\\n            let solution: Vec<String> = board\\n                .iter()\\n                .map(|r| r.iter().collect::<String>())\\n                .collect();\\n            result.push(solution);\\n            return;\\n        }\\n        \\n        for col in 0..board.len() {\\n            if is_valid(board, row, col) {\\n                board[row][col] = 'Q';\\n                backtrack(board, row + 1, result);\\n                board[row][col] = '.';\\n            }\\n        }\\n    }\\n    \\n    backtrack(&mut board, 0, &mut result);\\n    result\\n}", "CSHARP": "public IList<IList<string>> SolveNQueens(int n) {\\n    var result = new List<IList<string>>();\\n    var board = new char[n][];\\n    \\n    // Initialize board\\n    for (int i = 0; i < n; i++) {\\n        board[i] = new char[n];\\n        for (int j = 0; j < n; j++) {\\n            board[i][j] = '.';\\n        }\\n    }\\n    \\n    Backtrack(board, 0, result);\\n    return result;\\n}\\n\\nprivate void Backtrack(char[][] board, int row, IList<IList<string>> result) {\\n    if (row == board.Length) {\\n        result.Add(ConstructSolution(board));\\n        return;\\n    }\\n    \\n    for (int col = 0; col < board.Length; col++) {\\n        if (IsValid(board, row, col)) {\\n            board[row][col] = 'Q';\\n            Backtrack(board, row + 1, result);\\n            board[row][col] = '.';\\n        }\\n    }\\n}\\n\\nprivate bool IsValid(char[][] board, int row, int col) {\\n    // Check column\\n    for (int i = 0; i < row; i++) {\\n        if (board[i][col] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    // Check upper left diagonal\\n    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n        if (board[i][j] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    // Check upper right diagonal\\n    for (int i = row - 1, j = col + 1; i >= 0 && j < board.Length; i--, j++) {\\n        if (board[i][j] == 'Q') {\\n            return false;\\n        }\\n    }\\n    \\n    return true;\\n}\\n\\nprivate IList<string> ConstructSolution(char[][] board) {\\n    var solution = new List<string>();\\n    for (int i = 0; i < board.Length; i++) {\\n        solution.Add(new string(board[i]));\\n    }\\n    return solution;\\n}", "PYTHON": "def solve_n_queens(n):\\n    result = []\\n    \\n    # Create empty board\\n    board = [['.' for _ in range(n)] for _ in range(n)]\\n    \\n    def is_valid(row, col):\\n        # Check column\\n        for i in range(row):\\n            if board[i][col] == 'Q':\\n                return False\\n        \\n        # Check upper left diagonal\\n        i, j = row - 1, col - 1\\n        while i >= 0 and j >= 0:\\n            if board[i][j] == 'Q':\\n                return False\\n            i -= 1\\n            j -= 1\\n        \\n        # Check upper right diagonal\\n        i, j = row - 1, col + 1\\n        while i >= 0 and j < n:\\n            if board[i][j] == 'Q':\\n                return False\\n            i -= 1\\n            j += 1\\n        \\n        return True\\n    \\n    def backtrack(row):\\n        if row == n:\\n            # Create solution without spaces\\n            solution = []\\n            for r in board:\\n                solution.append(''.join(r))\\n            result.append(solution)\\n            return\\n        \\n        for col in range(n):\\n            if is_valid(row, col):\\n                board[row][col] = 'Q'\\n                backtrack(row + 1)\\n                board[row][col] = '.'\\n    \\n    backtrack(0)\\n    return result", "JAVASCRIPT": "var solveNQueens = function(n) {\\n    const result = [];\\n    \\n    // Create empty board\\n    const createBoard = () => {\\n        const board = [];\\n        for (let i = 0; i < n; i++) {\\n            board.push(new Array(n).fill('.'));\\n        }\\n        return board;\\n    };\\n    \\n    // Check if position is valid\\n    const isValid = (board, row, col) => {\\n        // Check column\\n        for (let i = 0; i < row; i++) {\\n            if (board[i][col] === 'Q') return false;\\n        }\\n        \\n        // Check upper left diagonal\\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n            if (board[i][j] === 'Q') return false;\\n        }\\n        \\n        // Check upper right diagonal\\n        for (let i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\\n            if (board[i][j] === 'Q') return false;\\n        }\\n        \\n        return true;\\n    };\\n    \\n    // Convert board to required format\\n    const formatBoard = (board) => {\\n        return board.map(row => row.join(''));\\n    };\\n    \\n    // Backtracking function\\n    const backtrack = (board, row) => {\\n        if (row === n) {\\n            result.push(formatBoard([...board]));\\n            return;\\n        }\\n        \\n        for (let col = 0; col < n; col++) {\\n            if (isValid(board, row, col)) {\\n                board[row][col] = 'Q';\\n                backtrack(board, row + 1);\\n                board[row][col] = '.';\\n            }\\n        }\\n    };\\n    \\n    backtrack(createBoard(), 0);\\n    return result;\\n};", "TYPESCRIPT": "function solveNQueens(n: number): string[][] {\\n    const result: string[][] = [];\\n    \\n    // Create empty board\\n    const createBoard = (): string[][] => {\\n        const board: string[][] = [];\\n        for (let i = 0; i < n; i++) {\\n            const row: string[] = [];\\n            for (let j = 0; j < n; j++) {\\n                row.push('.');\\n            }\\n            board.push(row);\\n        }\\n        return board;\\n    };\\n    \\n    // Check if position is valid\\n    const isValid = (board: string[][], row: number, col: number): boolean => {\\n        // Check column\\n        for (let i = 0; i < row; i++) {\\n            if (board[i][col] === 'Q') return false;\\n        }\\n        \\n        // Check upper left diagonal\\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\\n            if (board[i][j] === 'Q') return false;\\n        }\\n        \\n        // Check upper right diagonal\\n        for (let i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\\n            if (board[i][j] === 'Q') return false;\\n        }\\n        \\n        return true;\\n    };\\n    \\n    // Convert board to required format\\n    const formatBoard = (board: string[][]): string[] => {\\n        return board.map(row => row.join(''));\\n    };\\n    \\n    // Backtracking function\\n    const backtrack = (board: string[][], row: number): void => {\\n        if (row === n) {\\n            result.push(formatBoard(board.map(r => [...r])));\\n            return;\\n        }\\n        \\n        for (let col = 0; col < n; col++) {\\n            if (isValid(board, row, col)) {\\n                board[row][col] = 'Q';\\n                backtrack(board, row + 1);\\n                board[row][col] = '.';\\n            }\\n        }\\n    };\\n    \\n    backtrack(createBoard(), 0);\\n    return result;\\n}"}	[{"input": "4", "output": "[[\\".Q..\\",\\"...Q\\",\\"Q...\\",\\"..Q.\\"],[\\"..Q.\\",\\"Q...\\",\\"...Q\\",\\".Q..\\"]]"}, {"input": "1", "output": "[[\\"Q\\"]]"}]	["Use backtracking to explore all valid board configurations", "For each position, check if placing a queen would conflict with any previously placed queens", "Queens can attack horizontally, vertically, and diagonally"]	2025-07-18 17:44:11.300193	2025-07-18 17:44:11.300193	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=Ph95IHmRp5M", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Hard\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n!)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n^2)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Place n queens on an n x n chessboard so that no two queens threaten each other. Return all possible board configurations."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "No two queens can share the same row, column, or diagonal."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to n = 9."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use backtracking to try placing a queen in each row, checking for conflicts in columns and diagonals."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Backtracking Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Recursively place queens row by row, using sets to track columns and diagonals. If a placement is valid, continue; otherwise, backtrack."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def solve_n_queens(n):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  res = []"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  cols = set()"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  diag1 = set()"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "  diag2 = set()"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "  board = ['.'*n for _ in range(n)]"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "  def backtrack(r):"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "    if r == n:"}]}, {"id": "e19-9", "type": "code_line", "children": [{"text": "      res.append(board[:])"}]}, {"id": "e19-10", "type": "code_line", "children": [{"text": "      return"}]}, {"id": "e19-11", "type": "code_line", "children": [{"text": "    for c in range(n):"}]}, {"id": "e19-12", "type": "code_line", "children": [{"text": "      if c in cols or (r-c) in diag1 or (r+c) in diag2:"}]}, {"id": "e19-13", "type": "code_line", "children": [{"text": "        continue"}]}, {"id": "e19-14", "type": "code_line", "children": [{"text": "      board[r] = board[r][:c] + 'Q' + board[r][c+1:]"}]}, {"id": "e19-15", "type": "code_line", "children": [{"text": "      cols.add(c); diag1.add(r-c); diag2.add(r+c)"}]}, {"id": "e19-16", "type": "code_line", "children": [{"text": "      backtrack(r+1)"}]}, {"id": "e19-17", "type": "code_line", "children": [{"text": "      board[r] = board[r][:c] + '.' + board[r][c+1:]"}]}, {"id": "e19-18", "type": "code_line", "children": [{"text": "      cols.remove(c); diag1.remove(r-c); diag2.remove(r+c)"}]}, {"id": "e19-19", "type": "code_line", "children": [{"text": "  backtrack(0)"}]}, {"id": "e19-20", "type": "code_line", "children": [{"text": "  return res"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: n = 4"}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: [["}, {"text": "\\".Q..\\""}, {"text": ", "}, {"text": "\\"...Q\\""}, {"text": ", "}, {"text": "\\"Q...\\""}, {"text": ", "}, {"text": "\\"..Q.\\""}, {"text": "], ["}, {"text": "\\"..Q.\\""}, {"text": ", "}, {"text": "\\"Q...\\""}, {"text": ", "}, {"text": "\\"...Q\\""}, {"text": ", "}, {"text": "\\".Q..\\""}, {"text": "]]"}]}]}, {"id": "e24", "type": "hr", "children": [{"text": ""}]}, {"id": "e25", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e26", "type": "p", "indent": 0, "children": [{"text": "n = 1 (single queen)"}], "listStyleType": ""}, {"id": "e27", "type": "p", "indent": 0, "children": [{"text": "n = 2 or n = 3 (no solution)"}], "listStyleType": ""}, {"id": "e28", "type": "hr", "children": [{"text": ""}]}, {"id": "e29", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e30", "type": "table", "children": [{"id": "e30-1", "type": "tr", "children": [{"id": "e30-1-1", "type": "th", "children": [{"id": "e30-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e30-1-2", "type": "th", "children": [{"id": "e30-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e30-2", "type": "tr", "children": [{"id": "e30-2-1", "type": "td", "children": [{"id": "e30-2-1-1", "type": "p", "children": [{"text": "Backtracking"}]}]}, {"id": "e30-2-2", "type": "td", "children": [{"id": "e30-2-2-1", "type": "p", "children": [{"text": "Try all placements row by row, backtrack on conflicts"}]}]}]}, {"id": "e30-3", "type": "tr", "children": [{"id": "e30-3-1", "type": "td", "children": [{"id": "e30-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e30-3-2", "type": "td", "children": [{"id": "e30-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n!)"}]}]}]}, {"id": "e30-4", "type": "tr", "children": [{"id": "e30-4-1", "type": "td", "children": [{"id": "e30-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e30-4-2", "type": "td", "children": [{"id": "e30-4-2-1", "type": "p", "children": [{"code": true, "text": "O(n^2)"}]}]}]}, {"id": "e30-5", "type": "tr", "children": [{"id": "e30-5-1", "type": "td", "children": [{"id": "e30-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e30-5-2", "type": "td", "children": [{"id": "e30-5-2-1", "type": "p", "children": [{"text": "Track columns and diagonals for conflicts"}]}]}]}]}, {"id": "e31", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdbool.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strconv\\"\\n    \\"encoding/json\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <string>\\n#include <functional>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "require 'json'", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\n\\nclass Solution {", "PYTHON": "import sys\\nimport json", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    int n;\\n    scanf(\\"%d\\", &n);\\n    \\n    int returnSize;\\n    int* returnColumnSizes;\\n    char*** result = solveNQueens(n, &returnSize, &returnColumnSizes);\\n    \\n    // Convert to JSON-like format\\n    printf(\\"[\\");\\n    for (int i = 0; i < returnSize; i++) {\\n        printf(\\"[\\");\\n        for (int j = 0; j < returnColumnSizes[i]; j++) {\\n            printf(\\"\\\\\\"%s\\\\\\"\\", result[i][j]);\\n            if (j < returnColumnSizes[i] - 1) {\\n                printf(\\",\\");\\n            }\\n        }\\n        printf(\\"]\\");\\n        if (i < returnSize - 1) {\\n            printf(\\",\\");\\n        }\\n    }\\n    printf(\\"]\\\\n\\");\\n    \\n    // Free memory\\n    for (int i = 0; i < returnSize; i++) {\\n        for (int j = 0; j < returnColumnSizes[i]; j++) {\\n            free(result[i][j]);\\n        }\\n        free(result[i]);\\n    }\\n    free(result);\\n    free(returnColumnSizes);\\n    \\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    n, _ := strconv.Atoi(input)\\n    \\n    result := solveNQueens(n)\\n    \\n    // Convert to JSON\\n    jsonResult, _ := json.Marshal(result)\\n    fmt.Println(string(jsonResult))\\n}", "CPP": "int main() {\\n    int n;\\n    cin >> n;\\n    \\n    vector<vector<string>> result = solveNQueens(n);\\n    \\n    // Convert to JSON-like format\\n    cout << \\"[\\";\\n    for (int i = 0; i < result.size(); i++) {\\n        cout << \\"[\\";\\n        for (int j = 0; j < result[i].size(); j++) {\\n            cout << \\"\\\\\\"\\" << result[i][j] << \\"\\\\\\"\\";\\n            if (j < result[i].size() - 1) {\\n                cout << \\",\\";\\n            }\\n        }\\n        cout << \\"]\\";\\n        if (i < result.size() - 1) {\\n            cout << \\",\\";\\n        }\\n    }\\n    cout << \\"]\\" << endl;\\n    \\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        \\n        Solution sol = new Solution();\\n        List<List<String>> result = sol.solveNQueens(n);\\n        \\n        // Convert to JSON-like format\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < result.size(); i++) {\\n            System.out.print(\\"[\\");\\n            for (int j = 0; j < result.get(i).size(); j++) {\\n                System.out.print(\\"\\\\\\"\\" + result.get(i).get(j) + \\"\\\\\\"\\");\\n                if (j < result.get(i).size() - 1) {\\n                    System.out.print(\\",\\");\\n                }\\n            }\\n            System.out.print(\\"]\\");\\n            if (i < result.size() - 1) {\\n                System.out.print(\\",\\");\\n            }\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "RUBY": "n = gets.strip.to_i\\nresult = solve_n_queens(n)\\nputs result.to_json", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let n: i32 = input.trim().parse().unwrap();\\n    \\n    let result = solve_n_queens(n);\\n    \\n    // Convert to JSON-like format\\n    print!(\\"[\\");\\n    for (i, board) in result.iter().enumerate() {\\n        print!(\\"[\\");\\n        for (j, row) in board.iter().enumerate() {\\n            print!(\\"\\\\\\"{}\\\\\\"\\", row);\\n            if j < board.len() - 1 {\\n                print!(\\",\\");\\n            }\\n        }\\n        print!(\\"]\\");\\n        if i < result.len() - 1 {\\n            print!(\\",\\");\\n        }\\n    }\\n    println!(\\"]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        int n = int.Parse(Console.ReadLine());\\n        \\n        Solution sol = new Solution();\\n        IList<IList<string>> result = sol.SolveNQueens(n);\\n        \\n        // Convert to JSON format\\n        Console.Write(\\"[\\");\\n        for (int i = 0; i < result.Count; i++) {\\n            Console.Write(\\"[\\");\\n            for (int j = 0; j < result[i].Count; j++) {\\n                Console.Write(\\"\\\\\\"\\" + result[i][j] + \\"\\\\\\"\\");\\n                if (j < result[i].Count - 1) {\\n                    Console.Write(\\",\\");\\n                }\\n            }\\n            Console.Write(\\"]\\");\\n            if (i < result.Count - 1) {\\n                Console.Write(\\",\\");\\n            }\\n        }\\n        Console.WriteLine(\\"]\\");\\n    }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nn = int(input_data)\\nresult = solve_n_queens(n)\\n# Ensure no spaces in JSON output\\nprint(json.dumps(result).replace(\\" \\", \\"\\"))", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const n = parseInt(input);\\n    const result = solveNQueens(n);\\n    console.log(JSON.stringify(result));\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const n = parseInt(input);\\n    const result = solveNQueens(n);\\n    console.log(JSON.stringify(result));\\n});"}	t	t
69e1c569-051e-4d37-a6dd-a7dd453d6a25	12. Fibonacci Number	[{"id": "d1", "type": "p", "children": [{"text": "The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Given "}, {"code": true, "text": "n"}, {"text": ", return the "}, {"code": true, "text": "n"}, {"text": "th Fibonacci number."}]}, {"id": "d2", "type": "p", "children": [{"bold": true, "text": "Examples:"}]}, {"id": "d3", "type": "code_block", "children": [{"id": "d3-1", "type": "code_line", "children": [{"text": "Input: n = 5"}]}, {"id": "d3-2", "type": "code_line", "children": [{"text": "Output: 5"}]}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: n = 10"}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "Output: 55"}]}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: n = 0"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: 0"}]}]}, {"id": "d6", "type": "p", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d7", "type": "p", "indent": 0, "children": [{"code": true, "text": "0 <= n <= 30"}], "listStyleType": ""}]	easy	["Dynamic Programming", "Math", "Algorithm"]	{"C": "int fibonacci(int n) {\\n    // Write your solution here\\n    return 0;\\n}", "GO": "func fibonacci(n int) int {\\n    // Write your solution here\\n    return 0\\n}", "CPP": "int fibonacci(int n) {\\n    // Write your solution here\\n    return 0;\\n}", "JAVA": "public int fibonacci(int n) {\\n    // Write your solution here\\n    return 0;\\n}", "RUBY": "def fibonacci(n)\\n  # Write your solution here\\n  0\\nend", "RUST": "fn fibonacci(n: i32) -> i32 {\\n    // Write your solution here\\n    0\\n}", "CSHARP": "public int Fibonacci(int n) {\\n    // Write your solution here\\n    return 0;\\n}", "PYTHON": "def fibonacci(n):\\n    # Write your solution here\\n    return 0", "JAVASCRIPT": "function fibonacci(n) {\\n    // Write your solution here\\n    return 0;\\n}", "TYPESCRIPT": "function fibonacci(n: number): number {\\n    // Write your solution here\\n    return 0;\\n}"}	{"C": "int fibonacci(int n) {\\n    if (n <= 1) return n;\\n    \\n    int dp[n + 1];\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (int i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}", "GO": "func fibonacci(n int) int {\\n    if n <= 1 {\\n        return n\\n    }\\n    \\n    dp := make([]int, n+1)\\n    dp[0] = 0\\n    dp[1] = 1\\n    \\n    for i := 2; i <= n; i++ {\\n        dp[i] = dp[i-1] + dp[i-2]\\n    }\\n    \\n    return dp[n]\\n}", "CPP": "int fibonacci(int n) {\\n    if (n <= 1) return n;\\n    \\n    vector<int> dp(n + 1);\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (int i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}", "JAVA": "public int fibonacci(int n) {\\n    if (n <= 1) return n;\\n    \\n    int[] dp = new int[n + 1];\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (int i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}", "RUBY": "def fibonacci(n)\\n  return n if n <= 1\\n  \\n  dp = Array.new(n + 1)\\n  dp[0] = 0\\n  dp[1] = 1\\n  \\n  (2..n).each do |i|\\n    dp[i] = dp[i - 1] + dp[i - 2]\\n  end\\n  \\n  dp[n]\\nend", "RUST": "fn fibonacci(n: i32) -> i32 {\\n    if n <= 1 {\\n        return n;\\n    }\\n    \\n    let n_usize = n as usize;\\n    let mut dp = vec![0; n_usize + 1];\\n    dp[1] = 1;\\n    \\n    for i in 2..=n_usize {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    dp[n_usize] as i32\\n}", "CSHARP": "public int Fibonacci(int n) {\\n    if (n <= 1) return n;\\n    \\n    int[] dp = new int[n + 1];\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (int i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}", "PYTHON": "def fibonacci(n):\\n    if n <= 1:\\n        return n\\n        \\n    dp = [0] * (n + 1)\\n    dp[1] = 1\\n    \\n    for i in range(2, n + 1):\\n        dp[i] = dp[i - 1] + dp[i - 2]\\n        \\n    return dp[n]", "JAVASCRIPT": "function fibonacci(n) {\\n    if (n <= 1) return n;\\n    \\n    let dp = new Array(n + 1);\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (let i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}", "TYPESCRIPT": "function fibonacci(n: number): number {\\n    if (n <= 1) return n;\\n    \\n    const dp: number[] = new Array(n + 1);\\n    dp[0] = 0;\\n    dp[1] = 1;\\n    \\n    for (let i = 2; i <= n; i++) {\\n        dp[i] = dp[i - 1] + dp[i - 2];\\n    }\\n    \\n    return dp[n];\\n}"}	[{"input": "2", "output": "1"}, {"input": "5", "output": "5"}, {"input": "10", "output": "55"}]	["Use an array or map to store previously calculated Fibonacci numbers", "Consider using a bottom-up approach to avoid stack overflow for large n", "Be careful about integer overflow for large values of n"]	2025-07-19 09:36:20.554035	2025-07-19 09:36:20.554035	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "url": "https://www.youtube.com/watch?v=FggXDrgeI20", "type": "video", "children": [{"text": ""}]}, {"id": "e2", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n"}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n"}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e3", "type": "hr", "children": [{"text": ""}]}, {"id": "e4", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e5", "type": "p", "children": [{"text": "Compute the nth Fibonacci number using an iterative approach for optimal performance."}]}, {"id": "e6", "type": "hr", "children": [{"text": ""}]}, {"id": "e7", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e8", "type": "p", "children": [{"text": "Start from the base cases and build up to n by summing the previous two numbers."}]}, {"id": "e9", "type": "hr", "children": [{"text": ""}]}, {"id": "e10", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e11", "type": "code_block", "children": [{"id": "e11-1", "type": "code_line", "children": [{"text": "def fib(n):"}]}, {"id": "e11-2", "type": "code_line", "children": [{"text": "  if n == 0: return 0"}]}, {"id": "e11-3", "type": "code_line", "children": [{"text": "  if n == 1: return 1"}]}, {"id": "e11-4", "type": "code_line", "children": [{"text": "  a, b = 0, 1"}]}, {"id": "e11-5", "type": "code_line", "children": [{"text": "  for _ in range(2, n+1):"}]}, {"id": "e11-6", "type": "code_line", "children": [{"text": "    a, b = b, a + b"}]}, {"id": "e11-7", "type": "code_line", "children": [{"text": "  return b"}]}]}, {"id": "e12", "type": "hr", "children": [{"text": ""}]}, {"id": "e13", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e14", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e15", "type": "code_block", "children": [{"id": "e15-1", "type": "code_line", "children": [{"text": "Input: n = 5"}]}, {"id": "e15-2", "type": "code_line", "children": [{"text": "Output: 5"}]}]}, {"id": "e16", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e17", "type": "code_block", "children": [{"id": "e17-1", "type": "code_line", "children": [{"text": "Input: n = 10"}]}, {"id": "e17-2", "type": "code_line", "children": [{"text": "Output: 55"}]}]}, {"id": "e18", "type": "h3", "children": [{"text": "Example 3:"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "Input: n = 0"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "Output: 0"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e22", "type": "p", "indent": 0, "children": [{"text": "n = 0 or n = 1 (base cases)"}], "listStyleType": ""}, {"id": "e23", "type": "hr", "children": [{"text": ""}]}, {"id": "e24", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e25", "type": "table", "children": [{"id": "e25-1", "type": "tr", "children": [{"id": "e25-1-1", "type": "th", "children": [{"id": "e25-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e25-1-2", "type": "th", "children": [{"id": "e25-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e25-2", "type": "tr", "children": [{"id": "e25-2-1", "type": "td", "children": [{"id": "e25-2-1-1", "type": "p", "children": [{"text": "Iterative"}]}]}, {"id": "e25-2-2", "type": "td", "children": [{"id": "e25-2-2-1", "type": "p", "children": [{"text": "Build up from base cases using two variables"}]}]}]}, {"id": "e25-3", "type": "tr", "children": [{"id": "e25-3-1", "type": "td", "children": [{"id": "e25-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e25-3-2", "type": "td", "children": [{"id": "e25-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e25-4", "type": "tr", "children": [{"id": "e25-4-1", "type": "td", "children": [{"id": "e25-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e25-4-2", "type": "td", "children": [{"id": "e25-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e25-5", "type": "tr", "children": [{"id": "e25-5-1", "type": "td", "children": [{"id": "e25-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e25-5-2", "type": "td", "children": [{"id": "e25-5-2-1", "type": "p", "children": [{"text": "Only previous two values are needed at each step"}]}]}]}]}, {"id": "e26", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;", "CSHARP": "using System;\\n\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    int n;\\n    scanf(\\"%d\\", &n);\\n    \\n    int result = fibonacci(n);\\n    printf(\\"%d\\\\n\\", result);\\n    \\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    n, _ := strconv.Atoi(input)\\n    \\n    result := fibonacci(n)\\n    fmt.Println(result)\\n}", "CPP": "int main() {\\n    int n;\\n    cin >> n;\\n    \\n    int result = fibonacci(n);\\n    cout << result << endl;\\n    \\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        \\n        Solution sol = new Solution();\\n        int result = sol.fibonacci(n);\\n        System.out.println(result);\\n    }\\n}", "RUBY": "n = gets.strip.to_i\\nresult = fibonacci(n)\\nputs result", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    let n: i32 = input.trim().parse().unwrap();\\n    \\n    let result = fibonacci(n);\\n    println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        int n = int.Parse(Console.ReadLine());\\n        \\n        Solution sol = new Solution();\\n        int result = sol.Fibonacci(n);\\n        Console.WriteLine(result);\\n    }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nn = int(input_data)\\nresult = fibonacci(n)\\nprint(result)", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const n = parseInt(input);\\n    const result = fibonacci(n);\\n    console.log(result);\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const n = parseInt(input);\\n    const result = fibonacci(n);\\n    console.log(result);\\n});"}	f	t
98892b62-c56d-4769-bd0d-711a4ce0ff76	3. Median of Two Sorted Arrays	[{"id": "uZVuSj9Lx_", "type": "p", "align": "start", "children": [{"text": "Given two sorted arrays "}, {"code": true, "text": "nums1", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "and "}, {"code": true, "text": "nums2", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "of size "}, {"code": true, "text": "m", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "and "}, {"code": true, "text": "n", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "respectively, return "}, {"bold": true, "text": "the median"}, {"text": " of the two sorted arrays."}]}, {"id": "07Tc2sGa3G", "type": "p", "align": "start", "children": [{"text": "The overall run time complexity should be "}, {"code": true, "text": "O(log (m+n))", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": ".", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}]}, {"id": "uQG7sjtopB", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "Xj9vKmc9lt", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "SQG04hhyLS", "type": "code_block", "children": [{"id": "JWFhC5R_Fk", "type": "code_line", "children": [{"text": "Input: nums1 = [1,3], nums2 = [2]"}]}, {"id": "VYoTz2quh4", "type": "code_line", "children": [{"text": "Output: 2.00000"}]}, {"id": "KwbhdgUoXH", "type": "code_line", "children": [{"text": "Explanation: merged array = [1,2,3] and median is 2."}]}]}, {"id": "HpCwojzRhu", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "OpX1St--TU", "type": "code_block", "children": [{"id": "7SEute_zbX", "type": "code_line", "children": [{"text": "Input: nums1 = [1,2], nums2 = [3,4]"}]}, {"id": "hU1_Ag1yvX", "type": "code_line", "children": [{"text": "Output: 2.50000"}]}, {"id": "4qL3Pcmz7v", "type": "code_line", "children": [{"text": "Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."}]}]}, {"id": "A26ojuUw19", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "0yCJ-QnQE2", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "PqbXFoNlWD", "type": "p", "indent": 0, "children": [{"code": true, "text": "nums1.length == m", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "3oDhgmEwNc", "type": "p", "indent": 0, "children": [{"code": true, "text": "nums2.length == n", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "jV8yUJTFXS", "type": "p", "indent": 0, "children": [{"code": true, "text": "0 <= m <= 1000", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "RLrZ7Y72O0", "type": "p", "indent": 0, "children": [{"code": true, "text": "0 <= n <= 1000", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "4CVDSQYowS", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= m + n <= 2000", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "0tAj86HeiL", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}, {"code": true, "text": "6", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "superscript": true, "backgroundColor": "rgb(15, 15, 15)"}, {"code": true, "text": " <= nums1[i], nums2[i] <= 10", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}, {"code": true, "text": "6", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "superscript": true, "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}]	hard	["Array", "Binary Search", "Divide and Conquer"]	{"C": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\\n    // Ensure nums1 is the smaller array\\n    if (nums1Size > nums2Size) {\\n        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\\n    }\\n    \\n    int x = nums1Size;\\n    int y = nums2Size;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? -1000000000 : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? -1000000000 : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? 1000000000 : nums1[partitionX];\\n        int minY = (partitionY == y) ? 1000000000 : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                double max_of_left = maxX > maxY ? maxX : maxY;\\n                double min_of_right = minX < minY ? minX : minY;\\n                return (max_of_left + min_of_right) / 2.0;\\n            } else {\\n                double max_of_left = maxX > maxY ? maxX : maxY;\\n                return max_of_left;\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "GO": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\\n    if len(nums1) > len(nums2) {\\n        nums1, nums2 = nums2, nums1\\n    }\\n    \\n    x, y := len(nums1), len(nums2)\\n    low, high := 0, x\\n    \\n    for low <= high {\\n        partitionX := (low + high) / 2\\n        partitionY := (x + y + 1) / 2 - partitionX\\n        \\n        var maxX, maxY int\\n        if partitionX == 0 {\\n            maxX = -1000000 // Representing negative infinity\\n        } else {\\n            maxX = nums1[partitionX-1]\\n        }\\n        \\n        if partitionY == 0 {\\n            maxY = -1000000 // Representing negative infinity\\n        } else {\\n            maxY = nums2[partitionY-1]\\n        }\\n        \\n        var minX, minY int\\n        if partitionX == x {\\n            minX = 1000000 // Representing positive infinity\\n        } else {\\n            minX = nums1[partitionX]\\n        }\\n        \\n        if partitionY == y {\\n            minY = 1000000 // Representing positive infinity\\n        } else {\\n            minY = nums2[partitionY]\\n        }\\n        \\n        if maxX <= minY && maxY <= minX {\\n            if (x+y)%2 == 0 {\\n                return float64(max(maxX, maxY) + min(minX, minY)) / 2.0\\n            } else {\\n                return float64(max(maxX, maxY))\\n            }\\n        } else if maxX > minY {\\n            high = partitionX - 1\\n        } else {\\n            low = partitionX + 1\\n        }\\n    }\\n    \\n    return 0.0\\n}\\n\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    return b\\n}\\n\\nfunc min(a, b int) int {\\n    if a < b {\\n        return a\\n    }\\n    return b\\n}", "CPP": "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\\n    if (nums1.size() > nums2.size()) {\\n        swap(nums1, nums2);\\n    }\\n    \\n    int x = nums1.size();\\n    int y = nums2.size();\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];\\n        int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (max(maxX, maxY) + min(minX, minY)) / 2.0;\\n            } else {\\n                return max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "JAVA": "double findMedianSortedArrays(int[] nums1, int[] nums2) {\\n    if (nums1.length > nums2.length) {\\n        int[] temp = nums1;\\n        nums1 = nums2;\\n        nums2 = temp;\\n    }\\n    \\n    int x = nums1.length;\\n    int y = nums2.length;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\\n        int minY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (Math.max(maxX, maxY) + Math.min(minX, minY)) / 2.0;\\n            } else {\\n                return Math.max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "RUBY": "def find_median_sorted_arrays(nums1, nums2)\\n  # Write your solution here\\n  0\\nend", "RUST": "fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\\n    let (nums1, nums2) = if nums1.len() > nums2.len() {\\n        (nums2, nums1)\\n    } else {\\n        (nums1, nums2)\\n    };\\n    \\n    let x = nums1.len();\\n    let y = nums2.len();\\n    let mut low = 0;\\n    let mut high = x;\\n    \\n    while low <= high {\\n        let partition_x = (low + high) / 2;\\n        let partition_y = (x + y + 1) / 2 - partition_x;\\n        \\n        let max_x = if partition_x == 0 { std::i32::MIN } else { nums1[partition_x - 1] };\\n        let max_y = if partition_y == 0 { std::i32::MIN } else { nums2[partition_y - 1] };\\n        \\n        let min_x = if partition_x == x { std::i32::MAX } else { nums1[partition_x] };\\n        let min_y = if partition_y == y { std::i32::MAX } else { nums2[partition_y] };\\n        \\n        if max_x <= min_y && max_y <= min_x {\\n            if (x + y) % 2 == 0 {\\n                return (cmp::max(max_x, max_y) as f64 + cmp::min(min_x, min_y) as f64) / 2.0;\\n            } else {\\n                return cmp::max(max_x, max_y) as f64;\\n            }\\n        } else if max_x > min_y {\\n            high = partition_x - 1;\\n        } else {\\n            low = partition_x + 1;\\n        }\\n    }\\n    \\n    0.0\\n}", "CSHARP": "public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\\n    if (nums1.Length > nums2.Length) {\\n        int[] temp = nums1;\\n        nums1 = nums2;\\n        nums2 = temp;\\n    }\\n    \\n    int x = nums1.Length;\\n    int y = nums2.Length;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? int.MinValue : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? int.MinValue : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? int.MaxValue : nums1[partitionX];\\n        int minY = (partitionY == y) ? int.MaxValue : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (Math.Max(maxX, maxY) + Math.Min(minX, minY)) / 2.0;\\n            } else {\\n                return Math.Max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "PYTHON": "def find_median_sorted_arrays(nums1, nums2):\\n    if len(nums1) > len(nums2):\\n        nums1, nums2 = nums2, nums1\\n    \\n    x, y = len(nums1), len(nums2)\\n    low, high = 0, x\\n    \\n    while low <= high:\\n        partition_x = (low + high) // 2\\n        partition_y = (x + y + 1) // 2 - partition_x\\n        \\n        max_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]\\n        max_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]\\n        \\n        min_x = float('inf') if partition_x == x else nums1[partition_x]\\n        min_y = float('inf') if partition_y == y else nums2[partition_y]\\n        \\n        if max_x <= min_y and max_y <= min_x:\\n            if (x + y) % 2 == 0:\\n                return (max(max_x, max_y) + min(min_x, min_y)) / 2\\n            else:\\n                return max(max_x, max_y)\\n        elif max_x > min_y:\\n            high = partition_x - 1\\n        else:\\n            low = partition_x + 1\\n    \\n    return 0", "JAVASCRIPT": "/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nfunction findMedianSortedArrays(nums1, nums2) {\\n    if (nums1.length > nums2.length) {\\n        [nums1, nums2] = [nums2, nums1];\\n    }\\n    \\n    const x = nums1.length;\\n    const y = nums2.length;\\n    let low = 0;\\n    let high = x;\\n    \\n    while (low <= high) {\\n        const partitionX = Math.floor((low + high) / 2);\\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\\n        \\n        const maxX = partitionX === 0 ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\\n        const maxY = partitionY === 0 ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\\n        \\n        const minX = partitionX === x ? Number.POSITIVE_INFINITY : nums1[partitionX];\\n        const minY = partitionY === y ? Number.POSITIVE_INFINITY : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            const lowMax = Math.max(maxX, maxY);\\n            if ((x + y) % 2 === 1) {\\n                return lowMax;\\n            }\\n            return (lowMax + Math.min(minX, minY)) / 2;\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0;\\n}", "TYPESCRIPT": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\\n    // Write your solution here\\n    return 0;\\n}function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\\n    if (nums1.length > nums2.length) {\\n        [nums1, nums2] = [nums2, nums1];\\n    }\\n    \\n    const x = nums1.length;\\n    const y = nums2.length;\\n    let low = 0;\\n    let high = x;\\n    \\n    while (low <= high) {\\n        const partitionX = Math.floor((low + high) / 2);\\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\\n        \\n        const maxX = partitionX === 0 ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\\n        const maxY = partitionY === 0 ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\\n        \\n        const minX = partitionX === x ? Number.POSITIVE_INFINITY : nums1[partitionX];\\n        const minY = partitionY === y ? Number.POSITIVE_INFINITY : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            const lowMax = Math.max(maxX, maxY);\\n            if ((x + y) % 2 === 1) {\\n                return lowMax;\\n            }\\n            return (lowMax + Math.min(minX, minY)) / 2;\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0;\\n}"}	{"C": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\\n    // Ensure nums1 is the smaller array\\n    if (nums1Size > nums2Size) {\\n        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\\n    }\\n    \\n    int x = nums1Size;\\n    int y = nums2Size;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? -1000000000 : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? -1000000000 : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? 1000000000 : nums1[partitionX];\\n        int minY = (partitionY == y) ? 1000000000 : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                double max_of_left = maxX > maxY ? maxX : maxY;\\n                double min_of_right = minX < minY ? minX : minY;\\n                return (max_of_left + min_of_right) / 2.0;\\n            } else {\\n                double max_of_left = maxX > maxY ? maxX : maxY;\\n                return max_of_left;\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "GO": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\\n    if len(nums1) > len(nums2) {\\n        nums1, nums2 = nums2, nums1\\n    }\\n    \\n    x, y := len(nums1), len(nums2)\\n    low, high := 0, x\\n    \\n    for low <= high {\\n        partitionX := (low + high) / 2\\n        partitionY := (x + y + 1) / 2 - partitionX\\n        \\n        var maxX, maxY int\\n        if partitionX == 0 {\\n            maxX = -1000000 // Representing negative infinity\\n        } else {\\n            maxX = nums1[partitionX-1]\\n        }\\n        \\n        if partitionY == 0 {\\n            maxY = -1000000 // Representing negative infinity\\n        } else {\\n            maxY = nums2[partitionY-1]\\n        }\\n        \\n        var minX, minY int\\n        if partitionX == x {\\n            minX = 1000000 // Representing positive infinity\\n        } else {\\n            minX = nums1[partitionX]\\n        }\\n        \\n        if partitionY == y {\\n            minY = 1000000 // Representing positive infinity\\n        } else {\\n            minY = nums2[partitionY]\\n        }\\n        \\n        if maxX <= minY && maxY <= minX {\\n            if (x+y)%2 == 0 {\\n                return float64(max(maxX, maxY) + min(minX, minY)) / 2.0\\n            } else {\\n                return float64(max(maxX, maxY))\\n            }\\n        } else if maxX > minY {\\n            high = partitionX - 1\\n        } else {\\n            low = partitionX + 1\\n        }\\n    }\\n    \\n    return 0.0\\n}\\n\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    return b\\n}\\n\\nfunc min(a, b int) int {\\n    if a < b {\\n        return a\\n    }\\n    return b\\n}", "CPP": "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\\n    if (nums1.size() > nums2.size()) {\\n        swap(nums1, nums2);\\n    }\\n    \\n    int x = nums1.size();\\n    int y = nums2.size();\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];\\n        int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (max(maxX, maxY) + min(minX, minY)) / 2.0;\\n            } else {\\n                return max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "JAVA": "double findMedianSortedArrays(int[] nums1, int[] nums2) {\\n    if (nums1.length > nums2.length) {\\n        int[] temp = nums1;\\n        nums1 = nums2;\\n        nums2 = temp;\\n    }\\n    \\n    int x = nums1.length;\\n    int y = nums2.length;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\\n        int minY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (Math.max(maxX, maxY) + Math.min(minX, minY)) / 2.0;\\n            } else {\\n                return Math.max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "RUBY": "def find_median_sorted_arrays(nums1, nums2)\\n  # Ensure nums1 is the smaller array\\n  nums1, nums2 = nums2, nums1 if nums1.length > nums2.length\\n  \\n  x, y = nums1.length, nums2.length\\n  low, high = 0, x\\n  \\n  while low <= high\\n    partition_x = (low + high) / 2\\n    partition_y = (x + y + 1) / 2 - partition_x\\n    \\n    max_x = partition_x == 0 ? -Float::INFINITY : nums1[partition_x - 1]\\n    max_y = partition_y == 0 ? -Float::INFINITY : nums2[partition_y - 1]\\n    \\n    min_x = partition_x == x ? Float::INFINITY : nums1[partition_x]\\n    min_y = partition_y == y ? Float::INFINITY : nums2[partition_y]\\n    \\n    if max_x <= min_y && max_y <= min_x\\n      if (x + y) % 2 == 0\\n        return ([max_x, max_y].max + [min_x, min_y].min) / 2.0\\n      else\\n        return [max_x, max_y].max\\n      end\\n    elsif max_x > min_y\\n      high = partition_x - 1\\n    else\\n      low = partition_x + 1\\n    end\\n  end\\n  \\n  0.0\\nend", "RUST": "fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\\n    let (nums1, nums2) = if nums1.len() > nums2.len() {\\n        (nums2, nums1)\\n    } else {\\n        (nums1, nums2)\\n    };\\n    \\n    let x = nums1.len();\\n    let y = nums2.len();\\n    let mut low = 0;\\n    let mut high = x;\\n    \\n    while low <= high {\\n        let partition_x = (low + high) / 2;\\n        let partition_y = (x + y + 1) / 2 - partition_x;\\n        \\n        let max_x = if partition_x == 0 { std::i32::MIN } else { nums1[partition_x - 1] };\\n        let max_y = if partition_y == 0 { std::i32::MIN } else { nums2[partition_y - 1] };\\n        \\n        let min_x = if partition_x == x { std::i32::MAX } else { nums1[partition_x] };\\n        let min_y = if partition_y == y { std::i32::MAX } else { nums2[partition_y] };\\n        \\n        if max_x <= min_y && max_y <= min_x {\\n            if (x + y) % 2 == 0 {\\n                return (cmp::max(max_x, max_y) as f64 + cmp::min(min_x, min_y) as f64) / 2.0;\\n            } else {\\n                return cmp::max(max_x, max_y) as f64;\\n            }\\n        } else if max_x > min_y {\\n            high = partition_x - 1;\\n        } else {\\n            low = partition_x + 1;\\n        }\\n    }\\n    \\n    0.0\\n}", "CSHARP": "public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\\n    if (nums1.Length > nums2.Length) {\\n        int[] temp = nums1;\\n        nums1 = nums2;\\n        nums2 = temp;\\n    }\\n    \\n    int x = nums1.Length;\\n    int y = nums2.Length;\\n    int low = 0;\\n    int high = x;\\n    \\n    while (low <= high) {\\n        int partitionX = (low + high) / 2;\\n        int partitionY = (x + y + 1) / 2 - partitionX;\\n        \\n        int maxX = (partitionX == 0) ? int.MinValue : nums1[partitionX - 1];\\n        int maxY = (partitionY == 0) ? int.MinValue : nums2[partitionY - 1];\\n        \\n        int minX = (partitionX == x) ? int.MaxValue : nums1[partitionX];\\n        int minY = (partitionY == y) ? int.MaxValue : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            if ((x + y) % 2 == 0) {\\n                return (Math.Max(maxX, maxY) + Math.Min(minX, minY)) / 2.0;\\n            } else {\\n                return Math.Max(maxX, maxY);\\n            }\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0.0;\\n}", "PYTHON": "def find_median_sorted_arrays(nums1, nums2):\\n    if len(nums1) > len(nums2):\\n        nums1, nums2 = nums2, nums1\\n    \\n    x, y = len(nums1), len(nums2)\\n    low, high = 0, x\\n    \\n    while low <= high:\\n        partition_x = (low + high) // 2\\n        partition_y = (x + y + 1) // 2 - partition_x\\n        \\n        max_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]\\n        max_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]\\n        \\n        min_x = float('inf') if partition_x == x else nums1[partition_x]\\n        min_y = float('inf') if partition_y == y else nums2[partition_y]\\n        \\n        if max_x <= min_y and max_y <= min_x:\\n            if (x + y) % 2 == 0:\\n                return (max(max_x, max_y) + min(min_x, min_y)) / 2\\n            else:\\n                return max(max_x, max_y)\\n        elif max_x > min_y:\\n            high = partition_x - 1\\n        else:\\n            low = partition_x + 1\\n    \\n    return 0", "JAVASCRIPT": "function findMedianSortedArrays(nums1, nums2) {\\n    if (nums1.length > nums2.length) {\\n        [nums1, nums2] = [nums2, nums1];\\n    }\\n    \\n    const x = nums1.length;\\n    const y = nums2.length;\\n    let low = 0;\\n    let high = x;\\n    \\n    while (low <= high) {\\n        const partitionX = Math.floor((low + high) / 2);\\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\\n        \\n        const maxX = partitionX === 0 ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\\n        const maxY = partitionY === 0 ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\\n        \\n        const minX = partitionX === x ? Number.POSITIVE_INFINITY : nums1[partitionX];\\n        const minY = partitionY === y ? Number.POSITIVE_INFINITY : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            const lowMax = Math.max(maxX, maxY);\\n            if ((x + y) % 2 === 1) {\\n                return lowMax;\\n            }\\n            return (lowMax + Math.min(minX, minY)) / 2;\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0;\\n}", "TYPESCRIPT": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\\n    if (nums1.length > nums2.length) {\\n        [nums1, nums2] = [nums2, nums1];\\n    }\\n    \\n    const x = nums1.length;\\n    const y = nums2.length;\\n    let low = 0;\\n    let high = x;\\n    \\n    while (low <= high) {\\n        const partitionX = Math.floor((low + high) / 2);\\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\\n        \\n        const maxX = partitionX === 0 ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\\n        const maxY = partitionY === 0 ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\\n        \\n        const minX = partitionX === x ? Number.POSITIVE_INFINITY : nums1[partitionX];\\n        const minY = partitionY === y ? Number.POSITIVE_INFINITY : nums2[partitionY];\\n        \\n        if (maxX <= minY && maxY <= minX) {\\n            const lowMax = Math.max(maxX, maxY);\\n            if ((x + y) % 2 === 1) {\\n                return lowMax;\\n            }\\n            return (lowMax + Math.min(minX, minY)) / 2;\\n        } else if (maxX > minY) {\\n            high = partitionX - 1;\\n        } else {\\n            low = partitionX + 1;\\n        }\\n    }\\n    \\n    return 0;\\n}"}	[{"input": "[1,3],[2]", "output": "2.00000"}, {"input": "[1,2],[3,4]", "output": "2.50000"}, {"input": "[0,0],[0,0]", "output": "0.00000"}]	["Think about how to find the median in a single sorted array", "The key insight is to find the right partition point in both arrays", "Use binary search on the smaller array to find the partition point"]	2025-07-18 21:57:57	2025-07-28 13:32:49.558	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "6ZRSlixM00", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "_zC84lblI-", "url": "https://www.youtube.com/watch?v=F9c7LpRZWVQ", "type": "video", "children": [{"text": ""}]}, {"id": "niIohJ31p-", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Hard\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(log(min(m, n)))"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "POA5ZtKku4", "type": "hr", "children": [{"text": ""}]}, {"id": "rF2qzxZZz0", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "8Nfm3kN-cp", "type": "p", "children": [{"text": "You're given two "}, {"bold": true, "text": "sorted arrays"}, {"text": " "}, {"code": true, "text": "nums1"}, {"text": " and "}, {"code": true, "text": "nums2"}, {"text": ", of size "}, {"code": true, "text": "m"}, {"text": " and "}, {"code": true, "text": "n"}, {"text": " respectively.\\n You must "}, {"bold": true, "text": "find the median"}, {"text": " of the two arrays as if they were merged and sorted, "}, {"bold": true, "text": "without actually merging them"}, {"text": "."}]}, {"id": "x7n4XLUfgO", "type": "hr", "children": [{"text": ""}]}, {"id": "8sjNbsCqKt", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "Ood4AH_GAh", "type": "p", "indent": 0, "children": [{"text": "You "}, {"bold": true, "text": "cannot"}, {"text": " use simple merge and sort ("}, {"code": true, "text": "O(m+n)"}, {"text": "). "}], "listStyleType": ""}, {"id": "qdBXhG2vZN", "type": "p", "indent": 0, "children": [{"text": "You must achieve "}, {"bold": true, "text": "O(log(min(m, n)))"}, {"text": " time complexity. "}], "listStyleType": ""}, {"id": "B_VARvffbE", "type": "p", "indent": 0, "children": [{"text": "Input size is up to 2000 elements. "}], "listStyleType": ""}, {"id": "XFWfNGhqeC", "type": "p", "indent": 0, "children": [{"text": "Values can be negative, positive, or zero. "}], "listStyleType": ""}, {"id": "k7P3c2m4gd", "type": "hr", "children": [{"text": ""}]}, {"id": "rWFZBPyh_h", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "2ce6VZF2S2", "type": "p", "children": [{"text": "Think of the "}, {"bold": true, "text": "median"}, {"text": " as the element that "}, {"bold": true, "text": "divides"}, {"text": " a sorted array into two equal halves."}]}, {"id": "eoXKo6dW2r", "type": "p", "children": [{"text": "If total length is odd:"}]}, {"id": "gX-I9g2yqy", "type": "blockquote", "children": [{"id": "paRnqd1OKt", "type": "p", "children": [{"text": "Median = middle element"}]}]}, {"id": "kw0hb2SeNF", "type": "p", "children": [{"text": "If even:"}]}, {"id": "Yz0hojRaw5", "type": "blockquote", "children": [{"id": "komiD6ixQO", "type": "p", "children": [{"text": "Median = average of two middle elements"}]}]}, {"id": "647MZtSWpB", "type": "hr", "children": [{"text": ""}]}, {"id": "YLTaj7LrBC", "type": "h2", "children": [{"text": "‚úÖ Binary Search Approach (Optimal)"}]}, {"id": "lKnyrrLOzY", "type": "p", "children": [{"text": "We use binary search on the "}, {"bold": true, "text": "shorter array"}, {"text": " to find a partition such that:"}]}, {"id": "CmexQBrlHa", "type": "p", "indent": 0, "children": [{"text": "Every element on the left side of the partition is less than or equal to every element on the right side. "}], "listStyleType": ""}, {"id": "xXInjrnKol", "type": "p", "indent": 0, "children": [{"text": "The left and right sides combined from both arrays are equal in size (or differ by one if total length is odd). "}], "listStyleType": ""}, {"id": "GRk6LK_NGb", "type": "hr", "children": [{"text": ""}]}, {"id": "yG12IEI2V0", "type": "h3", "children": [{"text": "‚ú® Step-by-step Algorithm"}]}, {"id": "YXqDtfmULw", "type": "p", "indent": 0, "children": [{"bold": true, "text": "Always binary search the shorter array"}, {"text": " to reduce complexity. "}], "listStyleType": ""}, {"id": "SRwF_q522e", "type": "p", "indent": 0, "children": [{"text": "Let "}, {"code": true, "text": "i"}, {"text": " be the partition index in "}, {"code": true, "text": "nums1"}, {"text": ", and "}, {"code": true, "text": "j = (m + n + 1) / 2 - i"}, {"text": " in "}, {"code": true, "text": "nums2"}, {"text": ". "}], "listStyleType": ""}, {"id": "QQ87tnT4IB", "type": "p", "indent": 0, "children": [{"text": "Check if: CopyEdit"}, {"code": true, "text": "nums1[i - 1] <= nums2[j] AND nums2[j - 1] <= nums1[i] "}, {"text": "If true, we‚Äôve found the correct partition. "}], "listStyleType": ""}, {"id": "4NWaquKa-S", "type": "p", "indent": 0, "children": [{"text": "Compute median: "}], "listStyleType": ""}, {"id": "cMnA5ElmD6", "type": "p", "indent": 0, "children": [{"id": "-o1-JCnBEp", "type": "p", "children": [{"text": "If total length is "}, {"bold": true, "text": "odd"}, {"text": ", median = "}, {"code": true, "text": "max(nums1[i-1], nums2[j-1])"}]}], "listStyleType": ""}, {"id": "hq1adCHtAV", "type": "p", "indent": 0, "children": [{"id": "cFUOgHtYkn", "type": "p", "children": [{"text": "If total length is "}, {"bold": true, "text": "even"}, {"text": ", median = "}, {"code": true, "text": "(maxLeft + minRight) / 2"}]}], "listStyleType": ""}, {"id": "N1gSfu7dKY", "type": "p", "indent": 0, "children": [{"text": "If not true, adjust binary search: "}], "listStyleType": ""}, {"id": "_BK8DcgLda", "type": "p", "indent": 0, "children": [{"id": "IEaZhmoEmV", "type": "p", "children": [{"text": "If "}, {"code": true, "text": "nums1[i - 1] > nums2[j]"}, {"text": ", move "}, {"code": true, "text": "high = i - 1"}]}], "listStyleType": ""}, {"id": "gFNIGZIDHI", "type": "p", "indent": 0, "children": [{"id": "MOVOvh5Vck", "type": "p", "children": [{"text": "Else, move "}, {"code": true, "text": "low = i + 1"}]}], "listStyleType": ""}, {"id": "gGxWmj5nDy", "type": "hr", "children": [{"text": ""}]}, {"id": "7DoSvakpBy", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "EzHFWPpum4", "type": "code_block", "children": [{"id": "IMM-5BUuLW", "type": "code_line", "children": [{"text": "pythonCopyEditdef findMedianSortedArrays(nums1, nums2):"}]}, {"id": "rqQTaYvX_V", "type": "code_line", "children": [{"text": "    if len(nums1) > len(nums2):"}]}, {"id": "Ol6xqzjGH2", "type": "code_line", "children": [{"text": "        nums1, nums2 = nums2, nums1  # Always binary search the smaller array"}]}, {"id": "p5v-YMkLbL", "type": "code_line", "children": [{"text": ""}]}, {"id": "ZKCYYCDvA5", "type": "code_line", "children": [{"text": "    m, n = len(nums1), len(nums2)"}]}, {"id": "_dtkXqoPpj", "type": "code_line", "children": [{"text": "    low, high = 0, m"}]}, {"id": "Z5gBXAFfDe", "type": "code_line", "children": [{"text": ""}]}, {"id": "_P6DD671PT", "type": "code_line", "children": [{"text": "    while low <= high:"}]}, {"id": "XY14-smmBt", "type": "code_line", "children": [{"text": "        i = (low + high) // 2"}]}, {"id": "7QXIBXh0ye", "type": "code_line", "children": [{"text": "        j = (m + n + 1) // 2 - i"}]}, {"id": "1mbh7kT6Lz", "type": "code_line", "children": [{"text": ""}]}, {"id": "9qu6sRyCvE", "type": "code_line", "children": [{"text": "        left1 = float('-inf') if i == 0 else nums1[i - 1]"}]}, {"id": "cjpemSo9zp", "type": "code_line", "children": [{"text": "        right1 = float('inf') if i == m else nums1[i]"}]}, {"id": "MNTIGUC07n", "type": "code_line", "children": [{"text": "        left2 = float('-inf') if j == 0 else nums2[j - 1]"}]}, {"id": "d35_XAA3Kp", "type": "code_line", "children": [{"text": "        right2 = float('inf') if j == n else nums2[j]"}]}, {"id": "MH6utSkaWZ", "type": "code_line", "children": [{"text": ""}]}, {"id": "3xQo2YApkg", "type": "code_line", "children": [{"text": "        if left1 <= right2 and left2 <= right1:"}]}, {"id": "Xxcl2a525g", "type": "code_line", "children": [{"text": "            if (m + n) % 2 == 0:"}]}, {"id": "xOgmTh9JhI", "type": "code_line", "children": [{"text": "                return (max(left1, left2) + min(right1, right2)) / 2"}]}, {"id": "y-OHase1Id", "type": "code_line", "children": [{"text": "            else:"}]}, {"id": "cmEB_b6Ylj", "type": "code_line", "children": [{"text": "                return max(left1, left2)"}]}, {"id": "ChFBWl8dy9", "type": "code_line", "children": [{"text": "        elif left1 > right2:"}]}, {"id": "5rTZBljUwy", "type": "code_line", "children": [{"text": "            high = i - 1"}]}, {"id": "hGUAGNM5QO", "type": "code_line", "children": [{"text": "        else:"}]}, {"id": "HzoxT5eaQX", "type": "code_line", "children": [{"text": "            low = i + 1"}]}]}, {"id": "hbNrLsFrgm", "type": "hr", "children": [{"text": ""}]}, {"id": "i2Umc1fjWM", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "3E9k9t2nEo", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "6_918WeNtK", "type": "code_block", "children": [{"id": "zzYQfGZByG", "type": "code_line", "children": [{"text": "makefileCopyEditnums1 = [1, 3], nums2 = [2]"}]}, {"id": "tRtPH-fM2_", "type": "code_line", "children": [{"text": "Merged: [1, 2, 3]"}]}, {"id": "JLTnwsgsQn", "type": "code_line", "children": [{"text": "Median = 2.0"}]}]}, {"id": "JFkAlVI2Ds", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "Iu9jzI-Y0V", "type": "code_block", "children": [{"id": "5XlYl9QzGE", "type": "code_line", "children": [{"text": "makefileCopyEditnums1 = [1, 2], nums2 = [3, 4]"}]}, {"id": "tLI3Z8eFL8", "type": "code_line", "children": [{"text": "Merged: [1, 2, 3, 4]"}]}, {"id": "Vo26VxKv8D", "type": "code_line", "children": [{"text": "Median = (2 + 3) / 2 = 2.5"}]}]}, {"id": "LsP4zBUA1q", "type": "hr", "children": [{"text": ""}]}, {"id": "Fxa6pfQZyj", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "wtc5XlU5jt", "type": "p", "indent": 0, "children": [{"text": "One array is empty "}], "listStyleType": ""}, {"id": "VgN0ww3Ttg", "type": "p", "indent": 0, "children": [{"text": "Arrays have very different sizes "}], "listStyleType": ""}, {"id": "2y4b6wTjnS", "type": "p", "indent": 0, "children": [{"text": "Duplicate values "}], "listStyleType": ""}, {"id": "xfOMCPDIvF", "type": "p", "indent": 0, "children": [{"text": "Negative numbers "}], "listStyleType": ""}, {"id": "goU2LmIeqT", "type": "hr", "children": [{"text": ""}]}, {"id": "HHkdd9X9bu", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "qS9wbxDjbO", "type": "table", "children": [{"id": "jhcsqf4G3N", "type": "tr", "children": [{"id": "ftjPqdV7DK", "type": "th", "children": [{"id": "bleMuiCjwQ", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "rrtzw8eF5P", "type": "th", "children": [{"id": "j5zX-9IU2V", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "J9FARYi0r4", "type": "tr", "children": [{"id": "xkeIWBSorx", "type": "td", "children": [{"id": "CIzBMpcDCH", "type": "p", "children": [{"text": "Binary Search"}]}]}, {"id": "eNYxV4G6Bx", "type": "td", "children": [{"id": "UBSylNgpPP", "type": "p", "children": [{"text": "On smaller array"}]}]}]}, {"id": "m9SptDHAJH", "type": "tr", "children": [{"id": "XurCuROCbM", "type": "td", "children": [{"id": "q0Yyi5MilM", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "KzpfJrAPZW", "type": "td", "children": [{"id": "7sZhTmUptB", "type": "p", "children": [{"code": true, "text": "O(log(min(m, n)))"}]}]}]}, {"id": "WKQM6LY77M", "type": "tr", "children": [{"id": "24l-cYL5dc", "type": "td", "children": [{"id": "RIl96Su6Tw", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "K7AtxTZaOp", "type": "td", "children": [{"id": "0OxJUay1Rq", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "VSVPWH4r3m", "type": "tr", "children": [{"id": "DDOLSZOl9J", "type": "td", "children": [{"id": "Uhs71jduRg", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "p_2ZRCbd3Z", "type": "td", "children": [{"id": "ssfHV0Jiyw", "type": "p", "children": [{"text": "Partitioning instead of merging"}]}]}]}]}, {"id": "RAheaA01BL", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"fmt\\"\\n    \\"strings\\"\\n    \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <sstream>\\n#include <iomanip>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUST": "use std::io;\\nuse std::cmp;", "CSHARP": "using System;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "TYPESCRIPT": "// TypeScript declarations\\ndeclare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char input[10000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    // Find the separator between arrays\\n    char* separator = strstr(input, \\"],[\\");\\n    if (!separator) {\\n        printf(\\"Invalid input format\\\\n\\");\\n        return 1;\\n    }\\n    \\n    *separator = '\\\\0';\\n    \\n    // Parse nums1\\n    char* nums1Str = input + 1; // Skip the '['\\n    int nums1[1000];\\n    int nums1Size = 0;\\n    \\n    if (strlen(nums1Str) > 0) {\\n        char* token = strtok(nums1Str, \\",\\");\\n        while (token != NULL) {\\n            nums1[nums1Size++] = atoi(token);\\n            token = strtok(NULL, \\",\\");\\n        }\\n    }\\n    \\n    // Parse nums2\\n    char* nums2Str = separator + 3; // Skip the '],['\\n    int len = strlen(nums2Str);\\n    if (len > 0 && nums2Str[len-1] == '\\\\n') {\\n        nums2Str[len-1] = '\\\\0'; // Remove newline\\n    }\\n    if (len > 0 && nums2Str[len-2] == ']') {\\n        nums2Str[len-2] = '\\\\0'; // Remove the ']'\\n    }\\n    \\n    int nums2[1000];\\n    int nums2Size = 0;\\n    \\n    if (strlen(nums2Str) > 0) {\\n        char* token = strtok(nums2Str, \\",\\");\\n        while (token != NULL) {\\n            nums2[nums2Size++] = atoi(token);\\n            token = strtok(NULL, \\",\\");\\n        }\\n    }\\n    \\n    double result = findMedianSortedArrays(nums1, nums1Size, nums2, nums2Size);\\n    printf(\\"%.5f\\\\n\\", result);\\n    return 0;\\n}", "GO": "func main() {\\n    var input string\\n    fmt.Scanln(&input)\\n    \\n    parts := strings.Split(input, \\"],[\\")\\n    nums1Str := strings.TrimPrefix(parts[0], \\"[\\")\\n    nums2Str := strings.TrimSuffix(parts[1], \\"]\\")\\n    \\n    var nums1, nums2 []int\\n    \\n    if nums1Str != \\"\\" {\\n        for _, s := range strings.Split(nums1Str, \\",\\") {\\n            num, _ := strconv.Atoi(s)\\n            nums1 = append(nums1, num)\\n        }\\n    }\\n    \\n    if nums2Str != \\"\\" {\\n        for _, s := range strings.Split(nums2Str, \\",\\") {\\n            num, _ := strconv.Atoi(s)\\n            nums2 = append(nums2, num)\\n        }\\n    }\\n    \\n    result := findMedianSortedArrays(nums1, nums2)\\n    fmt.Printf(\\"%.5f\\\\n\\", result)\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n    \\n    size_t pos = input.find(\\"],[\\");\\n    string nums1Str = input.substr(1, pos - 1);\\n    string nums2Str = input.substr(pos + 2, input.size() - pos - 3);\\n    \\n    vector<int> nums1, nums2;\\n    stringstream ss1(nums1Str), ss2(nums2Str);\\n    string token;\\n    \\n    while (getline(ss1, token, ',')) {\\n        if (!token.empty()) {\\n            nums1.push_back(stoi(token));\\n        }\\n    }\\n    \\n    while (getline(ss2, token, ',')) {\\n        if (!token.empty()) {\\n            nums2.push_back(stoi(token));\\n        }\\n    }\\n    \\n    double result = findMedianSortedArrays(nums1, nums2);\\n    cout << fixed << setprecision(5) << result << endl;\\n    return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        \\n        String[] parts = input.split(\\"\\\\\\\\],\\\\\\\\[\\");\\n        String nums1Str = parts[0].replace(\\"[\\", \\"\\");\\n        String nums2Str = parts[1].replace(\\"]\\", \\"\\");\\n        \\n        int[] nums1 = nums1Str.isEmpty() ? new int[0] : \\n                     Arrays.stream(nums1Str.split(\\",\\"))\\n                           .mapToInt(Integer::parseInt)\\n                           .toArray();\\n        \\n        int[] nums2 = nums2Str.isEmpty() ? new int[0] : \\n                     Arrays.stream(nums2Str.split(\\",\\"))\\n                           .mapToInt(Integer::parseInt)\\n                           .toArray();\\n        \\n        Solution sol = new Solution();\\n        double result = sol.findMedianSortedArrays(nums1, nums2);\\n        System.out.printf(\\"%.5f%n\\", result);\\n    }\\n}", "RUBY": "# Parse input and test the function\\ninput = gets.strip\\nparts = input.split('],[')\\nnums1_str = parts[0].sub('[', '')\\nnums2_str = parts[1].sub(']', '')\\n\\nnums1 = nums1_str.empty? ? [] : nums1_str.split(',').map(&:to_i)\\nnums2 = nums2_str.empty? ? [] : nums2_str.split(',').map(&:to_i)\\n\\nresult = find_median_sorted_arrays(nums1, nums2)\\nputs sprintf(\\"%.5f\\", result)", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    let input = input.trim();\\n    let parts: Vec<&str> = input.split(\\"],[\\").collect();\\n    let nums1_str = parts[0].trim_start_matches('[');\\n    let nums2_str = parts[1].trim_end_matches(']');\\n    \\n    let nums1: Vec<i32> = if nums1_str.is_empty() {\\n        Vec::new()\\n    } else {\\n        nums1_str.split(',').map(|s| s.parse().unwrap()).collect()\\n    };\\n    \\n    let nums2: Vec<i32> = if nums2_str.is_empty() {\\n        Vec::new()\\n    } else {\\n        nums2_str.split(',').map(|s| s.parse().unwrap()).collect()\\n    };\\n    \\n    let result = find_median_sorted_arrays(nums1, nums2);\\n    println!(\\"{:.5}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        string input = Console.ReadLine();\\n        \\n        string[] parts = input.Split(new[] { \\"],[\\" }, StringSplitOptions.None);\\n        string nums1Str = parts[0].Replace(\\"[\\", \\"\\");\\n        string nums2Str = parts[1].Replace(\\"]\\", \\"\\");\\n        \\n        int[] nums1 = nums1Str == \\"\\" ? new int[0] : \\n                     nums1Str.Split(',').Select(int.Parse).ToArray();\\n        \\n        int[] nums2 = nums2Str == \\"\\" ? new int[0] : \\n                     nums2Str.Split(',').Select(int.Parse).ToArray();\\n        \\n        Solution sol = new Solution();\\n        double result = sol.FindMedianSortedArrays(nums1, nums2);\\n        Console.WriteLine(result.ToString(\\"F5\\"));\\n    }\\n}", "PYTHON": "# Parse input and test the function\\ninput_data = sys.stdin.read().strip()\\nparts = input_data.split('],[')\\nnums1_str = parts[0].replace('[', '')\\nnums2_str = parts[1].replace(']', '')\\n\\nnums1 = [int(x) for x in nums1_str.split(',')] if nums1_str else []\\nnums2 = [int(x) for x in nums2_str.split(',')] if nums2_str else []\\n\\nresult = find_median_sorted_arrays(nums1, nums2)\\nprint(f\\"{result:.5f}\\")", "JAVASCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const parts = input.split('],[');\\n    const nums1Str = parts[0].replace('[', '');\\n    const nums2Str = parts[1].replace(']', '');\\n    \\n    const nums1 = nums1Str ? nums1Str.split(',').map(Number) : [];\\n    const nums2 = nums2Str ? nums2Str.split(',').map(Number) : [];\\n    \\n    const result = findMedianSortedArrays(nums1, nums2);\\n    console.log(result.toFixed(5));\\n});", "TYPESCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const parts = input.split('],[');\\n    const nums1Str = parts[0].replace('[', '');\\n    const nums2Str = parts[1].replace(']', '');\\n    \\n    const nums1: number[] = nums1Str ? nums1Str.split(',').map(Number) : [];\\n    const nums2: number[] = nums2Str ? nums2Str.split(',').map(Number) : [];\\n    \\n    const result = findMedianSortedArrays(nums1, nums2);\\n    console.log(result.toFixed(5));\\n});"}	f	t
eb34649d-14b0-416f-8a3f-4702c47c1809	13. Number of Islands	[{"id": "d1", "type": "p", "children": [{"text": "Given an "}, {"code": true, "text": "m x n"}, {"text": " 2D binary grid "}, {"code": true, "text": "grid"}, {"text": " representing a map of '1's (land) and '0's (water), return the number of islands. An island is formed by connecting adjacent lands horizontally or vertically. All four edges of the grid are surrounded by water."}]}, {"id": "d2", "type": "p", "children": [{"bold": true, "text": "Examples:"}]}, {"id": "d3", "type": "code_block", "children": [{"id": "d3-1", "type": "code_line", "children": [{"text": "Input: grid = ["}]}, {"id": "d3-2", "type": "code_line", "children": [{"text": "  [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"],"}]}, {"id": "d3-3", "type": "code_line", "children": [{"text": "  [\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"],"}]}, {"id": "d3-4", "type": "code_line", "children": [{"text": "  [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],"}]}, {"id": "d3-5", "type": "code_line", "children": [{"text": "  [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"]"}]}, {"id": "d3-6", "type": "code_line", "children": [{"text": "]"}]}, {"id": "d3-7", "type": "code_line", "children": [{"text": "Output: 1"}]}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: grid = ["}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "  [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],"}]}, {"id": "d4-3", "type": "code_line", "children": [{"text": "  [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],"}]}, {"id": "d4-4", "type": "code_line", "children": [{"text": "  [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],"}]}, {"id": "d4-5", "type": "code_line", "children": [{"text": "  [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"]"}]}, {"id": "d4-6", "type": "code_line", "children": [{"text": "]"}]}, {"id": "d4-7", "type": "code_line", "children": [{"text": "Output: 3"}]}]}, {"id": "d5", "type": "p", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d6", "type": "p", "indent": 0, "children": [{"code": true, "text": "m == grid.length"}], "listStyleType": ""}, {"id": "d7", "type": "p", "indent": 0, "children": [{"code": true, "text": "n == grid[i].length"}], "listStyleType": ""}, {"id": "d8", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= m, n <= 300"}], "listStyleType": ""}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "grid[i][j] is '0' or '1'"}], "listStyleType": ""}]	medium	["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"]	{"C": "int numIslands(char** grid, int gridSize, int* gridColSize) {\\n    // Write your solution here\\n    return 0;\\n}", "GO": "func numIslands(grid [][]byte) int {\\n    // Write your solution here\\n    return 0\\n}", "CPP": "int numIslands(vector<vector<char>>& grid) {\\n    // Write your solution here\\n    return 0;\\n}", "JAVA": "public int numIslands(char[][] grid) {\\n    // Write your solution here\\n    return 0;\\n}", "RUBY": "def num_islands(grid)\\n  # Write your solution here\\n  0\\nend", "RUST": "fn num_islands(grid: Vec<Vec<char>>) -> i32 {\\n    // Write your solution here\\n    0\\n}", "CSHARP": "public int NumIslands(char[][] grid) {\\n    // Write your solution here\\n    return 0;\\n}", "PYTHON": "def num_islands(grid):\\n    # Write your solution here\\n    return 0", "JAVASCRIPT": "function numIslands(grid) {\\n    // Write your solution here\\n    return 0;\\n}", "TYPESCRIPT": "function numIslands(grid: string[][]): number {\\n    // Write your solution here\\n    return 0;\\n}"}	{"C": "// Forward declaration\\nvoid dfs(char** grid, int gridSize, int* gridColSize, int r, int c);\\n\\nint numIslands(char** grid, int gridSize, int* gridColSize) {\\n    if (gridSize == 0) return 0;\\n    \\n    int count = 0;\\n    \\n    for (int r = 0; r < gridSize; r++) {\\n        for (int c = 0; c < gridColSize[r]; c++) {\\n            if (grid[r][c] == '1') {\\n                count++;\\n                dfs(grid, gridSize, gridColSize, r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}\\n\\nvoid dfs(char** grid, int gridSize, int* gridColSize, int r, int c) {\\n    // Check boundaries and if current cell is land\\n    if (r < 0 || c < 0 || r >= gridSize || c >= gridColSize[r] || grid[r][c] == '0') {\\n        return;\\n    }\\n    \\n    // Mark as visited\\n    grid[r][c] = '0';\\n    \\n    // Explore all 4 directions\\n    dfs(grid, gridSize, gridColSize, r + 1, c);\\n    dfs(grid, gridSize, gridColSize, r - 1, c);\\n    dfs(grid, gridSize, gridColSize, r, c + 1);\\n    dfs(grid, gridSize, gridColSize, r, c - 1);\\n}", "GO": "func numIslands(grid [][]byte) int {\\n    if len(grid) == 0 || len(grid[0]) == 0 {\\n        return 0\\n    }\\n    \\n    rows, cols := len(grid), len(grid[0])\\n    count := 0\\n    \\n    var dfs func(r, c int)\\n    dfs = func(r, c int) {\\n        // Check boundaries and if current cell is land\\n        if r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0' {\\n            return\\n        }\\n        \\n        // Mark as visited\\n        grid[r][c] = '0'\\n        \\n        // Explore all 4 directions\\n        dfs(r+1, c)\\n        dfs(r-1, c)\\n        dfs(r, c+1)\\n        dfs(r, c-1)\\n    }\\n    \\n    for r := 0; r < rows; r++ {\\n        for c := 0; c < cols; c++ {\\n            if grid[r][c] == '1' {\\n                count++\\n                dfs(r, c)\\n            }\\n        }\\n    }\\n    \\n    return count\\n}", "CPP": "void dfs(vector<vector<char>>& grid, int r, int c) {\\n    int rows = grid.size();\\n    int cols = grid[0].size();\\n    \\n    // Check boundaries and if current cell is land\\n    if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0') {\\n        return;\\n    }\\n    \\n    // Mark as visited\\n    grid[r][c] = '0';\\n    \\n    // Explore all 4 directions\\n    dfs(grid, r + 1, c);\\n    dfs(grid, r - 1, c);\\n    dfs(grid, r, c + 1);\\n    dfs(grid, r, c - 1);\\n}\\n\\nint numIslands(vector<vector<char>>& grid) {\\n    if (grid.empty() || grid[0].empty()) {\\n        return 0;\\n    }\\n    \\n    int rows = grid.size();\\n    int cols = grid[0].size();\\n    int count = 0;\\n    \\n    for (int r = 0; r < rows; r++) {\\n        for (int c = 0; c < cols; c++) {\\n            if (grid[r][c] == '1') {\\n                count++;\\n                dfs(grid, r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}", "JAVA": "public int numIslands(char[][] grid) {\\n    if (grid == null || grid.length == 0) {\\n        return 0;\\n    }\\n    \\n    int rows = grid.length;\\n    int cols = grid[0].length;\\n    int count = 0;\\n    \\n    for (int r = 0; r < rows; r++) {\\n        for (int c = 0; c < cols; c++) {\\n            if (grid[r][c] == '1') {\\n                count++;\\n                dfs(grid, r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}\\n\\nprivate void dfs(char[][] grid, int r, int c) {\\n    int rows = grid.length;\\n    int cols = grid[0].length;\\n    \\n    // Check boundaries and if current cell is land\\n    if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0') {\\n        return;\\n    }\\n    \\n    // Mark as visited\\n    grid[r][c] = '0';\\n    \\n    // Explore all 4 directions\\n    dfs(grid, r + 1, c);\\n    dfs(grid, r - 1, c);\\n    dfs(grid, r, c + 1);\\n    dfs(grid, r, c - 1);\\n}", "RUBY": "def num_islands(grid)\\n  return 0 if grid.empty? || grid[0].empty?\\n  \\n  rows, cols = grid.length, grid[0].length\\n  count = 0\\n  \\n  def dfs(grid, r, c)\\n    rows, cols = grid.length, grid[0].length\\n    \\n    # Check boundaries and if current cell is land\\n    return if r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0'\\n    \\n    # Mark as visited\\n    grid[r][c] = '0'\\n    \\n    # Explore all 4 directions\\n    dfs(grid, r + 1, c)\\n    dfs(grid, r - 1, c)\\n    dfs(grid, r, c + 1)\\n    dfs(grid, r, c - 1)\\n  end\\n  \\n  (0...rows).each do |r|\\n    (0...cols).each do |c|\\n      if grid[r][c] == '1'\\n        count += 1\\n        dfs(grid, r, c)\\n      end\\n    end\\n  end\\n  \\n  count\\nend", "RUST": "// Define DFS function outside of num_islands\\nfn dfs(grid: &mut Vec<Vec<char>>, r: usize, c: usize) {\\n    let rows = grid.len();\\n    let cols = grid[0].len();\\n    \\n    // Check if current cell is land\\n    if r >= rows || c >= cols || grid[r][c] == '0' {\\n        return;\\n    }\\n    \\n    // Mark as visited\\n    grid[r][c] = '0';\\n    \\n    // Explore all 4 directions\\n    if r > 0 { dfs(grid, r - 1, c); }\\n    if r + 1 < rows { dfs(grid, r + 1, c); }\\n    if c > 0 { dfs(grid, r, c - 1); }\\n    if c + 1 < cols { dfs(grid, r, c + 1); }\\n}\\n\\nfn num_islands(mut grid: Vec<Vec<char>>) -> i32 {\\n    if grid.is_empty() || grid[0].is_empty() {\\n        return 0;\\n    }\\n    \\n    let rows = grid.len();\\n    let cols = grid[0].len();\\n    let mut count = 0;\\n    \\n    for r in 0..rows {\\n        for c in 0..cols {\\n            if grid[r][c] == '1' {\\n                count += 1;\\n                dfs(&mut grid, r, c);\\n            }\\n        }\\n    }\\n    \\n    count\\n}", "CSHARP": "public int NumIslands(char[][] grid) {\\n    if (grid == null || grid.Length == 0) {\\n        return 0;\\n    }\\n    \\n    int rows = grid.Length;\\n    int cols = grid[0].Length;\\n    int count = 0;\\n    \\n    for (int r = 0; r < rows; r++) {\\n        for (int c = 0; c < cols; c++) {\\n            if (grid[r][c] == '1') {\\n                count++;\\n                DFS(grid, r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}\\n\\nprivate void DFS(char[][] grid, int r, int c) {\\n    int rows = grid.Length;\\n    int cols = grid[0].Length;\\n    \\n    // Check boundaries and if current cell is land\\n    if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0') {\\n        return;\\n    }\\n    \\n    // Mark as visited\\n    grid[r][c] = '0';\\n    \\n    // Explore all 4 directions\\n    DFS(grid, r + 1, c);\\n    DFS(grid, r - 1, c);\\n    DFS(grid, r, c + 1);\\n    DFS(grid, r, c - 1);\\n}", "PYTHON": "def num_islands(grid):\\n    if not grid or not grid[0]:\\n        return 0\\n    \\n    rows, cols = len(grid), len(grid[0])\\n    count = 0\\n    \\n    def dfs(r, c):\\n        # Check boundaries and if current cell is land\\n        if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == '0':\\n            return\\n        \\n        # Mark as visited\\n        grid[r][c] = '0'\\n        \\n        # Explore all 4 directions\\n        dfs(r + 1, c)\\n        dfs(r - 1, c)\\n        dfs(r, c + 1)\\n        dfs(r, c - 1)\\n    \\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] == '1':\\n                count += 1\\n                dfs(r, c)\\n    \\n    return count", "JAVASCRIPT": "function numIslands(grid) {\\n    if (!grid || grid.length === 0) return 0;\\n    \\n    const rows = grid.length;\\n    const cols = grid[0].length;\\n    let count = 0;\\n    \\n    function dfs(r, c) {\\n        // Check boundaries and if current cell is land\\n        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] === '0') {\\n            return;\\n        }\\n        \\n        // Mark as visited by changing '1' to '0'\\n        grid[r][c] = '0';\\n        \\n        // Explore all 4 directions\\n        dfs(r + 1, c);\\n        dfs(r - 1, c);\\n        dfs(r, c + 1);\\n        dfs(r, c - 1);\\n    }\\n    \\n    for (let r = 0; r < rows; r++) {\\n        for (let c = 0; c < cols; c++) {\\n            if (grid[r][c] === '1') {\\n                count++;\\n                dfs(r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}", "TYPESCRIPT": "function numIslands(grid: string[][]): number {\\n    if (!grid || grid.length === 0) return 0;\\n    \\n    const rows = grid.length;\\n    const cols = grid[0].length;\\n    let count = 0;\\n    \\n    function dfs(r: number, c: number): void {\\n        // Check boundaries and if current cell is land\\n        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] === '0') {\\n            return;\\n        }\\n        \\n        // Mark as visited\\n        grid[r][c] = '0';\\n        \\n        // Explore all 4 directions\\n        dfs(r + 1, c);\\n        dfs(r - 1, c);\\n        dfs(r, c + 1);\\n        dfs(r, c - 1);\\n    }\\n    \\n    for (let r = 0; r < rows; r++) {\\n        for (let c = 0; c < cols; c++) {\\n            if (grid[r][c] === '1') {\\n                count++;\\n                dfs(r, c);\\n            }\\n        }\\n    }\\n    \\n    return count;\\n}"}	[{"input": "[[\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"]]", "output": "1"}, {"input": "[[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"]]", "output": "3"}]	["Use DFS or BFS to explore and mark all connected land cells", "Remember to mark visited cells to avoid counting the same island multiple times", "Consider the four directions (up, down, left, right) when exploring adjacent cells"]	2025-07-19 12:23:53.884655	2025-07-19 12:23:53.884655	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "url": "https://www.youtube.com/watch?v=muncqlKJrH0", "type": "video", "children": [{"text": ""}]}, {"id": "e2", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n"}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(m * n)"}, {"text": "\\n"}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(m * n)"}]}, {"id": "e3", "type": "hr", "children": [{"text": ""}]}, {"id": "e4", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e5", "type": "p", "children": [{"text": "Count the number of islands in a grid by marking visited land cells using DFS or BFS."}]}, {"id": "e6", "type": "hr", "children": [{"text": ""}]}, {"id": "e7", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e8", "type": "p", "children": [{"text": "Traverse the grid; when a '1' is found, perform DFS/BFS to mark all connected land as visited."}]}, {"id": "e9", "type": "hr", "children": [{"text": ""}]}, {"id": "e10", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e11", "type": "code_block", "children": [{"id": "e11-1", "type": "code_line", "children": [{"text": "def num_islands(grid):"}]}, {"id": "e11-2", "type": "code_line", "children": [{"text": "  if not grid: return 0"}]}, {"id": "e11-3", "type": "code_line", "children": [{"text": "  m, n = len(grid), len(grid[0])"}]}, {"id": "e11-4", "type": "code_line", "children": [{"text": "  def dfs(r, c):"}]}, {"id": "e11-5", "type": "code_line", "children": [{"text": "    if r < 0 or c < 0 or r >= m or c >= n or grid[r][c] != '1': return"}]}, {"id": "e11-6", "type": "code_line", "children": [{"text": "    grid[r][c] = '0'"}]}, {"id": "e11-7", "type": "code_line", "children": [{"text": "    for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:"}]}, {"id": "e11-8", "type": "code_line", "children": [{"text": "      dfs(r+dr, c+dc)"}]}, {"id": "e11-9", "type": "code_line", "children": [{"text": "  count = 0"}]}, {"id": "e11-10", "type": "code_line", "children": [{"text": "  for i in range(m):"}]}, {"id": "e11-11", "type": "code_line", "children": [{"text": "    for j in range(n):"}]}, {"id": "e11-12", "type": "code_line", "children": [{"text": "      if grid[i][j] == '1':"}]}, {"id": "e11-13", "type": "code_line", "children": [{"text": "        dfs(i, j)"}]}, {"id": "e11-14", "type": "code_line", "children": [{"text": "        count += 1"}]}, {"id": "e11-15", "type": "code_line", "children": [{"text": "  return count"}]}]}, {"id": "e12", "type": "hr", "children": [{"text": ""}]}, {"id": "e13", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e14", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e15", "type": "code_block", "children": [{"id": "e15-1", "type": "code_line", "children": [{"text": "Input: grid = [["}, {"text": "\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\""}, {"text": "],["}, {"text": "\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\""}, {"text": "],["}, {"text": "\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\""}, {"text": "],["}, {"text": "\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\""}, {"text": "]]"}]}, {"id": "e15-2", "type": "code_line", "children": [{"text": "Output: 3"}]}]}, {"id": "e16", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e17", "type": "code_block", "children": [{"id": "e17-1", "type": "code_line", "children": [{"text": "Input: grid = [["}, {"text": "\\"1\\",\\"1\\",\\"1\\""}, {"text": "],["}, {"text": "\\"0\\",\\"1\\",\\"0\\""}, {"text": "],["}, {"text": "\\"1\\",\\"1\\",\\"1\\""}, {"text": "]]"}]}, {"id": "e17-2", "type": "code_line", "children": [{"text": "Output: 1"}]}]}, {"id": "e18", "type": "hr", "children": [{"text": ""}]}, {"id": "e19", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e20", "type": "p", "indent": 0, "children": [{"text": "Grid with no land ('1')"}], "listStyleType": ""}, {"id": "e21", "type": "p", "indent": 0, "children": [{"text": "Grid with all land"}], "listStyleType": ""}, {"id": "e22", "type": "hr", "children": [{"text": ""}]}, {"id": "e23", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e24", "type": "table", "children": [{"id": "e24-1", "type": "tr", "children": [{"id": "e24-1-1", "type": "th", "children": [{"id": "e24-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e24-1-2", "type": "th", "children": [{"id": "e24-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e24-2", "type": "tr", "children": [{"id": "e24-2-1", "type": "td", "children": [{"id": "e24-2-1-1", "type": "p", "children": [{"text": "DFS/BFS"}]}]}, {"id": "e24-2-2", "type": "td", "children": [{"id": "e24-2-2-1", "type": "p", "children": [{"text": "Mark all connected land as visited for each island"}]}]}]}, {"id": "e24-3", "type": "tr", "children": [{"id": "e24-3-1", "type": "td", "children": [{"id": "e24-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e24-3-2", "type": "td", "children": [{"id": "e24-3-2-1", "type": "p", "children": [{"code": true, "text": "O(m * n)"}]}]}]}, {"id": "e24-4", "type": "tr", "children": [{"id": "e24-4-1", "type": "td", "children": [{"id": "e24-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e24-4-2", "type": "td", "children": [{"id": "e24-4-2-1", "type": "p", "children": [{"code": true, "text": "O(m * n)"}]}]}]}, {"id": "e24-5", "type": "tr", "children": [{"id": "e24-5-1", "type": "td", "children": [{"id": "e24-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e24-5-2", "type": "td", "children": [{"id": "e24-5-2-1", "type": "p", "children": [{"text": "Each DFS/BFS marks one island"}]}]}]}]}, {"id": "e25", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"encoding/json\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <string>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "require 'json'", "RUST": "use std::io;\\nuse std::io::Read;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\n\\nclass Solution {", "PYTHON": "import sys\\nimport json", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char input[1000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    // For simplicity, we'll parse a predefined test case\\n    // In a real solution, you would parse the JSON input\\n    \\n    // Test case 1: [['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]\\n    char grid1[4][5] = {\\n        {'1', '1', '1', '1', '0'},\\n        {'1', '1', '0', '1', '0'},\\n        {'1', '1', '0', '0', '0'},\\n        {'0', '0', '0', '0', '0'}\\n    };\\n    \\n    char* grid[4];\\n    int gridColSize[4] = {5, 5, 5, 5};\\n    \\n    for (int i = 0; i < 4; i++) {\\n        grid[i] = (char*)malloc(5 * sizeof(char));\\n        for (int j = 0; j < 5; j++) {\\n            grid[i][j] = grid1[i][j];\\n        }\\n    }\\n    \\n    int result = numIslands(grid, 4, gridColSize);\\n    printf(\\"%d\\n\\", result);\\n    \\n    // Free memory\\n    for (int i = 0; i < 4; i++) {\\n        free(grid[i]);\\n    }\\n    \\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    // Parse grid\\n    var jsonGrid [][]string\\n    json.Unmarshal([]byte(input), &jsonGrid)\\n    \\n    // Convert to byte grid\\n    grid := make([][]byte, len(jsonGrid))\\n    for i := range jsonGrid {\\n        grid[i] = make([]byte, len(jsonGrid[i]))\\n        for j := range jsonGrid[i] {\\n            grid[i][j] = jsonGrid[i][j][0]\\n        }\\n    }\\n    \\n    result := numIslands(grid)\\n    fmt.Println(result)\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n    \\n    // Parse grid\\n    vector<vector<char>> grid;\\n    size_t pos = 1; // Skip first '['\\n    while (pos < input.length() - 1) {\\n        vector<char> row;\\n        size_t rowStart = input.find('[', pos) + 1;\\n        size_t rowEnd = input.find(']', rowStart);\\n        \\n        if (rowStart == string::npos || rowEnd == string::npos) break;\\n        \\n        string rowStr = input.substr(rowStart, rowEnd - rowStart);\\n        size_t cellPos = 0;\\n        while (cellPos < rowStr.length()) {\\n            size_t quoteStart = rowStr.find('\\"', cellPos);\\n            if (quoteStart == string::npos) break;\\n            quoteStart++;\\n            \\n            size_t quoteEnd = rowStr.find('\\"', quoteStart);\\n            if (quoteEnd == string::npos) break;\\n            \\n            row.push_back(rowStr[quoteStart]);\\n            cellPos = quoteEnd + 1;\\n            if (cellPos < rowStr.length() && rowStr[cellPos] == ',') cellPos++;\\n        }\\n        \\n        grid.push_back(row);\\n        pos = rowEnd + 1;\\n        if (pos < input.length() && input[pos] == ',') pos++;\\n    }\\n    \\n    int result = numIslands(grid);\\n    cout << result << endl;\\n    \\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        \\n        // Parse grid\\n        char[][] grid = parseGrid(input);\\n        \\n        Solution sol = new Solution();\\n        int result = sol.numIslands(grid);\\n        System.out.println(result);\\n    }\\n    \\n    private static char[][] parseGrid(String input) {\\n        // Remove outer brackets\\n        input = input.substring(1, input.length() - 1);\\n        \\n        // Split into rows\\n        String[] rows = input.split(\\"\\\\\\\\],\\\\\\\\[\\");\\n        rows[0] = rows[0].substring(1);\\n        rows[rows.length - 1] = rows[rows.length - 1].substring(0, rows[rows.length - 1].length() - 1);\\n        \\n        char[][] grid = new char[rows.length][];\\n        for (int i = 0; i < rows.length; i++) {\\n            String[] cells = rows[i].split(\\",\\");\\n            grid[i] = new char[cells.length];\\n            for (int j = 0; j < cells.length; j++) {\\n                grid[i][j] = cells[j].charAt(1);\\n            }\\n        }\\n        \\n        return grid;\\n    }\\n}", "RUBY": "input = gets.strip\\ngrid = JSON.parse(input)\\nresult = num_islands(grid)\\nputs result", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_to_string(&mut input).unwrap();\\n    \\n    // Parse grid (simplified)\\n    let mut grid: Vec<Vec<char>> = Vec::new();\\n    let input = input.trim();\\n    \\n    // Remove outer brackets\\n    let input = &input[1..input.len()-1];\\n    \\n    // Split into rows\\n    let rows: Vec<&str> = input.split(\\"],[\\").collect();\\n    \\n    for row_str in rows {\\n        let mut row = Vec::new();\\n        let row_str = row_str.replace(\\"[\\", \\"\\").replace(\\"]\\", \\"\\");\\n        let cells: Vec<&str> = row_str.split(\\",\\").collect();\\n        \\n        for cell in cells {\\n            let cell = cell.replace(\\"\\"\\", \\"\\");\\n            if let Some(ch) = cell.chars().next() {\\n                row.push(ch);\\n            }\\n        }\\n        \\n        grid.push(row);\\n    }\\n    \\n    let result = num_islands(grid);\\n    println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        string input = Console.ReadLine();\\n        \\n        // Parse grid manually without using System.Text.Json\\n        char[][] grid = ParseGrid(input);\\n        \\n        Solution sol = new Solution();\\n        int result = sol.NumIslands(grid);\\n        Console.WriteLine(result);\\n    }\\n    \\n    static char[][] ParseGrid(string input) {\\n        // Manual parsing of the JSON-like input\\n        input = input.Trim();\\n        \\n        // Remove outer brackets\\n        input = input.Substring(1, input.Length - 2);\\n        \\n        // Split into rows\\n        string[] rowsStr = input.Split(new[] { \\"],[\\" }, StringSplitOptions.None);\\n        char[][] grid = new char[rowsStr.Length][];\\n        \\n        for (int i = 0; i < rowsStr.Length; i++) {\\n            string rowStr = rowsStr[i].Replace(\\"[\\", \\"\\").Replace(\\"]\\", \\"\\");\\n            string[] cellsStr = rowStr.Split(',');\\n            \\n            grid[i] = new char[cellsStr.Length];\\n            for (int j = 0; j < cellsStr.Length; j++) {\\n                // Extract character between quotes\\n                string cell = cellsStr[j].Trim();\\n                if (cell.Length >= 3) {\\n                    grid[i][j] = cell[1];\\n                }\\n            }\\n        }\\n        \\n        return grid;\\n    }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\ngrid = json.loads(input_data)\\nresult = num_islands(grid)\\nprint(result)", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const grid = JSON.parse(input);\\n    const result = numIslands(grid);\\n    console.log(result);\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const grid = JSON.parse(input);\\n    const result = numIslands(grid);\\n    console.log(result);\\n});"}	f	t
280db95f-a28f-4b5d-b7f1-7865d881b64c	4. Reverse Linked List	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given the head of a singly linked list, reverse the list, and return the new head."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "You must reverse the list in-place."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: head = [1,2,3,4,5]"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: [5,4,3,2,1]"}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: head = [1,2]"}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: [2,1]"}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "The number of nodes in the list is in the range [0, 5000]"}], "listStyleType": ""}, {"id": "d10", "type": "p", "indent": 0, "children": [{"code": true, "text": "-5000 <= Node.val <= 5000"}], "listStyleType": ""}]	medium	["Linked List"]	{"C": "struct ListNode* reverseList(struct ListNode* head) {\\n    // Write your solution here\\n    return NULL;\\n}", "GO": "func reverseList(head *ListNode) *ListNode {\\n    // Write your solution here\\n    return nil\\n}", "CPP": "ListNode* reverseList(ListNode* head) {\\n    // Write your solution here\\n    return nullptr;\\n}", "JAVA": "public ListNode reverseList(ListNode head) {\\n    // Write your solution here\\n    return null;\\n}", "RUBY": "def reverse_list(head)\\n  # Write your solution here\\n  nil\\nend", "RUST": "fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n    // Write your solution here\\n    None\\n}", "CSHARP": "public ListNode ReverseList(ListNode head) {\\n    // Write your solution here\\n    return null;\\n}", "PYTHON": "def reverse_list(head):\\n    # Write your solution here\\n    return None", "JAVASCRIPT": "function reverseList(head) {\\n    // Write your solution here\\n    return null;\\n}", "TYPESCRIPT": "function reverseList(head: ListNode | null): ListNode | null {\\n    // Write your solution here\\n    return null;\\n}"}	{"C": "struct ListNode* reverseList(struct ListNode* head) {\\n    struct ListNode* prev = NULL;\\n    struct ListNode* current = head;\\n    \\n    while (current != NULL) {\\n        struct ListNode* nextTemp = current->next;\\n        current->next = prev;\\n        prev = current;\\n        current = nextTemp;\\n    }\\n    \\n    return prev;\\n}", "GO": "func reverseList(head *ListNode) *ListNode {\\n    var prev *ListNode\\n    current := head\\n    \\n    for current != nil {\\n        nextTemp := current.Next\\n        current.Next = prev\\n        prev = current\\n        current = nextTemp\\n    }\\n    \\n    return prev\\n}", "CPP": "ListNode* reverseList(ListNode* head) {\\n    ListNode* prev = nullptr;\\n    ListNode* current = head;\\n    \\n    while (current != nullptr) {\\n        ListNode* nextTemp = current->next;\\n        current->next = prev;\\n        prev = current;\\n        current = nextTemp;\\n    }\\n    \\n    return prev;\\n}", "JAVA": "public ListNode reverseList(ListNode head) {\\n    ListNode prev = null;\\n    ListNode current = head;\\n    \\n    while (current != null) {\\n        ListNode nextTemp = current.next;\\n        current.next = prev;\\n        prev = current;\\n        current = nextTemp;\\n    }\\n    \\n    return prev;\\n}", "RUBY": "def reverse_list(head)\\n  prev = nil\\n  current = head\\n  \\n  while current\\n    next_temp = current.next\\n    current.next = prev\\n    prev = current\\n    current = next_temp\\n  end\\n  \\n  prev\\nend", "RUST": "fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n    let mut prev = None;\\n    let mut current = head;\\n    \\n    while let Some(mut node) = current {\\n        current = node.next;\\n        node.next = prev;\\n        prev = Some(node);\\n    }\\n    \\n    prev\\n}", "CSHARP": "public ListNode ReverseList(ListNode head) {\\n    ListNode prev = null;\\n    ListNode current = head;\\n    \\n    while (current != null) {\\n        ListNode nextTemp = current.next;\\n        current.next = prev;\\n        prev = current;\\n        current = nextTemp;\\n    }\\n    \\n    return prev;\\n}", "PYTHON": "def reverse_list(head):\\n    prev = None\\n    current = head\\n    \\n    while current:\\n        next_temp = current.next\\n        current.next = prev\\n        prev = current\\n        current = next_temp\\n        \\n    return prev", "JAVASCRIPT": "function reverseList(head) {\\n    let prev = null;\\n    let current = head;\\n    \\n    while (current !== null) {\\n        const next = current.next;\\n        current.next = prev;\\n        prev = current;\\n        current = next;\\n    }\\n    \\n    return prev;\\n}", "TYPESCRIPT": "function reverseList(head: ListNode | null): ListNode | null {\\n    let prev: ListNode | null = null;\\n    let current: ListNode | null = head;\\n    \\n    while (current !== null) {\\n        const nextTemp = current.next;\\n        current.next = prev;\\n        prev = current;\\n        current = nextTemp;\\n    }\\n    \\n    return prev;\\n}"}	[{"input": "[1,2,3,4,5]", "output": "[5,4,3,2,1]"}, {"input": "[1,2]", "output": "[2,1]"}, {"input": "[]", "output": "[]"}]	["Use a temporary variable to store the next node", "Reverse the direction of each link"]	2025-07-17 18:11:49.936518	2025-07-28 12:01:08.379	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=O0By4Zq0OFc", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Reverse a singly linked list in-place and return the new head."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must reverse in-place with O(1) extra space."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 5000 nodes."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Iterate through the list, reversing the direction of each node's pointer."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Iterative Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Use three pointers: "}, {"code": true, "text": "prev"}, {"text": ", "}, {"code": true, "text": "curr"}, {"text": ", and "}, {"code": true, "text": "next"}, {"text": ". At each step, reverse "}, {"code": true, "text": "curr.next"}, {"text": " to point to "}, {"code": true, "text": "prev"}, {"text": "."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def reverse_list(head):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  prev = None"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  curr = head"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  while curr:"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "    next_node = curr.next"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "    curr.next = prev"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    prev = curr"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "    curr = next_node"}]}, {"id": "e19-9", "type": "code_line", "children": [{"text": "  return prev"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: head = [1,2,3,4,5]"}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: [5,4,3,2,1]"}]}]}, {"id": "e24", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e25", "type": "code_block", "children": [{"id": "e25-1", "type": "code_line", "children": [{"text": "Input: head = [1,2]"}]}, {"id": "e25-2", "type": "code_line", "children": [{"text": "Output: [2,1]"}]}]}, {"id": "e26", "type": "hr", "children": [{"text": ""}]}, {"id": "e27", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e28", "type": "p", "indent": 0, "children": [{"text": "Empty list"}], "listStyleType": ""}, {"id": "e29", "type": "p", "indent": 0, "children": [{"text": "Single node"}], "listStyleType": ""}, {"id": "e30", "type": "hr", "children": [{"text": ""}]}, {"id": "e31", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e32", "type": "table", "children": [{"id": "e32-1", "type": "tr", "children": [{"id": "e32-1-1", "type": "th", "children": [{"id": "e32-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e32-1-2", "type": "th", "children": [{"id": "e32-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e32-2", "type": "tr", "children": [{"id": "e32-2-1", "type": "td", "children": [{"id": "e32-2-1-1", "type": "p", "children": [{"text": "Iterative Pointers"}]}]}, {"id": "e32-2-2", "type": "td", "children": [{"id": "e32-2-2-1", "type": "p", "children": [{"text": "Reverse links one by one"}]}]}]}, {"id": "e32-3", "type": "tr", "children": [{"id": "e32-3-1", "type": "td", "children": [{"id": "e32-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e32-3-2", "type": "td", "children": [{"id": "e32-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e32-4", "type": "tr", "children": [{"id": "e32-4-1", "type": "td", "children": [{"id": "e32-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e32-4-2", "type": "td", "children": [{"id": "e32-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e32-5", "type": "tr", "children": [{"id": "e32-5-1", "type": "td", "children": [{"id": "e32-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e32-5-2", "type": "td", "children": [{"id": "e32-5-2-1", "type": "p", "children": [{"text": "Reverse pointers, not values"}]}]}]}]}, {"id": "e33", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Definition for singly-linked list.\\nstruct ListNode {\\n    int val;\\n    struct ListNode *next;\\n};\\n\\n// Helper function to create linked list from array\\nstruct ListNode* createLinkedList(int* arr, int size) {\\n    if (size == 0) return NULL;\\n    struct ListNode* head = (struct ListNode*)malloc(sizeof(struct ListNode));\\n    head->val = arr[0];\\n    head->next = NULL;\\n    struct ListNode* current = head;\\n    for (int i = 1; i < size; i++) {\\n        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));\\n        current->next->val = arr[i];\\n        current->next->next = NULL;\\n        current = current->next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nvoid linkedListToArray(struct ListNode* head, int* result, int* size) {\\n    *size = 0;\\n    struct ListNode* current = head;\\n    while (current) {\\n        result[(*size)++] = current->val;\\n        current = current->next;\\n    }\\n}", "GO": "package main\\n\\nimport (\\n    \\"fmt\\"\\n    \\"strings\\"\\n    \\"strconv\\"\\n)\\n\\n// Definition for singly-linked list.\\ntype ListNode struct {\\n    Val int\\n    Next *ListNode\\n}\\n\\n// Helper function to create linked list from array\\nfunc createLinkedList(arr []int) *ListNode {\\n    if len(arr) == 0 {\\n        return nil\\n    }\\n    head := &ListNode{Val: arr[0]}\\n    current := head\\n    for i := 1; i < len(arr); i++ {\\n        current.Next = &ListNode{Val: arr[i]}\\n        current = current.Next\\n    }\\n    return head\\n}\\n\\n// Helper function to convert linked list to array\\nfunc linkedListToArray(head *ListNode) []int {\\n    result := []int{}\\n    current := head\\n    for current != nil {\\n        result = append(result, current.Val)\\n        current = current.Next\\n    }\\n    return result\\n}", "CPP": "#include <iostream>\\n#include <vector>\\n#include <sstream>\\nusing namespace std;\\n\\n// Definition for singly-linked list.\\nstruct ListNode {\\n    int val;\\n    ListNode *next;\\n    ListNode() : val(0), next(nullptr) {}\\n    ListNode(int x) : val(x), next(nullptr) {}\\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\\n};\\n\\n// Helper function to create linked list from array\\nListNode* createLinkedList(vector<int>& arr) {\\n    if (arr.empty()) return nullptr;\\n    ListNode* head = new ListNode(arr[0]);\\n    ListNode* current = head;\\n    for (int i = 1; i < arr.size(); i++) {\\n        current->next = new ListNode(arr[i]);\\n        current = current->next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nvector<int> linkedListToArray(ListNode* head) {\\n    vector<int> result;\\n    ListNode* current = head;\\n    while (current) {\\n        result.push_back(current->val);\\n        current = current->next;\\n    }\\n    return result;\\n}", "JAVA": "import java.util.*;\\n\\n// Definition for singly-linked list.\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\nclass Solution {\\n    // Helper function to create linked list from array\\n    public static ListNode createLinkedList(int[] arr) {\\n        if (arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n    \\n    // Helper function to convert linked list to array\\n    public static int[] linkedListToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        ListNode current = head;\\n        while (current != null) {\\n            result.add(current.val);\\n            current = current.next;\\n        }\\n        return result.stream().mapToInt(i -> i).toArray();\\n    }", "RUBY": "# Definition for singly-linked list.\\nclass ListNode\\n    attr_accessor :val, :next\\n    def initialize(val = 0, _next = nil)\\n        @val = val\\n        @next = _next\\n    end\\nend\\n\\n# Helper function to create linked list from array\\ndef create_linked_list(arr)\\n    return nil if arr.empty?\\n    head = ListNode.new(arr[0])\\n    current = head\\n    (1...arr.length).each do |i|\\n        current.next = ListNode.new(arr[i])\\n        current = current.next\\n    end\\n    head\\nend\\n\\n# Helper function to convert linked list to array\\ndef linked_list_to_array(head)\\n    result = []\\n    current = head\\n    while current\\n        result << current.val\\n        current = current.next\\n    end\\n    result\\nend", "RUST": "use std::io;\\n\\n// Definition for singly-linked list.\\n#[derive(PartialEq, Eq, Clone, Debug)]\\npub struct ListNode {\\n    pub val: i32,\\n    pub next: Option<Box<ListNode>>\\n}\\n\\nimpl ListNode {\\n    #[inline]\\n    fn new(val: i32) -> Self {\\n        ListNode {\\n            next: None,\\n            val\\n        }\\n    }\\n}\\n\\n// Helper function to create linked list from array\\nfn create_linked_list(arr: &Vec<i32>) -> Option<Box<ListNode>> {\\n    if arr.is_empty() {\\n        return None;\\n    }\\n    let mut head = Box::new(ListNode::new(arr[0]));\\n    let mut current = &mut head;\\n    for i in 1..arr.len() {\\n        current.next = Some(Box::new(ListNode::new(arr[i])));\\n        current = current.next.as_mut().unwrap();\\n    }\\n    Some(head)\\n}\\n\\n// Helper function to convert linked list to array\\nfn linked_list_to_array(head: Option<Box<ListNode>>) -> Vec<i32> {\\n    let mut result = Vec::new();\\n    let mut current = head;\\n    while let Some(node) = current {\\n        result.push(node.val);\\n        current = node.next;\\n    }\\n    result\\n}", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\n// Definition for singly-linked list.\\npublic class ListNode {\\n    public int val;\\n    public ListNode next;\\n    public ListNode(int val=0, ListNode next=null) {\\n        this.val = val;\\n        this.next = next;\\n    }\\n}\\n\\nclass Solution {\\n    // Helper function to create linked list from array\\n    public static ListNode CreateLinkedList(int[] arr) {\\n        if (arr.Length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.Length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n    \\n    // Helper function to convert linked list to array\\n    public static int[] LinkedListToArray(ListNode head) {\\n        List<int> result = new List<int>();\\n        ListNode current = head;\\n        while (current != null) {\\n            result.Add(current.val);\\n            current = current.next;\\n        }\\n        return result.ToArray();\\n    }", "PYTHON": "import sys\\n\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n# Helper function to create linked list from array\\ndef create_linked_list(arr):\\n    if not arr:\\n        return None\\n    head = ListNode(arr[0])\\n    current = head\\n    for i in range(1, len(arr)):\\n        current.next = ListNode(arr[i])\\n        current = current.next\\n    return head\\n\\n# Helper function to convert linked list to array\\ndef linked_list_to_array(head):\\n    result = []\\n    current = head\\n    while current:\\n        result.append(current.val)\\n        current = current.next\\n    return result", "JAVASCRIPT": "// Definition for singly-linked list.\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? 0 : val)\\n    this.next = (next===undefined ? null : next)\\n}\\n\\n// Helper function to create linked list from array\\nfunction createLinkedList(arr) {\\n    if (!arr.length) return null;\\n    const head = new ListNode(arr[0]);\\n    let current = head;\\n    for (let i = 1; i < arr.length; i++) {\\n        current.next = new ListNode(arr[i]);\\n        current = current.next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nfunction linkedListToArray(head) {\\n    const result = [];\\n    let current = head;\\n    while (current) {\\n        result.push(current.val);\\n        current = current.next;\\n    }\\n    return result;\\n}", "TYPESCRIPT": "// Definition for singly-linked list.\\nclass ListNode {\\n    val: number\\n    next: ListNode | null\\n    constructor(val?: number, next?: ListNode | null) {\\n        this.val = (val===undefined ? 0 : val)\\n        this.next = (next===undefined ? null : next)\\n    }\\n}\\n\\n// Helper function to create linked list from array\\nfunction createLinkedList(arr: number[]): ListNode | null {\\n    if (!arr.length) return null;\\n    const head = new ListNode(arr[0]);\\n    let current = head;\\n    for (let i = 1; i < arr.length; i++) {\\n        current.next = new ListNode(arr[i]);\\n        current = current.next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nfunction linkedListToArray(head: ListNode | null): number[] {\\n    const result: number[] = [];\\n    let current = head;\\n    while (current) {\\n        result.push(current.val);\\n        current = current.next;\\n    }\\n    return result;\\n}"}	{"C": "int main() {\\n    char input[1000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    // Parse the array\\n    char* numsStr = input + 1; // Skip the '['\\n    numsStr[strlen(numsStr) - 2] = '\\\\0'; // Remove the ']'\\n    \\n    int arr[100];\\n    int size = 0;\\n    char* token = strtok(numsStr, \\",\\");\\n    while (token != NULL) {\\n        arr[size++] = atoi(token);\\n        token = strtok(NULL, \\",\\");\\n    }\\n    \\n    struct ListNode* head = createLinkedList(arr, size);\\n    struct ListNode* result = reverseList(head);\\n    \\n    int resultArr[100];\\n    int resultSize = 0;\\n    linkedListToArray(result, resultArr, &resultSize);\\n    \\n    printf(\\"[\\");\\n    for (int i = 0; i < resultSize; i++) {\\n        printf(\\"%d\\", resultArr[i]);\\n        if (i < resultSize - 1) printf(\\",\\");\\n    }\\n    printf(\\"]\\\\n\\");\\n    \\n    return 0;\\n}", "GO": "func main() {\\n    var input string\\n    fmt.Scanln(&input)\\n    \\n    // Parse the array\\n    input = input[1:len(input)-1]\\n    var arr []int\\n    \\n    if input != \\"\\" {\\n        parts := strings.Split(input, \\",\\")\\n        arr = make([]int, len(parts))\\n        for i, s := range parts {\\n            arr[i], _ = strconv.Atoi(s)\\n        }\\n    }\\n    \\n    head := createLinkedList(arr)\\n    result := reverseList(head)\\n    resultArr := linkedListToArray(result)\\n    \\n    fmt.Print(\\"[\\")\\n    for i, val := range resultArr {\\n        fmt.Print(val)\\n        if i < len(resultArr) - 1 {\\n            fmt.Print(\\",\\")\\n        }\\n    }\\n    fmt.Println(\\"]\\")\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n    \\n    // Parse the array\\n    input = input.substr(1, input.size() - 2);\\n    stringstream ss(input);\\n    vector<int> arr;\\n    string token;\\n    \\n    while (getline(ss, token, ',')) {\\n        if (!token.empty()) {\\n            arr.push_back(stoi(token));\\n        }\\n    }\\n    \\n    ListNode* head = createLinkedList(arr);\\n    ListNode* result = reverseList(head);\\n    vector<int> resultArr = linkedListToArray(result);\\n    \\n    cout << \\"[\\";\\n    for (int i = 0; i < resultArr.size(); i++) {\\n        cout << resultArr[i];\\n        if (i < resultArr.size() - 1) cout << \\",\\";\\n    }\\n    cout << \\"]\\" << endl;\\n    \\n    return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        \\n        // Parse the array\\n        input = input.substring(1, input.length() - 1);\\n        String[] parts = input.split(\\",\\");\\n        int[] arr;\\n        \\n        if (input.isEmpty()) {\\n            arr = new int[0];\\n        } else {\\n            arr = new int[parts.length];\\n            for (int i = 0; i < parts.length; i++) {\\n                arr[i] = Integer.parseInt(parts[i]);\\n            }\\n        }\\n        \\n        ListNode head = Solution.createLinkedList(arr);\\n        Solution sol = new Solution();\\n        ListNode result = sol.reverseList(head);\\n        int[] resultArr = Solution.linkedListToArray(result);\\n        \\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < resultArr.length; i++) {\\n            System.out.print(resultArr[i]);\\n            if (i < resultArr.length - 1) System.out.print(\\",\\");\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "RUBY": "# Parse input and test the function\\ninput = gets.strip\\narr = eval(input)\\nhead = create_linked_list(arr)\\nresult = reverse_list(head)\\nputs linked_list_to_array(result).to_s", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    // Parse the array\\n    let input = input.trim();\\n    let mut arr = Vec::new();\\n    \\n    if input.len() > 2 {\\n        let input = &input[1..input.len()-1];\\n        arr = input.split(',').map(|s| s.parse().unwrap()).collect();\\n    }\\n    \\n    let head = create_linked_list(&arr);\\n    let result = reverse_list(head);\\n    let result_arr = linked_list_to_array(result);\\n    \\n    print!(\\"[\\");\\n    for (i, val) in result_arr.iter().enumerate() {\\n        print!(\\"{}\\", val);\\n        if i < result_arr.len() - 1 {\\n            print!(\\",\\");\\n        }\\n    }\\n    println!(\\"]\\");\\n}", "CSHARP": "\\n    public static void Main() {\\n        string input = Console.ReadLine();\\n        \\n        // Parse the array\\n        input = input.Substring(1, input.Length - 2);\\n        int[] arr;\\n        \\n        if (string.IsNullOrEmpty(input)) {\\n            arr = new int[0];\\n        } else {\\n            arr = input.Split(',').Select(int.Parse).ToArray();\\n        }\\n        \\n        ListNode head = Solution.CreateLinkedList(arr);\\n        Solution sol = new Solution();\\n        ListNode result = sol.ReverseList(head);\\n        int[] resultArr = Solution.LinkedListToArray(result);\\n        \\n        Console.Write(\\"[\\");\\n        for (int i = 0; i < resultArr.Length; i++) {\\n            Console.Write(resultArr[i]);\\n            if (i < resultArr.Length - 1) Console.Write(\\",\\");\\n        }\\n        Console.WriteLine(\\"]\\");\\n    }\\n}", "PYTHON": "# Parse input and test the function\\ninput_data = sys.stdin.read().strip()\\narr = eval(input_data)\\nhead = create_linked_list(arr)\\nresult = reverse_list(head)\\n\\n# ‚úÖ Fixed output to match exact expected format\\nprint(str(linked_list_to_array(result)).replace(\\" \\", \\"\\"))", "JAVASCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const arr = JSON.parse(input);\\n    const head = createLinkedList(arr);\\n    const result = reverseList(head);\\n    console.log(JSON.stringify(linkedListToArray(result)));\\n});", "TYPESCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const arr = JSON.parse(input);\\n    const head = createLinkedList(arr);\\n    const result = reverseList(head);\\n    console.log(JSON.stringify(linkedListToArray(result)));\\n});"}	t	t
49b1bb9a-0e0e-480e-8f0a-67edce76056b	2. Longest Substring Without Repeating Characters	[{"id": "a1", "type": "p", "align": "start", "children": [{"text": "Given a string "}, {"code": true, "text": "s", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": ", find the length of the "}, {"bold": true, "text": "longest substring"}, {"text": " without repeating characters."}]}, {"id": "a2", "type": "p", "align": "start", "children": [{"text": "The solution should have a time complexity of "}, {"code": true, "text": "O(n)", "color": "rgba(239, 241, 246, 0.75)", "fontSize": "0.75rem", "fontFamily": "Menlo, sans-serif", "backgroundColor": "rgba(255, 255, 255, 0.07)"}, {"text": "."}]}, {"id": "a3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "a4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "a5", "type": "code_block", "children": [{"id": "a5-1", "type": "code_line", "children": [{"text": "Input: s = \\"abcabcbb\\""}]}, {"id": "a5-2", "type": "code_line", "children": [{"text": "Output: 3"}]}, {"id": "a5-3", "type": "code_line", "children": [{"text": "Explanation: The answer is \\"abc\\", with the length of 3."}]}]}, {"id": "a6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "a7", "type": "code_block", "children": [{"id": "a7-1", "type": "code_line", "children": [{"text": "Input: s = \\"bbbbb\\""}]}, {"id": "a7-2", "type": "code_line", "children": [{"text": "Output: 1"}]}, {"id": "a7-3", "type": "code_line", "children": [{"text": "Explanation: The answer is \\"b\\", with the length of 1."}]}]}, {"id": "a8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "a9", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= s.length <= 5 * 10^4", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}, {"id": "a10", "type": "p", "indent": 0, "children": [{"code": true, "text": "s consists of English letters, digits, symbols and spaces.", "color": "rgb(255, 255, 255)", "fontSize": "14px", "fontFamily": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\"", "backgroundColor": "rgb(15, 15, 15)"}], "listStyleType": ""}]	medium	["Hash Table", "String", "Sliding Window"]	{"C": "int lengthOfLongestSubstring(char* s) {\\n  int map[128];\\n  memset(map, -1, sizeof(map));\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; s[right] != '\\\\0'; right++) {\\n    if (map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    int currentLen = right - left + 1;\\n    if (currentLen > maxLen) {\\n      maxLen = currentLen;\\n    }\\n  }\\n  \\n  return maxLen;\\n}", "GO": "func lengthOfLongestSubstring(s string) int {\\n  charMap := make(map[byte]int)\\n  left, maxLen := 0, 0\\n  \\n  for right := 0; right < len(s); right++ {\\n    if idx, exists := charMap[s[right]]; exists && idx >= left {\\n      left = idx + 1\\n    }\\n    charMap[s[right]] = right\\n    if right - left + 1 > maxLen {\\n      maxLen = right - left + 1\\n    }\\n  }\\n  \\n  return maxLen\\n}", "CPP": "int lengthOfLongestSubstring(string s) {\\n  unordered_map<char, int> map;\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.length(); right++) {\\n    if (map.count(s[right]) && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "JAVA": "int lengthOfLongestSubstring(String s) {\\n  Map<Character, Integer> map = new HashMap<>();\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.length(); right++) {\\n    char c = s.charAt(right);\\n    if (map.containsKey(c) && map.get(c) >= left) {\\n      left = map.get(c) + 1;\\n    }\\n    map.put(c, right);\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "RUBY": "def length_of_longest_substring(s)\\n  map = {}\\n  left = 0\\n  max_len = 0\\n  \\n  s.chars.each_with_index do |c, right|\\n    if map[c] && map[c] >= left\\n      left = map[c] + 1\\n    end\\n    map[c] = right\\n    max_len = [max_len, right - left + 1].max\\n  end\\n  \\n  max_len\\nend", "RUST": "fn length_of_longest_substring(s: String) -> i32 {\\n  let mut map = HashMap::new();\\n  let mut left = 0;\\n  let mut max_len = 0;\\n  \\n  for (right, c) in s.chars().enumerate() {\\n    if let Some(&idx) = map.get(&c) {\\n      if idx >= left {\\n        left = idx + 1;\\n      }\\n    }\\n    map.insert(c, right);\\n    max_len = max_len.max(right - left + 1);\\n  }\\n  \\n  max_len as i32\\n}", "CSHARP": "public int LengthOfLongestSubstring(string s) {\\n  Dictionary<char, int> map = new Dictionary<char, int>();\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.Length; right++) {\\n    if (map.ContainsKey(s[right]) && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.Max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "PYTHON": "def length_of_longest_substring(s):\\n  char_map = {}\\n  left = max_len = 0\\n  \\n  for right, char in enumerate(s):\\n    if char in char_map and char_map[char] >= left:\\n      left = char_map[char] + 1\\n    char_map[char] = right\\n    max_len = max(max_len, right - left + 1)\\n    \\n  return max_len", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n  let map = {};\\n  let left = 0, maxLen = 0;\\n  \\n  for (let right = 0; right < s.length; right++) {\\n    if (map[s[right]] !== undefined && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n};", "TYPESCRIPT": "function lengthOfLongestSubstring(s: string): number {\\n  const map: Record<string, number> = {};\\n  let left = 0, maxLen = 0;\\n  \\n  for (let right = 0; right < s.length; right++) {\\n    if (map[s[right]] !== undefined && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}"}	{"C": "int lengthOfLongestSubstring(char* s) {\\n  int map[128];\\n  memset(map, -1, sizeof(map));\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; s[right] != '\\\\0'; right++) {\\n    if (map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    int currentLen = right - left + 1;\\n    if (currentLen > maxLen) {\\n      maxLen = currentLen;\\n    }\\n  }\\n  \\n  return maxLen;\\n}", "GO": "func lengthOfLongestSubstring(s string) int {\\n  charMap := make(map[byte]int)\\n  left, maxLen := 0, 0\\n  \\n  for right := 0; right < len(s); right++ {\\n    if idx, exists := charMap[s[right]]; exists && idx >= left {\\n      left = idx + 1\\n    }\\n    charMap[s[right]] = right\\n    if right - left + 1 > maxLen {\\n      maxLen = right - left + 1\\n    }\\n  }\\n  \\n  return maxLen\\n}", "CPP": "int lengthOfLongestSubstring(string s) {\\n  unordered_map<char, int> map;\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.length(); right++) {\\n    if (map.count(s[right]) && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "JAVA": "int lengthOfLongestSubstring(String s) {\\n  Map<Character, Integer> map = new HashMap<>();\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.length(); right++) {\\n    char c = s.charAt(right);\\n    if (map.containsKey(c) && map.get(c) >= left) {\\n      left = map.get(c) + 1;\\n    }\\n    map.put(c, right);\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "RUBY": "def length_of_longest_substring(s)\\n  map = {}\\n  left = 0\\n  max_len = 0\\n  \\n  s.chars.each_with_index do |c, right|\\n    if map[c] && map[c] >= left\\n      left = map[c] + 1\\n    end\\n    map[c] = right\\n    max_len = [max_len, right - left + 1].max\\n  end\\n  \\n  max_len\\nend", "RUST": "fn length_of_longest_substring(s: String) -> i32 {\\n  let mut map = HashMap::new();\\n  let mut left = 0;\\n  let mut max_len = 0;\\n  \\n  for (right, c) in s.chars().enumerate() {\\n    if let Some(&idx) = map.get(&c) {\\n      if idx >= left {\\n        left = idx + 1;\\n      }\\n    }\\n    map.insert(c, right);\\n    max_len = max_len.max(right - left + 1);\\n  }\\n  \\n  max_len as i32\\n}", "CSHARP": "public int LengthOfLongestSubstring(string s) {\\n  Dictionary<char, int> map = new Dictionary<char, int>();\\n  int left = 0, maxLen = 0;\\n  \\n  for (int right = 0; right < s.Length; right++) {\\n    if (map.ContainsKey(s[right]) && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.Max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}", "PYTHON": "def length_of_longest_substring(s):\\n  char_map = {}\\n  left = max_len = 0\\n  \\n  for right, char in enumerate(s):\\n    if char in char_map and char_map[char] >= left:\\n      left = char_map[char] + 1\\n    char_map[char] = right\\n    max_len = max(max_len, right - left + 1)\\n    \\n  return max_len", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n  let map = {};\\n  let left = 0, maxLen = 0;\\n  \\n  for (let right = 0; right < s.length; right++) {\\n    if (map[s[right]] !== undefined && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n};", "TYPESCRIPT": "function lengthOfLongestSubstring(s: string): number {\\n  const map: Record<string, number> = {};\\n  let left = 0, maxLen = 0;\\n  \\n  for (let right = 0; right < s.length; right++) {\\n    if (map[s[right]] !== undefined && map[s[right]] >= left) {\\n      left = map[s[right]] + 1;\\n    }\\n    map[s[right]] = right;\\n    maxLen = Math.max(maxLen, right - left + 1);\\n  }\\n  \\n  return maxLen;\\n}"}	[{"input": "abcabcbb", "output": "3"}, {"input": "bbbbb", "output": "1"}, {"input": "pwwkew", "output": "3"}]	["Use a hash map to store the last seen index of each character.", "Move the left pointer of the window when you see a repeated character."]	2025-07-18 07:05:03.341854	2025-07-26 11:34:50.559	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "ed1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "ed2", "url": "https://www.youtube.com/watch?v=wiGpQwVHdE0", "type": "video", "children": [{"text": ""}]}, {"id": "ed3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(k)"}, {"text": ", where k is the charset size."}]}, {"id": "ed4", "type": "hr", "children": [{"text": ""}]}, {"id": "ed5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "ed6", "type": "p", "children": [{"text": "Given a string "}, {"code": true, "text": "s"}, {"text": ", find the length of the longest substring without repeating characters."}]}, {"id": "ed7", "type": "hr", "children": [{"text": ""}]}, {"id": "ed8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "ed9", "type": "p", "indent": 0, "children": [{"text": "You must use a solution faster than brute force ("}, {"code": true, "text": "O(n^2)"}, {"text": ")."}], "listStyleType": ""}, {"id": "ed10", "type": "p", "indent": 0, "children": [{"text": "Optimal solution is "}, {"bold": true, "text": "O(n)"}, {"text": " using a sliding window."}], "listStyleType": ""}, {"id": "ed11", "type": "p", "indent": 0, "children": [{"text": "Input size up to 50,000 characters."}], "listStyleType": ""}, {"id": "ed12", "type": "p", "indent": 0, "children": [{"text": "Characters can be letters, digits, symbols, or spaces."}], "listStyleType": ""}, {"id": "ed13", "type": "hr", "children": [{"text": ""}]}, {"id": "ed14", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "ed15", "type": "p", "children": [{"text": "Use a "}, {"bold": true, "text": "sliding window"}, {"text": " to keep track of the current substring without repeats."}]}, {"id": "ed16", "type": "p", "children": [{"text": "Expand the window by moving the right pointer. If a character repeats, move the left pointer to shrink the window until all characters are unique."}]}, {"id": "ed17", "type": "hr", "children": [{"text": ""}]}, {"id": "ed18", "type": "h2", "children": [{"text": "‚úÖ Sliding Window Approach (Optimal)"}]}, {"id": "ed19", "type": "p", "children": [{"text": "Use a hash map to store the last index of each character. When a repeat is found, move the left pointer to one past the previous index of that character."}]}, {"id": "ed20", "type": "hr", "children": [{"text": ""}]}, {"id": "ed21", "type": "h3", "children": [{"text": "‚ú® Step-by-step Algorithm"}]}, {"id": "ed22", "type": "p", "indent": 0, "children": [{"bold": true, "text": "Initialize"}, {"text": " a hash map, left pointer at 0, and max length at 0."}], "listStyleType": ""}, {"id": "ed23", "type": "p", "indent": 0, "children": [{"text": "Iterate right pointer over the string:"}], "listStyleType": ""}, {"id": "ed24", "type": "p", "indent": 0, "children": [{"text": "If character is in hash map and its index >= left, move left to index + 1."}], "listStyleType": ""}, {"id": "ed25", "type": "p", "indent": 0, "children": [{"text": "Update hash map with current character's index."}], "listStyleType": ""}, {"id": "ed26", "type": "p", "indent": 0, "children": [{"text": "Update max length as right - left + 1."}], "listStyleType": ""}, {"id": "ed27", "type": "hr", "children": [{"text": ""}]}, {"id": "ed29", "type": "code_block", "children": [{"id": "ed29-1", "type": "code_line", "children": [{"text": "def length_of_longest_substring(s):"}]}, {"id": "ed29-2", "type": "code_line", "children": [{"text": "  char_map = {}"}]}, {"id": "ed29-3", "type": "code_line", "children": [{"text": "  left = max_len = 0"}]}, {"id": "ed29-4", "type": "code_line", "children": [{"text": "  "}]}, {"id": "ed29-5", "type": "code_line", "children": [{"text": "  for right, char in enumerate(s):"}]}, {"id": "ed29-6", "type": "code_line", "children": [{"text": "    if char in char_map and char_map[char] >= left:"}]}, {"id": "ed29-7", "type": "code_line", "children": [{"text": "      left = char_map[char] + 1"}]}, {"id": "ed29-8", "type": "code_line", "children": [{"text": "    char_map[char] = right"}]}, {"id": "ed29-9", "type": "code_line", "children": [{"text": "    max_len = max(max_len, right - left + 1)"}]}, {"id": "ed29-10", "type": "code_line", "children": [{"text": "  "}]}, {"id": "ed29-11", "type": "code_line", "children": [{"text": "  return max_len"}]}]}, {"id": "ed30", "type": "hr", "children": [{"text": ""}]}, {"id": "ed31", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "ed32", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "ed33", "type": "code_block", "children": [{"id": "ed33-1", "type": "code_line", "children": [{"text": "s = \\"abcabcbb\\""}]}, {"id": "ed33-2", "type": "code_line", "children": [{"text": "Longest substring: \\"abc\\""}]}, {"id": "ed33-3", "type": "code_line", "children": [{"text": "Output: 3"}]}]}, {"id": "ed34", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "ed35", "type": "code_block", "children": [{"id": "ed35-1", "type": "code_line", "children": [{"text": "s = \\"bbbbb\\""}]}, {"id": "ed35-2", "type": "code_line", "children": [{"text": "Longest substring: \\"b\\""}]}, {"id": "ed35-3", "type": "code_line", "children": [{"text": "Output: 1"}]}]}, {"id": "ed36", "type": "hr", "children": [{"text": ""}]}, {"id": "ed37", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "ed38", "type": "p", "indent": 0, "children": [{"text": "Empty string"}], "listStyleType": ""}, {"id": "ed39", "type": "p", "indent": 0, "children": [{"text": "All unique characters"}], "listStyleType": ""}, {"id": "ed40", "type": "p", "indent": 0, "children": [{"text": "All identical characters"}], "listStyleType": ""}, {"id": "ed41", "type": "p", "indent": 0, "children": [{"text": "Symbols and spaces"}], "listStyleType": ""}, {"id": "ed42", "type": "hr", "children": [{"text": ""}]}, {"id": "ed43", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "ed44", "type": "table", "children": [{"id": "ed44-1", "type": "tr", "children": [{"id": "ed44-1-1", "type": "th", "children": [{"id": "ed44-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "ed44-1-2", "type": "th", "children": [{"id": "ed44-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "ed44-2", "type": "tr", "children": [{"id": "ed44-2-1", "type": "td", "children": [{"id": "ed44-2-1-1", "type": "p", "children": [{"text": "Sliding Window"}]}]}, {"id": "ed44-2-2", "type": "td", "children": [{"id": "ed44-2-2-1", "type": "p", "children": [{"text": "Expand and shrink window to maintain unique characters"}]}]}]}, {"id": "ed44-3", "type": "tr", "children": [{"id": "ed44-3-1", "type": "td", "children": [{"id": "ed44-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "ed44-3-2", "type": "td", "children": [{"id": "ed44-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "ed44-4", "type": "tr", "children": [{"id": "ed44-4-1", "type": "td", "children": [{"id": "ed44-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "ed44-4-2", "type": "td", "children": [{"id": "ed44-4-2-1", "type": "p", "children": [{"code": true, "text": "O(k)"}]}]}]}, {"id": "ed44-5", "type": "tr", "children": [{"id": "ed44-5-1", "type": "td", "children": [{"id": "ed44-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "ed44-5-2", "type": "td", "children": [{"id": "ed44-5-2-1", "type": "p", "children": [{"text": "Track last seen index for each character"}]}]}]}]}, {"id": "ed45", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"bufio\\"\\n  \\"os\\"\\n)", "CPP": "#include <iostream>\\n#include <string>\\n#include <unordered_map>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUST": "use std::io;\\nuse std::collections::HashMap;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nclass Solution {", "PYTHON": "import sys", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n  char input[1001];\\n  fgets(input, sizeof(input), stdin);\\n  input[strcspn(input, \\"\\\\n\\")] = 0;\\n  int result = lengthOfLongestSubstring(input);\\n  printf(\\"%d\\\\n\\", result);\\n  return 0;\\n}", "GO": "func main() {\\n  scanner := bufio.NewScanner(os.Stdin)\\n  scanner.Scan()\\n  input := scanner.Text()\\n  result := lengthOfLongestSubstring(input)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  int result = lengthOfLongestSubstring(input);\\n  cout << result << endl;\\n  return 0;\\n}", "JAVA": "}\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    Solution sol = new Solution();\\n    int result = sol.lengthOfLongestSubstring(input);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\nresult = length_of_longest_substring(input)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  let input = input.trim().to_string();\\n  let result = length_of_longest_substring(input);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    Solution sol = new Solution();\\n    int result = sol.LengthOfLongestSubstring(input);\\n    Console.WriteLine(result);\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nresult = length_of_longest_substring(input_data)\\nprint(result)", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const result = lengthOfLongestSubstring(input);\\n  console.log(result);\\n});", "TYPESCRIPT": "const fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst result = lengthOfLongestSubstring(input);\\nconsole.log(result);"}	f	t
31e779b1-66a8-4c94-a086-9eb658a644fc	5. Binary Search	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given a sorted array of integers "}, {"code": true, "text": "nums"}, {"text": " and an integer "}, {"code": true, "text": "target"}, {"text": ", return the index if the target is found. If not, return "}, {"code": true, "text": "-1"}, {"text": "."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "You must write an algorithm with "}, {"code": true, "text": "O(log n)"}, {"text": " runtime complexity."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,0,3,5,9,12], target = 9"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: 4"}]}, {"id": "d5-3", "type": "code_line", "children": [{"text": "Explanation: 9 exists at index 4."}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,0,3,5,9,12], target = 2"}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: -1"}]}, {"id": "d7-3", "type": "code_line", "children": [{"text": "Explanation: 2 does not exist in nums."}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= nums.length <= 10^4"}], "listStyleType": ""}, {"id": "d10", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10^4 <= nums[i], target <= 10^4"}], "listStyleType": ""}, {"id": "d11", "type": "p", "indent": 0, "children": [{"code": true, "text": "nums is sorted in ascending order."}], "listStyleType": ""}, {"id": "d12", "type": "p", "indent": 0, "children": [{"code": true, "text": "All values in nums are unique."}], "listStyleType": ""}]	easy	["Array", "Binary Search"]	{"C": "int binarySearch(int* nums, int numsSize, int target) {\\n    // Write your solution here\\n    return -1;\\n}", "GO": "func binarySearch(nums []int, target int) int {\\n    // Write your solution here\\n    return -1\\n}", "CPP": "int binarySearch(vector<int>& nums, int target) {\\n    // Write your solution here\\n    return -1;\\n}", "JAVA": "int binarySearch(int[] nums, int target) {\\n    // Write your solution here\\n    return -1;\\n}", "RUBY": "def binary_search(nums, target)\\n  # Write your solution here\\n  -1\\nend", "RUST": "fn binary_search(nums: &Vec<i32>, target: i32) -> i32 {\\n    // Write your solution here\\n    -1\\n}", "CSHARP": "public int BinarySearch(int[] nums, int target) {\\n    // Write your solution here\\n    return -1;\\n}", "PYTHON": "def binary_search(nums, target):\\n    # Write your solution here\\n    return -1", "JAVASCRIPT": "function binarySearch(nums, target) {\\n    // Write your solution here\\n    return -1;\\n}", "TYPESCRIPT": "function binarySearch(nums: number[], target: number): number {\\n    // Write your solution here\\n    return -1;\\n}"}	{"C": "int binarySearch(int* nums, int numsSize, int target) {\\n    int left = 0;\\n    int right = numsSize - 1;\\n    \\n    while (left <= right) {\\n        int mid = left + (right - left) / 2;\\n        if (nums[mid] == target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}", "GO": "func binarySearch(nums []int, target int) int {\\n    left, right := 0, len(nums)-1\\n    \\n    for left <= right {\\n        mid := left + (right - left) / 2\\n        if nums[mid] == target {\\n            return mid\\n        }\\n        if nums[mid] < target {\\n            left = mid + 1\\n        } else {\\n            right = mid - 1\\n        }\\n    }\\n    \\n    return -1\\n}", "CPP": "int binarySearch(vector<int>& nums, int target) {\\n    int left = 0;\\n    int right = nums.size() - 1;\\n    \\n    while (left <= right) {\\n        int mid = left + (right - left) / 2;\\n        if (nums[mid] == target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}", "JAVA": "int binarySearch(int[] nums, int target) {\\n    int left = 0;\\n    int right = nums.length - 1;\\n    \\n    while (left <= right) {\\n        int mid = left + (right - left) / 2;\\n        if (nums[mid] == target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}", "RUBY": "def binary_search(nums, target)\\n  left = 0\\n  right = nums.length - 1\\n  \\n  while left <= right\\n    mid = (left + right) / 2\\n    if nums[mid] == target\\n      return mid\\n    elsif nums[mid] < target\\n      left = mid + 1\\n    else\\n      right = mid - 1\\n    end\\n  end\\n  \\n  -1\\nend", "RUST": "fn binary_search(nums: &Vec<i32>, target: i32) -> i32 {\\n    let mut left = 0;\\n    let mut right = nums.len() as i32 - 1;\\n    \\n    while left <= right {\\n        let mid = left + (right - left) / 2;\\n        if nums[mid as usize] == target {\\n            return mid;\\n        }\\n        if nums[mid as usize] < target {\\n            left = mid + 1;\\n        } else {\\n            right = mid - 1;\\n        }\\n    }\\n    \\n    -1\\n}", "CSHARP": "public int BinarySearch(int[] nums, int target) {\\n    int left = 0;\\n    int right = nums.Length - 1;\\n    \\n    while (left <= right) {\\n        int mid = left + (right - left) / 2;\\n        if (nums[mid] == target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}", "PYTHON": "def binary_search(nums, target):\\n    left, right = 0, len(nums) - 1\\n    \\n    while left <= right:\\n        mid = (left + right) // 2\\n        if nums[mid] == target:\\n            return mid\\n        elif nums[mid] < target:\\n            left = mid + 1\\n        else:\\n            right = mid - 1\\n            \\n    return -1", "JAVASCRIPT": "function binarySearch(nums, target) {\\n    let left = 0;\\n    let right = nums.length - 1;\\n    \\n    while (left <= right) {\\n        const mid = Math.floor((left + right) / 2);\\n        if (nums[mid] === target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}", "TYPESCRIPT": "function binarySearch(nums: number[], target: number): number {\\n    let left = 0;\\n    let right = nums.length - 1;\\n    \\n    while (left <= right) {\\n        const mid = Math.floor((left + right) / 2);\\n        if (nums[mid] === target) return mid;\\n        if (nums[mid] < target) left = mid + 1;\\n        else right = mid - 1;\\n    }\\n    \\n    return -1;\\n}"}	[{"input": "[1,2,3,4,5],3", "output": "2"}, {"input": "[1,2,3,4,5],6", "output": "-1"}, {"input": "[-1,0,3,5,9,12],9", "output": "4"}]	["Use two pointers to track the search range", "Compare the middle element with the target in each iteration"]	2025-07-18 07:52:08.35156	2025-07-18 07:52:08.35156	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=0Hwpzd-bSck", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(log n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Search for a target value in a sorted array using binary search."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must achieve "}, {"code": true, "text": "O(log n)"}, {"text": " time complexity."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 10,000 elements."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Binary search repeatedly divides the array in half to locate the target efficiently."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Binary Search Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Set "}, {"code": true, "text": "left"}, {"text": " and "}, {"code": true, "text": "right"}, {"text": " pointers at the ends of the array. Check the middle element. If it matches, return its index. If target is less, search left half; if more, search right half."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def binary_search(nums, target):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  left, right = 0, len(nums) - 1"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  while left <= right:"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "    mid = (left + right) // 2"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "    if nums[mid] == target:"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "      return mid"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    elif nums[mid] < target:"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "      left = mid + 1"}]}, {"id": "e19-9", "type": "code_line", "children": [{"text": "    else:"}]}, {"id": "e19-10", "type": "code_line", "children": [{"text": "      right = mid - 1"}]}, {"id": "e19-11", "type": "code_line", "children": [{"text": "  return -1"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,0,3,5,9,12], target = 9"}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: 4"}]}]}, {"id": "e24", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e25", "type": "code_block", "children": [{"id": "e25-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,0,3,5,9,12], target = 2"}]}, {"id": "e25-2", "type": "code_line", "children": [{"text": "Output: -1"}]}]}, {"id": "e26", "type": "hr", "children": [{"text": ""}]}, {"id": "e27", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e28", "type": "p", "indent": 0, "children": [{"text": "Empty array"}], "listStyleType": ""}, {"id": "e29", "type": "p", "indent": 0, "children": [{"text": "Target not present"}], "listStyleType": ""}, {"id": "e30", "type": "p", "indent": 0, "children": [{"text": "Target at first or last index"}], "listStyleType": ""}, {"id": "e31", "type": "hr", "children": [{"text": ""}]}, {"id": "e32", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e33", "type": "table", "children": [{"id": "e33-1", "type": "tr", "children": [{"id": "e33-1-1", "type": "th", "children": [{"id": "e33-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e33-1-2", "type": "th", "children": [{"id": "e33-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e33-2", "type": "tr", "children": [{"id": "e33-2-1", "type": "td", "children": [{"id": "e33-2-1-1", "type": "p", "children": [{"text": "Binary Search"}]}]}, {"id": "e33-2-2", "type": "td", "children": [{"id": "e33-2-2-1", "type": "p", "children": [{"text": "Divide and conquer on sorted array"}]}]}]}, {"id": "e33-3", "type": "tr", "children": [{"id": "e33-3-1", "type": "td", "children": [{"id": "e33-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e33-3-2", "type": "td", "children": [{"id": "e33-3-2-1", "type": "p", "children": [{"code": true, "text": "O(log n)"}]}]}]}, {"id": "e33-4", "type": "tr", "children": [{"id": "e33-4-1", "type": "td", "children": [{"id": "e33-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e33-4-2", "type": "td", "children": [{"id": "e33-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e33-5", "type": "tr", "children": [{"id": "e33-5-1", "type": "td", "children": [{"id": "e33-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e33-5-2", "type": "td", "children": [{"id": "e33-5-2-1", "type": "p", "children": [{"text": "Halve the search space each step"}]}]}]}]}, {"id": "e34", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"fmt\\"\\n    \\"strings\\"\\n    \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <sstream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char input[1000];\\n    fgets(input, sizeof(input), stdin);\\n    \\n    // Find the last comma\\n    char* lastComma = strrchr(input, ',');\\n    *lastComma = '\\\\0';\\n    int target = atoi(lastComma + 1);\\n    \\n    // Parse the array\\n    char* numsStr = input + 1; // Skip the '['\\n    numsStr[strlen(numsStr) - 1] = '\\\\0'; // Remove the ']'\\n    \\n    int nums[100];\\n    int numsSize = 0;\\n    char* token = strtok(numsStr, \\",\\");\\n    while (token != NULL) {\\n        nums[numsSize++] = atoi(token);\\n        token = strtok(NULL, \\",\\");\\n    }\\n    \\n    int result = binarySearch(nums, numsSize, target);\\n    printf(\\"%d\\\\n\\", result);\\n    return 0;\\n}", "GO": "func main() {\\n    var input string\\n    fmt.Scanln(&input)\\n    \\n    lastComma := strings.LastIndex(input, \\",\\")\\n    numsStr := input[:lastComma]\\n    target, _ := strconv.Atoi(input[lastComma+1:])\\n    \\n    numsStr = numsStr[1:len(numsStr)-1]\\n    numStrs := strings.Split(numsStr, \\",\\")\\n    nums := make([]int, len(numStrs))\\n    for i, s := range numStrs {\\n        nums[i], _ = strconv.Atoi(s)\\n    }\\n    \\n    result := binarySearch(nums, target)\\n    fmt.Println(result)\\n}", "CPP": "int main() {\\n    string input;\\n    getline(cin, input);\\n    \\n    size_t pos = input.find_last_of(',');\\n    string numsStr = input.substr(0, pos);\\n    int target = stoi(input.substr(pos + 1));\\n    \\n    numsStr = numsStr.substr(1, numsStr.size() - 2);\\n    stringstream ss(numsStr);\\n    vector<int> nums;\\n    string token;\\n    \\n    while (getline(ss, token, ',')) {\\n        nums.push_back(stoi(token));\\n    }\\n    \\n    int result = binarySearch(nums, target);\\n    cout << result << endl;\\n    return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input = sc.nextLine();\\n        \\n        int commaPos = input.lastIndexOf(',');\\n        String numsStr = input.substring(0, commaPos);\\n        int target = Integer.parseInt(input.substring(commaPos + 1));\\n        \\n        numsStr = numsStr.substring(1, numsStr.length() - 1);\\n        String[] parts = numsStr.split(\\",\\");\\n        int[] nums = new int[parts.length];\\n        for (int i = 0; i < parts.length; i++) {\\n            nums[i] = Integer.parseInt(parts[i]);\\n        }\\n        \\n        Solution sol = new Solution();\\n        int result = sol.binarySearch(nums, target);\\n        System.out.println(result);\\n    }\\n}", "RUBY": "# Parse input and test the function\\ninput = gets.strip\\nparts = input.split(',')\\ntarget = parts[-1].to_i\\nnums_str = parts[0..-2].join(',')\\nnums = nums_str.gsub(/[\\\\[\\\\]]/, '').split(',').map(&:to_i)\\nresult = binary_search(nums, target)\\nputs result", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    let input = input.trim();\\n    let last_comma = input.rfind(',').unwrap();\\n    let nums_str = &input[0..last_comma];\\n    let target: i32 = input[last_comma+1..].parse().unwrap();\\n    \\n    let nums_str = &nums_str[1..nums_str.len()-1];\\n    let nums: Vec<i32> = nums_str.split(',').map(|s| s.parse().unwrap()).collect();\\n    \\n    let result = binary_search(&nums, target);\\n    println!(\\"{}\\", result);\\n}", "CSHARP": "\\n    public static void Main() {\\n        string input = Console.ReadLine();\\n        \\n        int commaPos = input.LastIndexOf(',');\\n        string numsStr = input.Substring(0, commaPos);\\n        int target = int.Parse(input.Substring(commaPos + 1));\\n        \\n        numsStr = numsStr.Substring(1, numsStr.Length - 2);\\n        int[] nums = numsStr.Split(',').Select(int.Parse).ToArray();\\n        \\n        Solution sol = new Solution();\\n        int result = sol.BinarySearch(nums, target);\\n        Console.WriteLine(result);\\n    }\\n}", "PYTHON": "# Parse input and test the function\\ninput_data = sys.stdin.read().strip()\\nparts = input_data.split(',')\\ntarget = int(parts[-1])\\nnums_str = ','.join(parts[:-1])\\nnums = [int(x) for x in nums_str.strip('[]').split(',')]\\nresult = binary_search(nums, target)\\nprint(result)", "JAVASCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const parts = input.split(',');\\n    const target = parseInt(parts[parts.length - 1]);\\n    const numsStr = parts.slice(0, parts.length - 1).join(',');\\n    const nums = JSON.parse(numsStr);\\n    const result = binarySearch(nums, target);\\n    console.log(result);\\n});", "TYPESCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const parts = input.split(',');\\n    const target = parseInt(parts[parts.length - 1]);\\n    const numsStr = parts.slice(0, parts.length - 1).join(',');\\n    const nums = JSON.parse(numsStr);\\n    const result = binarySearch(nums, target);\\n    console.log(result);\\n});"}	f	t
1a4f7ee0-8670-469f-b48c-dafcd8e98653	7. Maximum Subarray	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given an integer array "}, {"code": true, "text": "nums"}, {"text": ", find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]"}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "Output: 6"}]}, {"id": "d4-3", "type": "code_line", "children": [{"text": "Explanation: [4,-1,2,1] has the largest sum = 6."}]}]}, {"id": "d5", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: nums = [1]"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: 1"}]}]}, {"id": "d7", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d8", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= nums.length <= 10^5"}], "listStyleType": ""}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10^4 <= nums[i] <= 10^4"}], "listStyleType": ""}]	medium	["Array", "Divide and Conquer", "Dynamic Programming"]	{"GO": "func maxSubArray(nums []int) int {\\n  // Write your solution here\\n  return 0\\n}", "CPP": "int maxSubArray(vector<int>& nums) {\\n  // Write your solution here\\n  return 0;\\n}", "JAVA": "public int maxSubArray(int[] nums) {\\n  // Write your solution here\\n  return 0;\\n}", "RUBY": "def max_sub_array(nums)\\n  # Write your solution here\\n  0\\nend", "RUST": "fn max_sub_array(nums: Vec<i32>) -> i32 {\\n  // Write your solution here\\n  0\\n}", "CSHARP": "public int MaxSubArray(int[] nums) {\\n  // Write your solution here\\n  return 0;\\n}", "PYTHON": "def max_sub_array(nums):\\n  # Write your solution here\\n  return 0", "JAVASCRIPT": "function maxSubArray(nums) {\\n  // Write your solution here\\n  return 0;\\n}", "TYPESCRIPT": "function maxSubArray(nums: number[]): number {\\n  // Write your solution here\\n  return 0;\\n}"}	{"GO": "func maxSubArray(nums []int) int {\\n  maxSum := nums[0]\\n  currentSum := nums[0]\\n  \\n  for i := 1; i < len(nums); i++ {\\n    if currentSum + nums[i] > nums[i] {\\n      currentSum += nums[i]\\n    } else {\\n      currentSum = nums[i]\\n    }\\n    \\n    if currentSum > maxSum {\\n      maxSum = currentSum\\n    }\\n  }\\n  \\n  return maxSum\\n}", "CPP": "int maxSubArray(vector<int>& nums) {\\n  int maxSum = nums[0];\\n  int currentSum = nums[0];\\n  \\n  for (int i = 1; i < nums.size(); i++) {\\n    currentSum = max(nums[i], currentSum + nums[i]);\\n    maxSum = max(maxSum, currentSum);\\n  }\\n  \\n  return maxSum;\\n}", "JAVA": "public int maxSubArray(int[] nums) {\\n  int maxSum = nums[0];\\n  int currentSum = nums[0];\\n  \\n  for (int i = 1; i < nums.length; i++) {\\n    currentSum = Math.max(nums[i], currentSum + nums[i]);\\n    maxSum = Math.max(maxSum, currentSum);\\n  }\\n  \\n  return maxSum;\\n}", "RUBY": "def max_sub_array(nums)\\n  max_sum = nums[0]\\n  current_sum = nums[0]\\n  \\n  (1...nums.length).each do |i|\\n    current_sum = [nums[i], current_sum + nums[i]].max\\n    max_sum = [max_sum, current_sum].max\\n  end\\n  \\n  max_sum\\nend", "RUST": "fn max_sub_array(nums: Vec<i32>) -> i32 {\\n  let mut max_sum = nums[0];\\n  let mut current_sum = nums[0];\\n  \\n  for i in 1..nums.len() {\\n    current_sum = cmp::max(nums[i], current_sum + nums[i]);\\n    max_sum = cmp::max(max_sum, current_sum);\\n  }\\n  \\n  max_sum\\n}", "CSHARP": "public int MaxSubArray(int[] nums) {\\n  int maxSum = nums[0];\\n  int currentSum = nums[0];\\n  \\n  for (int i = 1; i < nums.Length; i++) {\\n    currentSum = Math.Max(nums[i], currentSum + nums[i]);\\n    maxSum = Math.Max(maxSum, currentSum);\\n  }\\n  \\n  return maxSum;\\n}", "PYTHON": "def max_sub_array(nums):\\n  max_sum = nums[0]\\n  current_sum = nums[0]\\n  \\n  for i in range(1, len(nums)):\\n    current_sum = max(nums[i], current_sum + nums[i])\\n    max_sum = max(max_sum, current_sum)\\n    \\n  return max_sum", "JAVASCRIPT": "function maxSubArray(nums) {\\n  let maxSum = nums[0];\\n  let currentSum = nums[0];\\n  \\n  for (let i = 1; i < nums.length; i++) {\\n    currentSum = Math.max(nums[i], currentSum + nums[i]);\\n    maxSum = Math.max(maxSum, currentSum);\\n  }\\n  \\n  return maxSum;\\n}", "TYPESCRIPT": "function maxSubArray(nums) {\\n  let maxSum = nums[0];\\n  let currentSum = nums[0];\\n  \\n  for (let i = 1; i < nums.length; i++) {\\n    currentSum = Math.max(nums[i], currentSum + nums[i]);\\n    maxSum = Math.max(maxSum, currentSum);\\n  }\\n  \\n  return maxSum;\\n}"}	[{"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6"}, {"input": "[1]", "output": "1"}, {"input": "[5,4,-1,7,8]", "output": "23"}, {"input": "[-1]", "output": "-1"}]	["If you've figured out the O(n) solution, try coding another solution using the divide and conquer approach", "Keep track of the current sum and the maximum sum found so far"]	2025-07-18 10:47:10.17675	2025-07-18 10:47:10.17675	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=AHZpyENo7k4", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Find the contiguous subarray with the largest sum in an integer array."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must run in linear time."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 100,000 elements."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use Kadane's algorithm: at each position, decide whether to extend the current subarray or start a new one."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Kadane's Algorithm (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Iterate through the array, keeping track of the current sum and the maximum sum found so far."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def max_sub_array(nums):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  max_sum = curr_sum = nums[0]"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  for num in nums[1:]: "}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "    curr_sum = max(num, curr_sum + num)"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "    max_sum = max(max_sum, curr_sum)"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "  return max_sum"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]"}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: 6"}]}]}, {"id": "e24", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e25", "type": "code_block", "children": [{"id": "e25-1", "type": "code_line", "children": [{"text": "Input: nums = [1]"}]}, {"id": "e25-2", "type": "code_line", "children": [{"text": "Output: 1"}]}]}, {"id": "e26", "type": "hr", "children": [{"text": ""}]}, {"id": "e27", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e28", "type": "p", "indent": 0, "children": [{"text": "All negative numbers"}], "listStyleType": ""}, {"id": "e29", "type": "p", "indent": 0, "children": [{"text": "Single element array"}], "listStyleType": ""}, {"id": "e30", "type": "p", "indent": 0, "children": [{"text": "Maximum subarray is at the start or end"}], "listStyleType": ""}, {"id": "e31", "type": "hr", "children": [{"text": ""}]}, {"id": "e32", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e33", "type": "table", "children": [{"id": "e33-1", "type": "tr", "children": [{"id": "e33-1-1", "type": "th", "children": [{"id": "e33-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e33-1-2", "type": "th", "children": [{"id": "e33-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e33-2", "type": "tr", "children": [{"id": "e33-2-1", "type": "td", "children": [{"id": "e33-2-1-1", "type": "p", "children": [{"text": "Kadane's Algorithm"}]}]}, {"id": "e33-2-2", "type": "td", "children": [{"id": "e33-2-2-1", "type": "p", "children": [{"text": "Track current and max sum"}]}]}]}, {"id": "e33-3", "type": "tr", "children": [{"id": "e33-3-1", "type": "td", "children": [{"id": "e33-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e33-3-2", "type": "td", "children": [{"id": "e33-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e33-4", "type": "tr", "children": [{"id": "e33-4-1", "type": "td", "children": [{"id": "e33-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e33-4-2", "type": "td", "children": [{"id": "e33-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e33-5", "type": "tr", "children": [{"id": "e33-5-1", "type": "td", "children": [{"id": "e33-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e33-5-2", "type": "td", "children": [{"id": "e33-5-2-1", "type": "p", "children": [{"text": "Start new subarray if sum drops below current element"}]}]}]}]}, {"id": "e34", "type": "p", "children": [{"text": ""}]}]	{"GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"strings\\"\\n  \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <sstream>\\n#include <climits>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;\\nuse std::cmp;", "CSHARP": "using System;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  // Parse the array\\n  input = input[1:len(input)-1]\\n  parts := strings.Split(input, \\",\\")\\n  nums := make([]int, len(parts))\\n  for i, s := range parts {\\n    nums[i], _ = strconv.Atoi(s)\\n  }\\n  \\n  result := maxSubArray(nums)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  // Parse the array\\n  input = input.substr(1, input.size() - 2);\\n  stringstream ss(input);\\n  vector<int> nums;\\n  string token;\\n  \\n  while (getline(ss, token, ',')) {\\n    nums.push_back(stoi(token));\\n  }\\n  \\n  int result = maxSubArray(nums);\\n  cout << result << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    // Parse the array\\n    input = input.substring(1, input.length() - 1);\\n    String[] parts = input.split(\\",\\");\\n    int[] nums = new int[parts.length];\\n    for (int i = 0; i < parts.length; i++) {\\n      nums[i] = Integer.parseInt(parts[i]);\\n    }\\n    \\n    Solution sol = new Solution();\\n    int result = sol.maxSubArray(nums);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\nnums = eval(input)\\nresult = max_sub_array(nums)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  // Parse the array\\n  let input = input.trim();\\n  let input = &input[1..input.len()-1];\\n  let nums: Vec<i32> = input.split(',').map(|s| s.parse().unwrap()).collect();\\n  \\n  let result = max_sub_array(nums);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    // Parse the array\\n    input = input.Substring(1, input.Length - 2);\\n    int[] nums = input.Split(',').Select(int.Parse).ToArray();\\n    \\n    Solution sol = new Solution();\\n    int result = sol.MaxSubArray(nums);\\n    Console.WriteLine(result);\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nnums = eval(input_data)\\nresult = max_sub_array(nums)\\nprint(result)", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const nums = JSON.parse(input);\\n  const result = maxSubArray(nums);\\n  console.log(result);\\n});", "TYPESCRIPT": "// Node.js type declarations for compatibility\\ndeclare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst nums = JSON.parse(input);\\nconst result = maxSubArray(nums);\\nconsole.log(result);"}	f	t
2dc17b29-d21b-47dc-9f4b-761e82bac6ff	8. Palindrome Number	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given an integer "}, {"code": true, "text": "x"}, {"text": ", return "}, {"code": true, "text": "true"}, {"text": " if "}, {"code": true, "text": "x"}, {"text": " is a palindrome, and "}, {"code": true, "text": "false"}, {"text": " otherwise."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "An integer is a palindrome when it reads the same backward as forward."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: x = 121"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: true"}]}, {"id": "d5-3", "type": "code_line", "children": [{"text": "Explanation: 121 reads as 121 from left to right and from right to left."}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: x = -121"}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: false"}]}, {"id": "d7-3", "type": "code_line", "children": [{"text": "Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Not a palindrome."}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "-2^31 <= x <= 2^31 - 1"}], "listStyleType": ""}]	easy	["Math", "String"]	{"C": "bool isPalindrome(int x) {\\n    // Write your solution here\\n    return false;\\n}", "GO": "func isPalindrome(x int) bool {\\n    // Write your solution here\\n    return false\\n}", "CPP": "bool isPalindrome(int x) {\\n    // Write your solution here\\n    return false;\\n}", "JAVA": "boolean isPalindrome(int x) {\\n    // Write your solution here\\n    return false;\\n}", "RUBY": "def is_palindrome(x)\\n  # Write your solution here\\n  false\\nend", "RUST": "fn is_palindrome(x: i32) -> bool {\\n    // Write your solution here\\n    false\\n}", "CSHARP": "public bool IsPalindrome(int x) {\\n    // Write your solution here\\n    return false;\\n}", "PYTHON": "def is_palindrome(x):\\n    # Write your solution here\\n    return False", "JAVASCRIPT": "function isPalindrome(x) {\\n    // Write your solution here\\n    return false;\\n}", "TYPESCRIPT": "function isPalindrome(x: number): boolean {\\n    // Write your solution here\\n    return false;\\n}"}	{"C": "bool isPalindrome(int x) {\\n    // Negative numbers are not palindromes\\n    if (x < 0) return false;\\n    \\n    // Single digit numbers are palindromes\\n    if (x < 10) return true;\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if (x % 10 == 0 && x != 0) return false;\\n    \\n    int reversed = 0;\\n    while (x > reversed) {\\n        reversed = reversed * 10 + x % 10;\\n        x /= 10;\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    return x == reversed || x == reversed / 10;\\n}", "GO": "func isPalindrome(x int) bool {\\n    if x < 0 {\\n        return false\\n    }\\n    \\n    original := x\\n    reversed := 0\\n    \\n    for x > 0 {\\n        digit := x % 10\\n        reversed = reversed * 10 + digit\\n        x /= 10\\n    }\\n    \\n    return original == reversed\\n}", "CPP": "bool isPalindrome(int x) {\\n    // Negative numbers are not palindromes\\n    if (x < 0) return false;\\n    \\n    // Single digit numbers are palindromes\\n    if (x < 10) return true;\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if (x % 10 == 0 && x != 0) return false;\\n    \\n    int reversed = 0;\\n    while (x > reversed) {\\n        reversed = reversed * 10 + x % 10;\\n        x /= 10;\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    return x == reversed || x == reversed / 10;\\n}", "JAVA": "boolean isPalindrome(int x) {\\n    // Negative numbers are not palindromes\\n    if (x < 0) return false;\\n    \\n    // Single digit numbers are palindromes\\n    if (x < 10) return true;\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if (x % 10 == 0 && x != 0) return false;\\n    \\n    int reversed = 0;\\n    while (x > reversed) {\\n        reversed = reversed * 10 + x % 10;\\n        x /= 10;\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    return x == reversed || x == reversed / 10;\\n}", "RUBY": "def is_palindrome(x)\\n  # Negative numbers are not palindromes\\n  return false if x < 0\\n  \\n  # Single digit numbers are palindromes\\n  return true if x < 10\\n  \\n  # Numbers ending with 0 are not palindromes (except 0 itself)\\n  return false if x % 10 == 0 && x != 0\\n  \\n  reversed = 0\\n  while x > reversed\\n    reversed = reversed * 10 + x % 10\\n    x /= 10\\n  end\\n  \\n  # When the length is odd, we need to get rid of the middle digit\\n  x == reversed || x == reversed / 10\\nend", "RUST": "fn is_palindrome(x: i32) -> bool {\\n    // Negative numbers are not palindromes\\n    if x < 0 {\\n        return false;\\n    }\\n    \\n    // Single digit numbers are palindromes\\n    if x < 10 {\\n        return true;\\n    }\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if x % 10 == 0 && x != 0 {\\n        return false;\\n    }\\n    \\n    let mut original = x;\\n    let mut reversed = 0;\\n    \\n    while original > reversed {\\n        reversed = reversed * 10 + original % 10;\\n        original /= 10;\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    original == reversed || original == reversed / 10\\n}", "CSHARP": "public bool IsPalindrome(int x) {\\n    // Negative numbers are not palindromes\\n    if (x < 0) return false;\\n    \\n    // Single digit numbers are palindromes\\n    if (x < 10) return true;\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if (x % 10 == 0 && x != 0) return false;\\n    \\n    int reversed = 0;\\n    while (x > reversed) {\\n        reversed = reversed * 10 + x % 10;\\n        x /= 10;\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    return x == reversed || x == reversed / 10;\\n}", "PYTHON": "def is_palindrome(x):\\n    # Negative numbers are not palindromes\\n    if x < 0:\\n        return False\\n    \\n    # Single digit numbers are palindromes\\n    if x < 10:\\n        return True\\n    \\n    # Numbers ending with 0 are not palindromes (except 0 itself)\\n    if x % 10 == 0 and x != 0:\\n        return False\\n    \\n    reversed_num = 0\\n    while x > reversed_num:\\n        reversed_num = reversed_num * 10 + x % 10\\n        x //= 10\\n    \\n    # When the length is odd, we need to get rid of the middle digit\\n    return x == reversed_num or x == reversed_num // 10", "JAVASCRIPT": "function isPalindrome(x) {\\n    // Negative numbers are not palindromes\\n    if (x < 0) return false;\\n    \\n    // Single digit numbers are palindromes\\n    if (x < 10) return true;\\n    \\n    // Numbers ending with 0 are not palindromes (except 0 itself)\\n    if (x % 10 === 0 && x !== 0) return false;\\n    \\n    let reversed = 0;\\n    while (x > reversed) {\\n        reversed = reversed * 10 + x % 10;\\n        x = Math.floor(x / 10);\\n    }\\n    \\n    // When the length is odd, we need to get rid of the middle digit\\n    return x === reversed || x === Math.floor(reversed / 10);\\n}", "TYPESCRIPT": "function isPalindrome(x: number): boolean {\\n    if (x < 0) return false;\\n    \\n    const str = x.toString();\\n    let left = 0;\\n    let right = str.length - 1;\\n    \\n    while (left < right) {\\n        if (str[left] !== str[right]) return false;\\n        left++;\\n        right--;\\n    }\\n    \\n    return true;\\n}"}	[{"input": "121", "output": "true"}, {"input": "-121", "output": "false"}, {"input": "10", "output": "false"}, {"input": "12321", "output": "true"}]	["Could you solve it without converting the integer to a string?", "Try reversing the digits of the number", "Be careful with negative numbers and numbers ending with 0"]	2025-07-18 11:55:15.745229	2025-07-18 11:55:15.745229	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://youtu.be/0j7879JOgIU?si=wt0J87ZFgf6xy1d5&t=3273", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(log_{10}(x))"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Check if an integer reads the same forward and backward."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Negative numbers are not palindromes."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "No extra space for string conversion (optimal solution)."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Reverse half of the number and compare with the other half."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Half-Reversal Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Iteratively build the reversed number from the last digits and compare with the remaining part."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def is_palindrome(x):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  if x < 0 or (x % 10 == 0 and x != 0):"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "    return False"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  rev = 0"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "  while x > rev:"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "    rev = rev * 10 + x % 10"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    x //= 10"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "  return x == rev or x == rev // 10"}]}]}, {"id": "e20", "type": "hr", "children": [{"text": ""}]}, {"id": "e21", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e22", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e23", "type": "code_block", "children": [{"id": "e23-1", "type": "code_line", "children": [{"text": "Input: x = 121"}]}, {"id": "e23-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "e24", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e25", "type": "code_block", "children": [{"id": "e25-1", "type": "code_line", "children": [{"text": "Input: x = -121"}]}, {"id": "e25-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "e26", "type": "hr", "children": [{"text": ""}]}, {"id": "e27", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e28", "type": "p", "indent": 0, "children": [{"text": "Negative numbers"}], "listStyleType": ""}, {"id": "e29", "type": "p", "indent": 0, "children": [{"text": "Numbers ending with zero (except zero itself)"}], "listStyleType": ""}, {"id": "e30", "type": "p", "indent": 0, "children": [{"text": "Single digit numbers"}], "listStyleType": ""}, {"id": "e31", "type": "hr", "children": [{"text": ""}]}, {"id": "e32", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e33", "type": "table", "children": [{"id": "e33-1", "type": "tr", "children": [{"id": "e33-1-1", "type": "th", "children": [{"id": "e33-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e33-1-2", "type": "th", "children": [{"id": "e33-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e33-2", "type": "tr", "children": [{"id": "e33-2-1", "type": "td", "children": [{"id": "e33-2-1-1", "type": "p", "children": [{"text": "Half-Reversal"}]}]}, {"id": "e33-2-2", "type": "td", "children": [{"id": "e33-2-2-1", "type": "p", "children": [{"text": "Reverse half the digits and compare"}]}]}]}, {"id": "e33-3", "type": "tr", "children": [{"id": "e33-3-1", "type": "td", "children": [{"id": "e33-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e33-3-2", "type": "td", "children": [{"id": "e33-3-2-1", "type": "p", "children": [{"code": true, "text": "O(log_{10}(x))"}]}]}]}, {"id": "e33-4", "type": "tr", "children": [{"id": "e33-4-1", "type": "td", "children": [{"id": "e33-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e33-4-2", "type": "td", "children": [{"id": "e33-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e33-5", "type": "tr", "children": [{"id": "e33-5-1", "type": "td", "children": [{"id": "e33-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e33-5-2", "type": "td", "children": [{"id": "e33-5-2-1", "type": "p", "children": [{"text": "Compare halves, not full reversal"}]}]}]}]}, {"id": "e34", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdbool.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <string>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\n\\nclass Solution {", "PYTHON": "import sys", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    int x;\\n    scanf(\\"%d\\", &x);\\n    \\n    bool result = isPalindrome(x);\\n    printf(\\"%s\\\\n\\", result ? \\"true\\" : \\"false\\");\\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    scanner.Scan()\\n    input := scanner.Text()\\n    \\n    x, _ := strconv.Atoi(input)\\n    \\n    result := isPalindrome(x)\\n    fmt.Println(result)\\n}", "CPP": "int main() {\\n    int x;\\n    cin >> x;\\n    \\n    bool result = isPalindrome(x);\\n    cout << (result ? \\"true\\" : \\"false\\") << endl;\\n    return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int x = sc.nextInt();\\n        \\n        Solution sol = new Solution();\\n        boolean result = sol.isPalindrome(x);\\n        System.out.println(result);\\n    }\\n}", "RUBY": "# Parse input and test the function\\nx = gets.to_i\\nresult = is_palindrome(x)\\nputs result", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let x: i32 = input.trim().parse().unwrap();\\n    \\n    let result = is_palindrome(x);\\n    println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        int x = int.Parse(Console.ReadLine());\\n        \\n        Solution sol = new Solution();\\n        bool result = sol.IsPalindrome(x);\\n        Console.WriteLine(result.ToString().ToLower());\\n    }\\n}", "PYTHON": "# Parse input and test the function\\nx = int(sys.stdin.read().strip())\\nresult = is_palindrome(x)\\nprint(str(result).lower())", "JAVASCRIPT": "// Test the function\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n    const x = parseInt(input);\\n    const result = isPalindrome(x);\\n    console.log(result);\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet input = '';\\nrl.on('line', (line: string) => input += line.trim());\\nrl.on('close', () => {\\n    const x = parseInt(input);\\n    const result = isPalindrome(x);\\n    console.log(result.toString());\\n});"}	f	t
4ed5c8d7-5bfd-4335-8aea-3c85ea3f3205	14. Rotate Array	[{"id": "d1", "type": "p", "children": [{"text": "Given an array "}, {"code": true, "text": "nums"}, {"text": " and an integer "}, {"code": true, "text": "k"}, {"text": ", rotate the array to the right by "}, {"code": true, "text": "k"}, {"text": " steps. Try to solve it in-place with O(1) extra space."}]}, {"id": "d2", "type": "p", "children": [{"bold": true, "text": "Examples:"}]}, {"id": "d3", "type": "code_block", "children": [{"id": "d3-1", "type": "code_line", "children": [{"text": "Input: nums = [1,2,3,4,5,6,7], k = 3"}]}, {"id": "d3-2", "type": "code_line", "children": [{"text": "Output: [5,6,7,1,2,3,4]"}]}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,-100,3,99], k = 2"}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "Output: [3,99,-1,-100]"}]}]}, {"id": "d5", "type": "p", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d6", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= nums.length <= 10^5"}], "listStyleType": ""}, {"id": "d7", "type": "p", "indent": 0, "children": [{"code": true, "text": "-2^31 <= nums[i] <= 2^31 - 1"}], "listStyleType": ""}, {"id": "d8", "type": "p", "indent": 0, "children": [{"code": true, "text": "0 <= k <= 10^5"}], "listStyleType": ""}]	medium	["Array", "Math", "Two Pointers"]	{"C": "void rotate(int* nums, int numsSize, int k) {\\n    // Write your solution here\\n}", "GO": "func rotate(nums []int, k int) {\\n    // Write your solution here\\n}", "CPP": "void rotate(vector<int>& nums, int k) {\\n    // Write your solution here\\n}", "JAVA": "void rotate(int[] nums, int k) {\\n    // Write your solution here\\n}", "RUBY": "def rotate(nums, k)\\n  # Write your solution here\\nend", "RUST": "fn rotate(nums: &mut Vec<i32>, k: i32) {\\n    // Write your solution here\\n}", "CSHARP": "public void Rotate(int[] nums, int k) {\\n    // Write your solution here\\n}", "PYTHON": "def rotate(nums, k):\\n    # Write your solution here\\n    pass", "JAVASCRIPT": "var rotate = function(nums, k) {\\n    // Write your solution here\\n};", "TYPESCRIPT": "function rotate(nums: number[], k: number): void {\\n    // Write your solution here\\n}"}	{"C": "void rotate(int* nums, int numsSize, int k) {\\n    if (numsSize <= 1) return;\\n    k = k % numsSize;\\n    if (k == 0) return;\\n    \\n    // Create a temporary array\\n    int* temp = (int*)malloc(numsSize * sizeof(int));\\n    \\n    // Copy original array to temp\\n    for (int i = 0; i < numsSize; i++) {\\n        temp[i] = nums[i];\\n    }\\n    \\n    // Place elements in their rotated positions\\n    for (int i = 0; i < numsSize; i++) {\\n        nums[(i + k) % numsSize] = temp[i];\\n    }\\n    \\n    free(temp);\\n}", "GO": "func rotate(nums []int, k int) {\\n    n := len(nums)\\n    if n == 0 {\\n        return\\n    }\\n    \\n    k = k % n\\n    \\n    // Reverse the entire array\\n    reverse(nums, 0, n-1)\\n    // Reverse the first k elements\\n    reverse(nums, 0, k-1)\\n    // Reverse the remaining elements\\n    reverse(nums, k, n-1)\\n}\\n\\nfunc reverse(nums []int, start, end int) {\\n    for start < end {\\n        nums[start], nums[end] = nums[end], nums[start]\\n        start++\\n        end--\\n    }\\n}", "CPP": "void rotate(vector<int>& nums, int k) {\\n    int n = nums.size();\\n    if (n <= 1) return;\\n    k = k % n;\\n    if (k == 0) return;\\n    \\n    // Create a copy of the array\\n    vector<int> temp = nums;\\n    \\n    // Place elements in their rotated positions\\n    for (int i = 0; i < n; i++) {\\n        nums[(i + k) % n] = temp[i];\\n    }\\n}", "JAVA": "void rotate(int[] nums, int k) {\\n    int n = nums.length;\\n    k = k % n;\\n    \\n    // Reverse the entire array\\n    reverse(nums, 0, n - 1);\\n    // Reverse the first k elements\\n    reverse(nums, 0, k - 1);\\n    // Reverse the remaining elements\\n    reverse(nums, k, n - 1);\\n}\\n\\nprivate void reverse(int[] nums, int start, int end) {\\n    while (start < end) {\\n        int temp = nums[start];\\n        nums[start] = nums[end];\\n        nums[end] = temp;\\n        start++;\\n        end--;\\n    }\\n}", "RUBY": "def rotate(nums, k)\\n  n = nums.length\\n  return if n == 0\\n  \\n  k = k % n\\n  \\n  # Reverse the entire array\\n  nums.reverse!\\n  \\n  # Reverse the first k elements\\n  nums[0...k] = nums[0...k].reverse\\n  \\n  # Reverse the remaining elements\\n  nums[k..-1] = nums[k..-1].reverse\\nend", "RUST": "fn rotate(nums: &mut Vec<i32>, k: i32) {\\n    let n = nums.len();\\n    if n == 0 {\\n        return;\\n    }\\n    \\n    let k = (k as usize) % n;\\n    \\n    // Reverse the entire array\\n    nums.reverse();\\n    // Reverse the first k elements\\n    nums[0..k].reverse();\\n    // Reverse the remaining elements\\n    nums[k..].reverse();\\n}", "CSHARP": "public void Rotate(int[] nums, int k) {\\n    int n = nums.Length;\\n    k = k % n;\\n    \\n    // Reverse the entire array\\n    Array.Reverse(nums);\\n    \\n    // Reverse the first k elements\\n    Array.Reverse(nums, 0, k);\\n    \\n    // Reverse the remaining elements\\n    Array.Reverse(nums, k, n - k);\\n}", "PYTHON": "def rotate(nums, k):\\n    n = len(nums)\\n    k = k % n\\n    \\n    # Reverse the entire array\\n    nums.reverse()\\n    \\n    # Reverse the first k elements\\n    nums[:k] = nums[:k][::-1]\\n    \\n    # Reverse the remaining elements\\n    nums[k:] = nums[k:][::-1]", "JAVASCRIPT": "var rotate = function(nums, k) {\\n    k = k % nums.length;\\n    \\n    // Reverse the entire array\\n    reverse(nums, 0, nums.length - 1);\\n    // Reverse the first k elements\\n    reverse(nums, 0, k - 1);\\n    // Reverse the remaining elements\\n    reverse(nums, k, nums.length - 1);\\n    \\n    function reverse(arr, start, end) {\\n        while (start < end) {\\n            const temp = arr[start];\\n            arr[start] = arr[end];\\n            arr[end] = temp;\\n            start++;\\n            end--;\\n        }\\n    }\\n};", "TYPESCRIPT": "function rotate(nums: number[], k: number): void {\\n    const n = nums.length;\\n    k = k % n;\\n    \\n    // Reverse the entire array\\n    reverse(nums, 0, n - 1);\\n    // Reverse the first k elements\\n    reverse(nums, 0, k - 1);\\n    // Reverse the remaining elements\\n    reverse(nums, k, n - 1);\\n    \\n    function reverse(arr: number[], start: number, end: number): void {\\n        while (start < end) {\\n            const temp = arr[start];\\n            arr[start] = arr[end];\\n            arr[end] = temp;\\n            start++;\\n            end--;\\n        }\\n    }\\n}"}	[{"input": "[1,2,3,4,5,6,7]\\n3", "output": "[5,6,7,1,2,3,4]"}, {"input": "[-1,-100,3,99]\\n2", "output": "[3,99,-1,-100]"}]	["The easiest solution would use additional memory and that is perfectly fine.", "The actual trick comes when trying to solve this problem without using any extra space. This means you need to use the original array somehow to move the elements around.", "Try using cyclic replacements.", "Another approach is to reverse the array (or parts of it) to obtain the desired result."]	2025-07-20 11:14:02.24069	2025-07-20 11:14:02.24069	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "url": "https://www.youtube.com/watch?v=Z7_nMTHROZo", "type": "video", "children": [{"text": ""}]}, {"id": "e2", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n"}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n"}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e3", "type": "hr", "children": [{"text": ""}]}, {"id": "e4", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e5", "type": "p", "children": [{"text": "Rotate an array to the right by k steps. The rotation should be done in-place with constant extra space."}]}, {"id": "e6", "type": "hr", "children": [{"text": ""}]}, {"id": "e7", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e8", "type": "p", "children": [{"text": "The optimal solution uses array reversal. First, reverse the entire array. Then, reverse the first k elements, and finally reverse the remaining n - k elements."}]}, {"id": "e9", "type": "hr", "children": [{"text": ""}]}, {"id": "e10", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e11", "type": "code_block", "children": [{"id": "e11-1", "type": "code_line", "children": [{"text": "def rotate(nums, k):"}]}, {"id": "e11-2", "type": "code_line", "children": [{"text": "  n = len(nums)"}]}, {"id": "e11-3", "type": "code_line", "children": [{"text": "  k = k % n"}]}, {"id": "e11-4", "type": "code_line", "children": [{"text": "  nums.reverse()"}]}, {"id": "e11-5", "type": "code_line", "children": [{"text": "  nums[:k] = reversed(nums[:k])"}]}, {"id": "e11-6", "type": "code_line", "children": [{"text": "  nums[k:] = reversed(nums[k:])"}]}]}, {"id": "e12", "type": "hr", "children": [{"text": ""}]}, {"id": "e13", "type": "h2", "children": [{"text": "üß™ Examples"}]}, {"id": "e14", "type": "h3", "children": [{"text": "Example 1:"}]}, {"id": "e15", "type": "code_block", "children": [{"id": "e15-1", "type": "code_line", "children": [{"text": "Input: nums = [1,2,3,4,5,6,7], k = 3"}]}, {"id": "e15-2", "type": "code_line", "children": [{"text": "Output: [5,6,7,1,2,3,4]"}]}]}, {"id": "e16", "type": "h3", "children": [{"text": "Example 2:"}]}, {"id": "e17", "type": "code_block", "children": [{"id": "e17-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,-100,3,99], k = 2"}]}, {"id": "e17-2", "type": "code_line", "children": [{"text": "Output: [3,99,-1,-100]"}]}]}, {"id": "e18", "type": "hr", "children": [{"text": ""}]}, {"id": "e19", "type": "h2", "children": [{"text": "üßä Edge Cases"}]}, {"id": "e20", "type": "p", "indent": 0, "children": [{"text": "k = 0 (no rotation)"}], "listStyleType": ""}, {"id": "e21", "type": "p", "indent": 0, "children": [{"text": "k >= nums.length (use k % nums.length)"}], "listStyleType": ""}, {"id": "e22", "type": "hr", "children": [{"text": ""}]}, {"id": "e23", "type": "h2", "children": [{"text": "üìö Summary"}]}, {"id": "e24", "type": "table", "children": [{"id": "e24-1", "type": "tr", "children": [{"id": "e24-1-1", "type": "th", "children": [{"id": "e24-1-1-1", "type": "p", "children": [{"text": "Technique"}]}]}, {"id": "e24-1-2", "type": "th", "children": [{"id": "e24-1-2-1", "type": "p", "children": [{"text": "Description"}]}]}]}, {"id": "e24-2", "type": "tr", "children": [{"id": "e24-2-1", "type": "td", "children": [{"id": "e24-2-1-1", "type": "p", "children": [{"text": "Array Reversal"}]}]}, {"id": "e24-2-2", "type": "td", "children": [{"id": "e24-2-2-1", "type": "p", "children": [{"text": "Reverse the whole array, then reverse the first k and last n-k elements"}]}]}]}, {"id": "e24-3", "type": "tr", "children": [{"id": "e24-3-1", "type": "td", "children": [{"id": "e24-3-1-1", "type": "p", "children": [{"text": "Time Complexity"}]}]}, {"id": "e24-3-2", "type": "td", "children": [{"id": "e24-3-2-1", "type": "p", "children": [{"code": true, "text": "O(n)"}]}]}]}, {"id": "e24-4", "type": "tr", "children": [{"id": "e24-4-1", "type": "td", "children": [{"id": "e24-4-1-1", "type": "p", "children": [{"text": "Space Complexity"}]}]}, {"id": "e24-4-2", "type": "td", "children": [{"id": "e24-4-2-1", "type": "p", "children": [{"code": true, "text": "O(1)"}]}]}]}, {"id": "e24-5", "type": "tr", "children": [{"id": "e24-5-1", "type": "td", "children": [{"id": "e24-5-1-1", "type": "p", "children": [{"text": "Key Insight"}]}]}, {"id": "e24-5-2", "type": "td", "children": [{"id": "e24-5-2-1", "type": "p", "children": [{"text": "Three reversals achieve rotation in-place"}]}]}]}]}, {"id": "e25", "type": "p", "children": [{"text": ""}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n    \\"bufio\\"\\n    \\"fmt\\"\\n    \\"os\\"\\n    \\"strings\\"\\n    \\"strconv\\"\\n    \\"encoding/json\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <string>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "require 'json'", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\nclass Solution {", "PYTHON": "import sys\\nimport json", "JAVASCRIPT": "", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;"}	{"C": "int main() {\\n    char buffer[1024];\\n    fgets(buffer, sizeof(buffer), stdin);\\n    \\n    // Parse input array\\n    int numsSize = 0;\\n    int* nums = NULL;\\n    char* token;\\n    \\n    // Skip the opening bracket\\n    token = strtok(buffer + 1, \\",]\\");\\n    while (token != NULL) {\\n        nums = (int*)realloc(nums, (numsSize + 1) * sizeof(int));\\n        nums[numsSize++] = atoi(token);\\n        token = strtok(NULL, \\",]\\");\\n    }\\n    \\n    // Parse k\\n    int k;\\n    scanf(\\"%d\\", &k);\\n    \\n    rotate(nums, numsSize, k);\\n    \\n    // Print result\\n    printf(\\"[\\");\\n    for (int i = 0; i < numsSize; i++) {\\n        printf(\\"%d\\", nums[i]);\\n        if (i < numsSize - 1) {\\n            printf(\\",\\");\\n        }\\n    }\\n    printf(\\"]\\");\\n    \\n    free(nums);\\n    return 0;\\n}", "GO": "func main() {\\n    scanner := bufio.NewScanner(os.Stdin)\\n    \\n    // Read nums array\\n    scanner.Scan()\\n    numsStr := scanner.Text()\\n    numsStr = numsStr[1:len(numsStr)-1]\\n    \\n    var nums []int\\n    if numsStr != \\"\\" {\\n        for _, numStr := range strings.Split(numsStr, \\",\\") {\\n            num, _ := strconv.Atoi(numStr)\\n            nums = append(nums, num)\\n        }\\n    }\\n    \\n    // Read k\\n    scanner.Scan()\\n    k, _ := strconv.Atoi(scanner.Text())\\n    \\n    rotate(nums, k)\\n    \\n    // Print result\\n    jsonResult, _ := json.Marshal(nums)\\n    fmt.Println(string(jsonResult))\\n}", "CPP": "int main() {\\n    string line;\\n    getline(cin, line);\\n    \\n    // Parse input array\\n    line = line.substr(1, line.length() - 2);\\n    vector<int> nums;\\n    size_t pos = 0;\\n    string token;\\n    while ((pos = line.find(\\",\\")) != string::npos) {\\n        token = line.substr(0, pos);\\n        nums.push_back(stoi(token));\\n        line.erase(0, pos + 1);\\n    }\\n    if (!line.empty()) {\\n        nums.push_back(stoi(line));\\n    }\\n    \\n    // Parse k\\n    int k;\\n    cin >> k;\\n    \\n    rotate(nums, k);\\n    \\n    // Print result\\n    cout << \\"[\\";\\n    for (int i = 0; i < nums.size(); i++) {\\n        cout << nums[i];\\n        if (i < nums.size() - 1) {\\n            cout << \\",\\";\\n        }\\n    }\\n    cout << \\"]\\";\\n    \\n    return 0;\\n}", "JAVA": "}\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String numsStr = sc.nextLine().trim();\\n        int k = Integer.parseInt(sc.nextLine().trim());\\n        \\n        // Parse input array\\n        numsStr = numsStr.substring(1, numsStr.length() - 1);\\n        String[] numStrs = numsStr.split(\\",\\");\\n        int[] nums = new int[numStrs.length];\\n        for (int i = 0; i < numStrs.length; i++) {\\n            nums[i] = Integer.parseInt(numStrs[i]);\\n        }\\n        \\n        Solution sol = new Solution();\\n        sol.rotate(nums, k);\\n        \\n        // Print result\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < nums.length; i++) {\\n            System.out.print(nums[i]);\\n            if (i < nums.length - 1) {\\n                System.out.print(\\",\\");\\n            }\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "RUBY": "nums_str = gets.strip\\nk = gets.strip.to_i\\n\\n# Parse input array\\nnums_str = nums_str[1...-1]\\nnums = nums_str.empty? ? [] : nums_str.split(',').map(&:to_i)\\n\\nrotate(nums, k)\\n\\n# Print result\\nputs nums.to_json", "RUST": "fn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    \\n    // Parse input array\\n    let nums_str = input.trim();\\n    let nums_str = &nums_str[1..nums_str.len()-1];\\n    let mut nums: Vec<i32> = Vec::new();\\n    \\n    if !nums_str.is_empty() {\\n        for num_str in nums_str.split(',') {\\n            nums.push(num_str.parse().unwrap());\\n        }\\n    }\\n    \\n    // Parse k\\n    let mut k_input = String::new();\\n    io::stdin().read_line(&mut k_input).unwrap();\\n    let k: i32 = k_input.trim().parse().unwrap();\\n    \\n    rotate(&mut nums, k);\\n    \\n    // Print result\\n    print!(\\"[\\");\\n    for (i, num) in nums.iter().enumerate() {\\n        print!(\\"{}\\", num);\\n        if i < nums.len() - 1 {\\n            print!(\\",\\");\\n        }\\n    }\\n    println!(\\"]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n    static void Main() {\\n        string numsStr = Console.ReadLine().Trim();\\n        int k = int.Parse(Console.ReadLine().Trim());\\n        \\n        // Parse input array\\n        numsStr = numsStr.Substring(1, numsStr.Length - 2);\\n        int[] nums = numsStr == \\"\\" ? new int[0] : \\n            numsStr.Split(',').Select(int.Parse).ToArray();\\n        \\n        Solution sol = new Solution();\\n        sol.Rotate(nums, k);\\n        \\n        // Print result\\n        Console.Write(\\"[\\");\\n        for (int i = 0; i < nums.Length; i++) {\\n            Console.Write(nums[i]);\\n            if (i < nums.Length - 1) {\\n                Console.Write(\\",\\");\\n            }\\n        }\\n        Console.WriteLine(\\"]\\");\\n    }\\n}", "PYTHON": "lines = sys.stdin.read().strip().split('\\\\n')\\nnums = json.loads(lines[0])\\nk = int(lines[1])\\nrotate(nums, k)\\nprint(json.dumps(nums).replace(' ', ''))", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet lines = [];\\nrl.on('line', line => lines.push(line));\\nrl.on('close', () => {\\n    const nums = JSON.parse(lines[0]);\\n    const k = parseInt(lines[1]);\\n    rotate(nums, k);\\n    console.log(JSON.stringify(nums));\\n});", "TYPESCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout,\\n    terminal: false\\n});\\n\\nlet lines: string[] = [];\\nrl.on('line', (line: string) => lines.push(line));\\nrl.on('close', () => {\\n    const nums: number[] = JSON.parse(lines[0]);\\n    const k: number = parseInt(lines[1]);\\n    rotate(nums, k);\\n    console.log(JSON.stringify(nums));\\n});"}	f	t
8181eaba-1063-47b4-88cb-a720fe8ccfee	15. Contains Duplicate	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given an integer array "}, {"code": true, "text": "nums"}, {"text": ", return "}, {"code": true, "text": "true"}, {"text": " if any value appears "}, {"bold": true, "text": "at least twice"}, {"text": " in the array, and return "}, {"code": true, "text": "false"}, {"text": " if every element is distinct."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d4", "type": "code_block", "children": [{"id": "d4-1", "type": "code_line", "children": [{"text": "Input: nums = [1,2,3,1]"}]}, {"id": "d4-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d5", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: nums = [1,2,3,4]"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "d7", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d8", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= nums.length <= 10^5"}], "listStyleType": ""}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "-10^9 <= nums[i] <= 10^9"}], "listStyleType": ""}]	easy	["Array", "Hash Table", "Sorting"]	{"C": "bool containsDuplicate(int* nums, int numsSize) {\\n  // Write your solution here\\n  return false;\\n}", "GO": "func containsDuplicate(nums []int) bool {\\n  // Write your solution here\\n  return false\\n}", "CPP": "bool containsDuplicate(vector<int>& nums) {\\n  // Write your solution here\\n  return false;\\n}", "JAVA": "public boolean containsDuplicate(int[] nums) {\\n  // Write your solution here\\n  return false;\\n}", "RUBY": "def contains_duplicate(nums)\\n  # Write your solution here\\n  false\\nend", "RUST": "fn contains_duplicate(nums: Vec<i32>) -> bool {\\n  // Write your solution here\\n  false\\n}", "CSHARP": "public bool ContainsDuplicate(int[] nums) {\\n  // Write your solution here\\n  return false;\\n}", "PYTHON": "def contains_duplicate(nums):\\n  # Write your solution here\\n  return False", "JAVASCRIPT": "function containsDuplicate(nums) {\\n  // Write your solution here\\n  return false;\\n}", "TYPESCRIPT": "function containsDuplicate(nums: number[]): boolean {\\n  // Write your solution here\\n  return false;\\n}"}	{"C": "bool containsDuplicate(int* nums, int numsSize) {\\n  for (int i = 0; i < numsSize; i++) {\\n    for (int j = i + 1; j < numsSize; j++) {\\n      if (nums[i] == nums[j]) {\\n        return true;\\n      }\\n    }\\n  }\\n  return false;\\n}", "GO": "func containsDuplicate(nums []int) bool {\\n  seen := make(map[int]bool)\\n  for _, num := range nums {\\n    if seen[num] {\\n      return true\\n    }\\n    seen[num] = true\\n  }\\n  return false\\n}", "CPP": "bool containsDuplicate(vector<int>& nums) {\\n  unordered_set<int> seen;\\n  for (int num : nums) {\\n    if (seen.count(num)) {\\n      return true;\\n    }\\n    seen.insert(num);\\n  }\\n  return false;\\n}", "JAVA": "public boolean containsDuplicate(int[] nums) {\\n  Set<Integer> seen = new HashSet<>();\\n  for (int num : nums) {\\n    if (seen.contains(num)) {\\n      return true;\\n    }\\n    seen.add(num);\\n  }\\n  return false;\\n}", "RUBY": "def contains_duplicate(nums)\\n  seen = Set.new\\n  nums.each do |num|\\n    return true if seen.include?(num)\\n    seen.add(num)\\n  end\\n  false\\nend", "RUST": "fn contains_duplicate(nums: Vec<i32>) -> bool {\\n  let mut seen = HashSet::new();\\n  for num in nums {\\n    if !seen.insert(num) {\\n      return true;\\n    }\\n  }\\n  false\\n}", "CSHARP": "public bool ContainsDuplicate(int[] nums) {\\n  HashSet<int> seen = new HashSet<int>();\\n  foreach (int num in nums) {\\n    if (seen.Contains(num)) {\\n      return true;\\n    }\\n    seen.Add(num);\\n  }\\n  return false;\\n}", "PYTHON": "def contains_duplicate(nums):\\n  seen = set()\\n  for num in nums:\\n    if num in seen:\\n      return True\\n    seen.add(num)\\n  return False", "JAVASCRIPT": "function containsDuplicate(nums) {\\n  const seen = new Set();\\n  for (const num of nums) {\\n    if (seen.has(num)) {\\n      return true;\\n    }\\n    seen.add(num);\\n  }\\n  return false;\\n}", "TYPESCRIPT": "function containsDuplicate(nums: number[]): boolean {\\n  const seen: {[key: number]: boolean} = {};\\n  for (const num of nums) {\\n    if (seen[num]) {\\n      return true;\\n    }\\n    seen[num] = true;\\n  }\\n  return false;\\n}"}	[{"input": "[1,2,3,1]", "output": "true"}, {"input": "[1,2,3,4]", "output": "false"}, {"input": "[1,1,1,3,3,4,3,2,4,2]", "output": "true"}]	["Use a hash set to keep track of seen elements", "Return true as soon as you find a duplicate"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=3OamzN90kPg", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Check if any element appears more than once in the array."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must run in linear time for optimal solution."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 100,000 elements."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use a hash set to track seen elements. Return true immediately when a duplicate is found."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Hash Set Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Iterate through the array and check if each element exists in the hash set. If yes, return true. Otherwise, add it to the set."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def contains_duplicate(nums):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  seen = set()"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  for num in nums:"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "    if num in seen:"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "      return True"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "    seen.add(num)"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "  return False"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdbool.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"strings\\"\\n  \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <unordered_set>\\n#include <sstream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "require 'set'", "RUST": "use std::collections::HashSet;\\nuse std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  char input[1000];\\n  fgets(input, sizeof(input), stdin);\\n  \\n  input[strcspn(input, \\"\\\\n\\")] = 0;\\n  char* start = strchr(input, '[') + 1;\\n  char* end = strrchr(input, ']');\\n  *end = '\\\\0';\\n  \\n  int nums[1000];\\n  int numsSize = 0;\\n  char* token = strtok(start, \\",\\");\\n  while (token != NULL) {\\n    nums[numsSize++] = atoi(token);\\n    token = strtok(NULL, \\",\\");\\n  }\\n  \\n  bool result = containsDuplicate(nums, numsSize);\\n  printf(\\"%s\\\\n\\", result ? \\"true\\" : \\"false\\");\\n  return 0;\\n}", "GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  input = input[1:len(input)-1]\\n  parts := strings.Split(input, \\",\\")\\n  nums := make([]int, len(parts))\\n  for i, s := range parts {\\n    nums[i], _ = strconv.Atoi(s)\\n  }\\n  \\n  result := containsDuplicate(nums)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  input = input.substr(1, input.size() - 2);\\n  stringstream ss(input);\\n  vector<int> nums;\\n  string token;\\n  \\n  while (getline(ss, token, ',')) {\\n    nums.push_back(stoi(token));\\n  }\\n  \\n  bool result = containsDuplicate(nums);\\n  cout << (result ? \\"true\\" : \\"false\\") << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    input = input.substring(1, input.length() - 1);\\n    String[] parts = input.split(\\",\\");\\n    int[] nums = new int[parts.length];\\n    for (int i = 0; i < parts.length; i++) {\\n      nums[i] = Integer.parseInt(parts[i]);\\n    }\\n    \\n    Solution sol = new Solution();\\n    boolean result = sol.containsDuplicate(nums);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\nnums = eval(input)\\nresult = contains_duplicate(nums)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  let input = input.trim();\\n  let input = &input[1..input.len()-1];\\n  let nums: Vec<i32> = input.split(',').map(|s| s.parse().unwrap()).collect();\\n  \\n  let result = contains_duplicate(nums);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    input = input.Substring(1, input.Length - 2);\\n    int[] nums = input.Split(',').Select(int.Parse).ToArray();\\n    \\n    Solution sol = new Solution();\\n    bool result = sol.ContainsDuplicate(nums);\\n    Console.WriteLine(result.ToString().ToLower());\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nnums = eval(input_data)\\nresult = contains_duplicate(nums)\\nprint(str(result).lower())", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const nums = JSON.parse(input);\\n  const result = containsDuplicate(nums);\\n  console.log(result);\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst nums = JSON.parse(input);\\nconst result = containsDuplicate(nums);\\nconsole.log(result);"}	f	t
3eaad5df-f72f-4d3a-ae8a-d44bbd2aff7f	19. Valid Parentheses	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given a string "}, {"code": true, "text": "s"}, {"text": " containing just the characters "}, {"code": true, "text": "'('"}, {"text": ", "}, {"code": true, "text": "')'"}, {"text": ", "}, {"code": true, "text": "'{'"}, {"text": ", "}, {"code": true, "text": "'}'"}, {"text": ", "}, {"code": true, "text": "'['"}, {"text": " and "}, {"code": true, "text": "']'"}, {"text": ", determine if the input string is valid."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "An input string is valid if:"}]}, {"id": "d3", "type": "p", "indent": 0, "children": [{"text": "Open brackets must be closed by the same type of brackets."}], "listStyleType": ""}, {"id": "d4", "type": "p", "indent": 0, "children": [{"text": "Open brackets must be closed in the correct order."}], "listStyleType": ""}, {"id": "d5", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: s = \\"()\\""}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d9", "type": "code_block", "children": [{"id": "d9-1", "type": "code_line", "children": [{"text": "Input: s = \\"()[]{}\\""}]}, {"id": "d9-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d10", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 3:"}]}, {"id": "d11", "type": "code_block", "children": [{"id": "d11-1", "type": "code_line", "children": [{"text": "Input: s = \\"(]\\""}]}, {"id": "d11-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "d12", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d13", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= s.length <= 10^4"}], "listStyleType": ""}, {"id": "d14", "type": "p", "indent": 0, "children": [{"code": true, "text": "s consists of parentheses only '()[]{}'."}], "listStyleType": ""}]	easy	["String", "Stack"]	{"C": "bool isValid(char* s) {\\n  // Write your solution here\\n  return false;\\n}", "GO": "func isValid(s string) bool {\\n  // Write your solution here\\n  return false\\n}", "CPP": "bool isValid(string s) {\\n  // Write your solution here\\n  return false;\\n}", "JAVA": "public boolean isValid(String s) {\\n  // Write your solution here\\n  return false;\\n}", "RUBY": "def is_valid(s)\\n  # Write your solution here\\n  false\\nend", "RUST": "fn is_valid(s: String) -> bool {\\n  // Write your solution here\\n  false\\n}", "CSHARP": "public bool IsValid(string s) {\\n  // Write your solution here\\n  return false;\\n}", "PYTHON": "def is_valid(s):\\n  # Write your solution here\\n  return False", "JAVASCRIPT": "function isValid(s) {\\n  // Write your solution here\\n  return false;\\n}", "TYPESCRIPT": "function isValid(s: string): boolean {\\n  // Write your solution here\\n  return false;\\n}"}	{"C": "bool isValid(char* s) {\\n  int len = strlen(s);\\n  char stack[len];\\n  int top = -1;\\n  \\n  for (int i = 0; i < len; i++) {\\n    char c = s[i];\\n    if (c == '(' || c == '{' || c == '[') {\\n      stack[++top] = c;\\n    } else {\\n      if (top == -1) return false;\\n      char open = stack[top--];\\n      if ((c == ')' && open != '(') ||\\n          (c == '}' && open != '{') ||\\n          (c == ']' && open != '[')) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return top == -1;\\n}", "GO": "func isValid(s string) bool {\\n  stack := []rune{}\\n  pairs := map[rune]rune{')': '(', '}': '{', ']': '['}\\n  \\n  for _, c := range s {\\n    if c == '(' || c == '{' || c == '[' {\\n      stack = append(stack, c)\\n    } else {\\n      if len(stack) == 0 || stack[len(stack)-1] != pairs[c] {\\n        return false\\n      }\\n      stack = stack[:len(stack)-1]\\n    }\\n  }\\n  \\n  return len(stack) == 0\\n}", "CPP": "bool isValid(string s) {\\n  stack<char> st;\\n  \\n  for (char c : s) {\\n    if (c == '(' || c == '{' || c == '[') {\\n      st.push(c);\\n    } else {\\n      if (st.empty()) return false;\\n      char top = st.top();\\n      st.pop();\\n      if ((c == ')' && top != '(') ||\\n          (c == '}' && top != '{') ||\\n          (c == ']' && top != '[')) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return st.empty();\\n}", "JAVA": "public boolean isValid(String s) {\\n  Stack<Character> stack = new Stack<>();\\n  \\n  for (char c : s.toCharArray()) {\\n    if (c == '(' || c == '{' || c == '[') {\\n      stack.push(c);\\n    } else {\\n      if (stack.isEmpty()) return false;\\n      char top = stack.pop();\\n      if ((c == ')' && top != '(') ||\\n          (c == '}' && top != '{') ||\\n          (c == ']' && top != '[')) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return stack.isEmpty();\\n}", "RUBY": "def is_valid(s)\\n  stack = []\\n  pairs = {')' => '(', '}' => '{', ']' => '['}\\n  \\n  s.each_char do |c|\\n    if ['(', '{', '['].include?(c)\\n      stack.push(c)\\n    else\\n      return false if stack.empty? || stack.pop != pairs[c]\\n    end\\n  end\\n  \\n  stack.empty?\\nend", "RUST": "fn is_valid(s: String) -> bool {\\n  let mut stack = Vec::new();\\n  \\n  for c in s.chars() {\\n    match c {\\n      '(' | '{' | '[' => stack.push(c),\\n      ')' => {\\n        if stack.pop() != Some('(') { return false; }\\n      },\\n      '}' => {\\n        if stack.pop() != Some('{') { return false; }\\n      },\\n      ']' => {\\n        if stack.pop() != Some('[') { return false; }\\n      },\\n      _ => {}\\n    }\\n  }\\n  \\n  stack.is_empty()\\n}", "CSHARP": "public bool IsValid(string s) {\\n  Stack<char> stack = new Stack<char>();\\n  \\n  foreach (char c in s) {\\n    if (c == '(' || c == '{' || c == '[') {\\n      stack.Push(c);\\n    } else {\\n      if (stack.Count == 0) return false;\\n      char top = stack.Pop();\\n      if ((c == ')' && top != '(') ||\\n          (c == '}' && top != '{') ||\\n          (c == ']' && top != '[')) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return stack.Count == 0;\\n}", "PYTHON": "def is_valid(s):\\n  stack = []\\n  pairs = {')': '(', '}': '{', ']': '['}\\n  \\n  for c in s:\\n    if c in '({[':\\n      stack.append(c)\\n    else:\\n      if not stack or stack.pop() != pairs[c]:\\n        return False\\n  \\n  return len(stack) == 0", "JAVASCRIPT": "function isValid(s) {\\n  const stack = [];\\n  const pairs = {')': '(', '}': '{', ']': '['};\\n  \\n  for (const c of s) {\\n    if (c === '(' || c === '{' || c === '[') {\\n      stack.push(c);\\n    } else {\\n      if (stack.length === 0 || stack.pop() !== pairs[c]) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return stack.length === 0;\\n}", "TYPESCRIPT": "function isValid(s: string): boolean {\\n  const stack: string[] = [];\\n  const pairs: {[key: string]: string} = {')': '(', '}': '{', ']': '['};\\n  \\n  for (const c of s) {\\n    if (c === '(' || c === '{' || c === '[') {\\n      stack.push(c);\\n    } else {\\n      if (stack.length === 0 || stack.pop() !== pairs[c]) {\\n        return false;\\n      }\\n    }\\n  }\\n  \\n  return stack.length === 0;\\n}"}	[{"input": "\\"()\\"", "output": "true"}, {"input": "\\"()[]{}\\"", "output": "true"}, {"input": "\\"(]\\"", "output": "false"}]	["Use a stack to keep track of opening brackets", "When you see a closing bracket, check if it matches the most recent opening bracket"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=WTzjTskDFMg", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Check if parentheses are properly matched using a stack."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e9", "type": "p", "children": [{"text": "Use a stack to track opening brackets and match them with closing brackets."}]}, {"id": "e10", "type": "hr", "children": [{"text": ""}]}, {"id": "e11", "type": "h2", "children": [{"text": "‚úÖ Stack Approach (Optimal)"}]}, {"id": "e12", "type": "p", "children": [{"text": "Push opening brackets onto stack, pop and match with closing brackets."}]}, {"id": "e13", "type": "code_block", "children": [{"id": "e13-1", "type": "code_line", "children": [{"text": "def is_valid(s):"}]}, {"id": "e13-2", "type": "code_line", "children": [{"text": "  stack = []"}]}, {"id": "e13-3", "type": "code_line", "children": [{"text": "  pairs = {')': '(', '}': '{', ']': '['}"}]}, {"id": "e13-4", "type": "code_line", "children": [{"text": "  for c in s:"}]}, {"id": "e13-5", "type": "code_line", "children": [{"text": "    if c in '({[': stack.append(c)"}]}, {"id": "e13-6", "type": "code_line", "children": [{"text": "    else:"}]}, {"id": "e13-7", "type": "code_line", "children": [{"text": "      if not stack or stack.pop() != pairs[c]: return False"}]}, {"id": "e13-8", "type": "code_line", "children": [{"text": "  return len(stack) == 0"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdbool.h>\\n#include <string.h>", "GO": "package main\\nimport \\"fmt\\"", "CPP": "#include <iostream>\\n#include <stack>\\n#include <string>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  char s[10001];\\n  scanf(\\"\\\\\\"%[^\\\\\\"]\\\\\\"\\", s);\\n  \\n  bool result = isValid(s);\\n  printf(\\"%s\\\\n\\", result ? \\"true\\" : \\"false\\");\\n  return 0;\\n}", "GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  s := input[1:len(input)-1]\\n  result := isValid(s)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  string s = input.substr(1, input.length() - 2);\\n  bool result = isValid(s);\\n  cout << (result ? \\"true\\" : \\"false\\") << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    String s = input.substring(1, input.length() - 1);\\n    \\n    Solution sol = new Solution();\\n    boolean result = sol.isValid(s);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\ns = input[1..-2]\\nresult = is_valid(s)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  let input = input.trim();\\n  let s = input[1..input.len()-1].to_string();\\n  \\n  let result = is_valid(s);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    string s = input.Substring(1, input.Length - 2);\\n    \\n    Solution sol = new Solution();\\n    bool result = sol.IsValid(s);\\n    Console.WriteLine(result.ToString().ToLower());\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\ns = input_data[1:-1]\\nresult = is_valid(s)\\nprint(str(result).lower())", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const s = input.slice(1, -1);\\n  const result = isValid(s);\\n  console.log(result);\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst s = input.slice(1, -1);\\nconst result = isValid(s);\\nconsole.log(result);"}	f	t
9b42bc66-7fbc-468b-bd56-a1d96f69f6c9	16. Product of Array Except Self	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given an integer array "}, {"code": true, "text": "nums"}, {"text": ", return "}, {"text": "an array", "italic": true}, {"text": " "}, {"code": true, "text": "answer"}, {"text": " such that "}, {"code": true, "text": "answer[i]"}, {"text": " is equal to the product of all the elements of "}, {"code": true, "text": "nums"}, {"text": " except "}, {"code": true, "text": "nums[i]"}, {"text": "."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "The product of any prefix or suffix of "}, {"code": true, "text": "nums"}, {"text": " is "}, {"bold": true, "text": "guaranteed"}, {"text": " to fit in a "}, {"bold": true, "text": "32-bit"}, {"text": " integer."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": "You must write an algorithm that runs in "}, {"code": true, "text": "O(n)"}, {"text": " time and without using the division operation."}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d5", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: nums = [1,2,3,4]"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: [24,12,8,6]"}]}]}, {"id": "d7", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d8", "type": "code_block", "children": [{"id": "d8-1", "type": "code_line", "children": [{"text": "Input: nums = [-1,1,0,-3,3]"}]}, {"id": "d8-2", "type": "code_line", "children": [{"text": "Output: [0,0,9,0,0]"}]}]}, {"id": "d9", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d10", "type": "p", "indent": 0, "children": [{"code": true, "text": "2 <= nums.length <= 10^5"}], "listStyleType": ""}, {"id": "d11", "type": "p", "indent": 0, "children": [{"code": true, "text": "-30 <= nums[i] <= 30"}], "listStyleType": ""}]	medium	["Array", "Prefix Sum"]	{"C": "int* productExceptSelf(int* nums, int numsSize, int* returnSize) {\\n  // Write your solution here\\n  *returnSize = numsSize;\\n  int* result = (int*)malloc(numsSize * sizeof(int));\\n  return result;\\n}", "GO": "func productExceptSelf(nums []int) []int {\\n  // Write your solution here\\n  return nil\\n}", "CPP": "vector<int> productExceptSelf(vector<int>& nums) {\\n  // Write your solution here\\n  return {};\\n}", "JAVA": "public int[] productExceptSelf(int[] nums) {\\n  // Write your solution here\\n  return new int[]{};\\n}", "RUBY": "def product_except_self(nums)\\n  # Write your solution here\\n  []\\nend", "RUST": "fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\\n  // Write your solution here\\n  vec![]\\n}", "CSHARP": "public int[] ProductExceptSelf(int[] nums) {\\n  // Write your solution here\\n  return new int[]{};\\n}", "PYTHON": "def product_except_self(nums):\\n  # Write your solution here\\n  return []", "JAVASCRIPT": "function productExceptSelf(nums) {\\n  // Write your solution here\\n  return [];\\n}", "TYPESCRIPT": "function productExceptSelf(nums: number[]): number[] {\\n  // Write your solution here\\n  return [];\\n}"}	{"C": "int* productExceptSelf(int* nums, int numsSize, int* returnSize) {\\n  *returnSize = numsSize;\\n  int* result = (int*)malloc(numsSize * sizeof(int));\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (int i = 1; i < numsSize; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  int right = 1;\\n  for (int i = numsSize - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}", "GO": "func productExceptSelf(nums []int) []int {\\n  n := len(nums)\\n  result := make([]int, n)\\n  \\n  // Left pass\\n  result[0] = 1\\n  for i := 1; i < n; i++ {\\n    result[i] = result[i-1] * nums[i-1]\\n  }\\n  \\n  // Right pass\\n  right := 1\\n  for i := n - 1; i >= 0; i-- {\\n    result[i] *= right\\n    right *= nums[i]\\n  }\\n  \\n  return result\\n}", "CPP": "vector<int> productExceptSelf(vector<int>& nums) {\\n  int n = nums.size();\\n  vector<int> result(n);\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (int i = 1; i < n; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  int right = 1;\\n  for (int i = n - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}", "JAVA": "public int[] productExceptSelf(int[] nums) {\\n  int n = nums.length;\\n  int[] result = new int[n];\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (int i = 1; i < n; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  int right = 1;\\n  for (int i = n - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}", "RUBY": "def product_except_self(nums)\\n  n = nums.length\\n  result = Array.new(n)\\n  \\n  # Left pass\\n  result[0] = 1\\n  (1...n).each do |i|\\n    result[i] = result[i-1] * nums[i-1]\\n  end\\n  \\n  # Right pass\\n  right = 1\\n  (n-1).downto(0) do |i|\\n    result[i] *= right\\n    right *= nums[i]\\n  end\\n  \\n  result\\nend", "RUST": "fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\\n  let n = nums.len();\\n  let mut result = vec![0; n];\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for i in 1..n {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  let mut right = 1;\\n  for i in (0..n).rev() {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  result\\n}", "CSHARP": "public int[] ProductExceptSelf(int[] nums) {\\n  int n = nums.Length;\\n  int[] result = new int[n];\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (int i = 1; i < n; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  int right = 1;\\n  for (int i = n - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}", "PYTHON": "def product_except_self(nums):\\n  n = len(nums)\\n  result = [0] * n\\n  \\n  # Left pass\\n  result[0] = 1\\n  for i in range(1, n):\\n    result[i] = result[i-1] * nums[i-1]\\n  \\n  # Right pass\\n  right = 1\\n  for i in range(n-1, -1, -1):\\n    result[i] *= right\\n    right *= nums[i]\\n  \\n  return result", "JAVASCRIPT": "function productExceptSelf(nums) {\\n  const n = nums.length;\\n  const result = new Array(n);\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (let i = 1; i < n; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  let right = 1;\\n  for (let i = n - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}", "TYPESCRIPT": "function productExceptSelf(nums: number[]): number[] {\\n  const n = nums.length;\\n  const result = new Array(n);\\n  \\n  // Left pass\\n  result[0] = 1;\\n  for (let i = 1; i < n; i++) {\\n    result[i] = result[i-1] * nums[i-1];\\n  }\\n  \\n  // Right pass\\n  let right = 1;\\n  for (let i = n - 1; i >= 0; i--) {\\n    result[i] *= right;\\n    right *= nums[i];\\n  }\\n  \\n  return result;\\n}"}	[{"input": "[1,2,3,4]", "output": "[24,12,8,6]"}, {"input": "[-1,1,0,-3,3]", "output": "[0,0,9,0,0]"}, {"input": "[2,3,4,5]", "output": "[60,40,30,24]"}]	["Think about using left and right product arrays", "You can optimize space by using the result array for left products and a variable for right products"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=bNvIQI2wAjk", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "For each element, calculate the product of all other elements without using division."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must run in O(n) time without division operation."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Input size up to 100,000 elements."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use two passes: first calculate left products, then multiply with right products."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Two-Pass Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "First pass: store left products in result array. Second pass: multiply with right products using a variable."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def product_except_self(nums):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  n = len(nums)"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  result = [0] * n"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  result[0] = 1"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "  for i in range(1, n):"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "    result[i] = result[i-1] * nums[i-1]"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "  right = 1"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "  for i in range(n-1, -1, -1):"}]}, {"id": "e19-9", "type": "code_line", "children": [{"text": "    result[i] *= right"}]}, {"id": "e19-10", "type": "code_line", "children": [{"text": "    right *= nums[i]"}]}, {"id": "e19-11", "type": "code_line", "children": [{"text": "  return result"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"strings\\"\\n  \\"strconv\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <sstream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;", "CSHARP": "using System;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  char input[1000];\\n  fgets(input, sizeof(input), stdin);\\n  \\n  input[strcspn(input, \\"\\\\n\\")] = 0;\\n  char* start = strchr(input, '[') + 1;\\n  char* end = strrchr(input, ']');\\n  *end = '\\\\0';\\n  \\n  int nums[1000];\\n  int numsSize = 0;\\n  char* token = strtok(start, \\",\\");\\n  while (token != NULL) {\\n    nums[numsSize++] = atoi(token);\\n    token = strtok(NULL, \\",\\");\\n  }\\n  \\n  int returnSize;\\n  int* result = productExceptSelf(nums, numsSize, &returnSize);\\n  \\n  printf(\\"[\\");\\n  for (int i = 0; i < returnSize; i++) {\\n    printf(\\"%d\\", result[i]);\\n    if (i < returnSize - 1) printf(\\",\\");\\n  }\\n  printf(\\"]\\\\n\\");\\n  \\n  free(result);\\n  return 0;\\n}", "GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  input = input[1:len(input)-1]\\n  parts := strings.Split(input, \\",\\")\\n  nums := make([]int, len(parts))\\n  for i, s := range parts {\\n    nums[i], _ = strconv.Atoi(s)\\n  }\\n  \\n  result := productExceptSelf(nums)\\n  fmt.Print(\\"[\\")\\n  for i, val := range result {\\n    fmt.Print(val)\\n    if i < len(result)-1 {\\n      fmt.Print(\\",\\")\\n    }\\n  }\\n  fmt.Println(\\"]\\")\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  input = input.substr(1, input.size() - 2);\\n  stringstream ss(input);\\n  vector<int> nums;\\n  string token;\\n  \\n  while (getline(ss, token, ',')) {\\n    nums.push_back(stoi(token));\\n  }\\n  \\n  vector<int> result = productExceptSelf(nums);\\n  cout << \\"[\\";\\n  for (int i = 0; i < result.size(); i++) {\\n    cout << result[i];\\n    if (i < result.size() - 1) cout << \\",\\";\\n  }\\n  cout << \\"]\\" << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    input = input.substring(1, input.length() - 1);\\n    String[] parts = input.split(\\",\\");\\n    int[] nums = new int[parts.length];\\n    for (int i = 0; i < parts.length; i++) {\\n      nums[i] = Integer.parseInt(parts[i]);\\n    }\\n    \\n    Solution sol = new Solution();\\n    int[] result = sol.productExceptSelf(nums);\\n    System.out.print(\\"[\\");\\n    for (int i = 0; i < result.length; i++) {\\n      System.out.print(result[i]);\\n      if (i < result.length - 1) System.out.print(\\",\\");\\n    }\\n    System.out.println(\\"]\\");\\n  }\\n}", "RUBY": "input = gets.strip\\nnums = eval(input)\\nresult = product_except_self(nums)\\nputs result.to_s.gsub(' ', '')", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  let input = input.trim();\\n  let input = &input[1..input.len()-1];\\n  let nums: Vec<i32> = input.split(',').map(|s| s.parse().unwrap()).collect();\\n  \\n  let result = product_except_self(nums);\\n  print!(\\"[\\");\\n  for (i, val) in result.iter().enumerate() {\\n    print!(\\"{}\\", val);\\n    if i < result.len() - 1 {\\n      print!(\\",\\");\\n    }\\n  }\\n  println!(\\"]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    input = input.Substring(1, input.Length - 2);\\n    int[] nums = input.Split(',').Select(int.Parse).ToArray();\\n    \\n    Solution sol = new Solution();\\n    int[] result = sol.ProductExceptSelf(nums);\\n    Console.Write(\\"[\\");\\n    for (int i = 0; i < result.Length; i++) {\\n      Console.Write(result[i]);\\n      if (i < result.Length - 1) Console.Write(\\",\\");\\n    }\\n    Console.WriteLine(\\"]\\");\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nnums = eval(input_data)\\nresult = product_except_self(nums)\\nprint(str(result).replace(' ', ''))", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const nums = JSON.parse(input);\\n  const result = productExceptSelf(nums);\\n  console.log(JSON.stringify(result));\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst nums = JSON.parse(input);\\nconst result = productExceptSelf(nums);\\nconsole.log(JSON.stringify(result));"}	f	t
f2734c8a-9265-4adc-ad93-a66c5e04196e	17. Valid Anagram	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given two strings "}, {"code": true, "text": "s"}, {"text": " and "}, {"code": true, "text": "t"}, {"text": ", return "}, {"code": true, "text": "true"}, {"text": " if "}, {"code": true, "text": "t"}, {"text": " is an anagram of "}, {"code": true, "text": "s"}, {"text": ", and "}, {"code": true, "text": "false"}, {"text": " otherwise."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "An "}, {"bold": true, "text": "Anagram"}, {"text": " is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: s = \\"anagram\\", t = \\"nagaram\\""}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: true"}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: s = \\"rat\\", t = \\"car\\""}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: false"}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= s.length, t.length <= 5 * 10^4"}], "listStyleType": ""}, {"id": "d10", "type": "p", "indent": 0, "children": [{"code": true, "text": "s and t consist of lowercase English letters."}], "listStyleType": ""}]	easy	["Hash Table", "String", "Sorting"]	{"C": "bool isAnagram(char* s, char* t) {\\n  // Write your solution here\\n  return false;\\n}", "GO": "func isAnagram(s string, t string) bool {\\n  // Write your solution here\\n  return false\\n}", "CPP": "bool isAnagram(string s, string t) {\\n  // Write your solution here\\n  return false;\\n}", "JAVA": "public boolean isAnagram(String s, String t) {\\n  // Write your solution here\\n  return false;\\n}", "RUBY": "def is_anagram(s, t)\\n  # Write your solution here\\n  false\\nend", "RUST": "fn is_anagram(s: String, t: String) -> bool {\\n  // Write your solution here\\n  false\\n}", "CSHARP": "public bool IsAnagram(string s, string t) {\\n  // Write your solution here\\n  return false;\\n}", "PYTHON": "def is_anagram(s, t):\\n  # Write your solution here\\n  return False", "JAVASCRIPT": "function isAnagram(s, t) {\\n  // Write your solution here\\n  return false;\\n}", "TYPESCRIPT": "function isAnagram(s: string, t: string): boolean {\\n  // Write your solution here\\n  return false;\\n}"}	{"C": "bool isAnagram(char* s, char* t) {\\n  int len_s = strlen(s);\\n  int len_t = strlen(t);\\n  \\n  if (len_s != len_t) return false;\\n  \\n  int count[26] = {0};\\n  \\n  for (int i = 0; i < len_s; i++) {\\n    count[s[i] - 'a']++;\\n    count[t[i] - 'a']--;\\n  }\\n  \\n  for (int i = 0; i < 26; i++) {\\n    if (count[i] != 0) return false;\\n  }\\n  \\n  return true;\\n}", "GO": "func isAnagram(s string, t string) bool {\\n  if len(s) != len(t) {\\n    return false\\n  }\\n  \\n  count := make(map[rune]int)\\n  \\n  for _, char := range s {\\n    count[char]++\\n  }\\n  \\n  for _, char := range t {\\n    count[char]--\\n    if count[char] < 0 {\\n      return false\\n    }\\n  }\\n  \\n  return true\\n}", "CPP": "bool isAnagram(string s, string t) {\\n  if (s.length() != t.length()) return false;\\n  \\n  unordered_map<char, int> count;\\n  \\n  for (char c : s) {\\n    count[c]++;\\n  }\\n  \\n  for (char c : t) {\\n    count[c]--;\\n    if (count[c] < 0) return false;\\n  }\\n  \\n  return true;\\n}", "JAVA": "public boolean isAnagram(String s, String t) {\\n  if (s.length() != t.length()) return false;\\n  \\n  Map<Character, Integer> count = new HashMap<>();\\n  \\n  for (char c : s.toCharArray()) {\\n    count.put(c, count.getOrDefault(c, 0) + 1);\\n  }\\n  \\n  for (char c : t.toCharArray()) {\\n    count.put(c, count.getOrDefault(c, 0) - 1);\\n    if (count.get(c) < 0) return false;\\n  }\\n  \\n  return true;\\n}", "RUBY": "def is_anagram(s, t)\\n  return false if s.length != t.length\\n  \\n  count = Hash.new(0)\\n  \\n  s.each_char { |c| count[c] += 1 }\\n  t.each_char { |c| count[c] -= 1 }\\n  \\n  count.values.all?(&:zero?)\\nend", "RUST": "fn is_anagram(s: String, t: String) -> bool {\\n  if s.len() != t.len() {\\n    return false;\\n  }\\n  \\n  let mut count = std::collections::HashMap::new();\\n  \\n  for c in s.chars() {\\n    *count.entry(c).or_insert(0) += 1;\\n  }\\n  \\n  for c in t.chars() {\\n    let counter = count.entry(c).or_insert(0);\\n    *counter -= 1;\\n    if *counter < 0 {\\n      return false;\\n    }\\n  }\\n  \\n  true\\n}", "CSHARP": "public bool IsAnagram(string s, string t) {\\n  if (s.Length != t.Length) return false;\\n  \\n  Dictionary<char, int> count = new Dictionary<char, int>();\\n  \\n  foreach (char c in s) {\\n    count[c] = count.GetValueOrDefault(c, 0) + 1;\\n  }\\n  \\n  foreach (char c in t) {\\n    count[c] = count.GetValueOrDefault(c, 0) - 1;\\n    if (count[c] < 0) return false;\\n  }\\n  \\n  return true;\\n}", "PYTHON": "def is_anagram(s, t):\\n  if len(s) != len(t):\\n    return False\\n  \\n  count = {}\\n  \\n  for c in s:\\n    count[c] = count.get(c, 0) + 1\\n  \\n  for c in t:\\n    count[c] = count.get(c, 0) - 1\\n    if count[c] < 0:\\n      return False\\n  \\n  return True", "JAVASCRIPT": "function isAnagram(s, t) {\\n  if (s.length !== t.length) return false;\\n  \\n  const count = {};\\n  \\n  for (const c of s) {\\n    count[c] = (count[c] || 0) + 1;\\n  }\\n  \\n  for (const c of t) {\\n    count[c] = (count[c] || 0) - 1;\\n    if (count[c] < 0) return false;\\n  }\\n  \\n  return true;\\n}", "TYPESCRIPT": "function isAnagram(s: string, t: string): boolean {\\n  if (s.length !== t.length) return false;\\n  \\n  const count: {[key: string]: number} = {};\\n  \\n  for (const c of s) {\\n    count[c] = (count[c] || 0) + 1;\\n  }\\n  \\n  for (const c of t) {\\n    count[c] = (count[c] || 0) - 1;\\n    if (count[c] < 0) return false;\\n  }\\n  \\n  return true;\\n}"}	[{"input": "\\"anagram\\",\\"nagaram\\"", "output": "true"}, {"input": "\\"rat\\",\\"car\\"", "output": "false"}, {"input": "\\"listen\\",\\"silent\\"", "output": "true"}]	["Use a hash map to count character frequencies", "Two strings are anagrams if they have the same character counts"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=9UtInBqnCgA", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Check if two strings are anagrams by comparing character frequencies."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Must run in linear time."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Only lowercase English letters."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Count character frequencies in both strings and compare them."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Hash Map Approach (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Use a hash map to count characters in first string, then decrement for second string."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def is_anagram(s, t):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  if len(s) != len(t): return False"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  count = {}"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "  for c in s: count[c] = count.get(c, 0) + 1"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "  for c in t:"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "    count[c] = count.get(c, 0) - 1"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    if count[c] < 0: return False"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "  return True"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdbool.h>\\n#include <string.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"strings\\"\\n)", "CPP": "#include <iostream>\\n#include <string>\\n#include <unordered_map>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::collections::HashMap;\\nuse std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  char s[50001], t[50001];\\n  scanf(\\"\\\\\\"%[^\\\\\\"]\\\\\\",\\\\\\"%[^\\\\\\"]\\\\\\"]\\", s, t);\\n  \\n  bool result = isAnagram(s, t);\\n  printf(\\"%s\\\\n\\", result ? \\"true\\" : \\"false\\");\\n  return 0;\\n}", "GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  parts := strings.Split(input, \\",\\")\\n  s := strings.Trim(parts[0], \\"\\\\\\"\\")\\n  t := strings.Trim(parts[1], \\"\\\\\\"\\")\\n  \\n  result := isAnagram(s, t)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  size_t comma = input.find(',');\\n  string s = input.substr(1, comma - 2);\\n  string t = input.substr(comma + 2, input.length() - comma - 3);\\n  \\n  bool result = isAnagram(s, t);\\n  cout << (result ? \\"true\\" : \\"false\\") << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    String[] parts = input.split(\\",\\");\\n    String s = parts[0].substring(1, parts[0].length() - 1);\\n    String t = parts[1].substring(1, parts[1].length() - 1);\\n    \\n    Solution sol = new Solution();\\n    boolean result = sol.isAnagram(s, t);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "input = gets.strip\\nparts = input.split(',')\\ns = parts[0][1..-2]\\nt = parts[1][1..-2]\\nresult = is_anagram(s, t)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  let input = input.trim();\\n  let parts: Vec<&str> = input.split(',').collect();\\n  let s = parts[0][1..parts[0].len()-1].to_string();\\n  let t = parts[1][1..parts[1].len()-1].to_string();\\n  \\n  let result = is_anagram(s, t);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    string[] parts = input.Split(',');\\n    string s = parts[0].Substring(1, parts[0].Length - 2);\\n    string t = parts[1].Substring(1, parts[1].Length - 2);\\n    \\n    Solution sol = new Solution();\\n    bool result = sol.IsAnagram(s, t);\\n    Console.WriteLine(result.ToString().ToLower());\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nparts = input_data.split(',')\\ns = parts[0][1:-1]\\nt = parts[1][1:-1]\\nresult = is_anagram(s, t)\\nprint(str(result).lower())", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const parts = input.split(',');\\n  const s = parts[0].slice(1, -1);\\n  const t = parts[1].slice(1, -1);\\n  const result = isAnagram(s, t);\\n  console.log(result);\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst parts = input.split(',');\\nconst s = parts[0].slice(1, -1);\\nconst t = parts[1].slice(1, -1);\\nconst result = isAnagram(s, t);\\nconsole.log(result);"}	f	t
b65aee7f-0335-4390-89b3-dc400935b2a0	18. Group Anagrams	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "Given an array of strings "}, {"code": true, "text": "strs"}, {"text": ", group the anagrams together. You can return the answer in "}, {"bold": true, "text": "any order"}, {"text": "."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "An "}, {"bold": true, "text": "Anagram"}, {"text": " is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: strs = [\\"eat\\",\\"tea\\",\\"tan\\",\\"ate\\",\\"nat\\",\\"bat\\"]"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: [[\\"bat\\"],[\\"nat\\",\\"tan\\"],[\\"ate\\",\\"eat\\",\\"tea\\"]]"}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: strs = [\\"\\"]\\""}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: [[\\"\\"]]\\""}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 3:"}]}, {"id": "d9", "type": "code_block", "children": [{"id": "d9-1", "type": "code_line", "children": [{"text": "Input: strs = [\\"a\\"]\\""}]}, {"id": "d9-2", "type": "code_line", "children": [{"text": "Output: [[\\"a\\"]]\\""}]}]}, {"id": "d10", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d11", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= strs.length <= 10^4"}], "listStyleType": ""}, {"id": "d12", "type": "p", "indent": 0, "children": [{"code": true, "text": "0 <= strs[i].length <= 100"}], "listStyleType": ""}, {"id": "d13", "type": "p", "indent": 0, "children": [{"code": true, "text": "strs[i] consists of lowercase English letters only."}], "listStyleType": ""}]	medium	["Array", "Hash Table", "String", "Sorting"]	{"C": "char*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\\n  // Write your solution here\\n  *returnSize = 0;\\n  return NULL;\\n}", "GO": "func groupAnagrams(strs []string) [][]string {\\n  // Write your solution here\\n  return nil\\n}", "CPP": "vector<vector<string>> groupAnagrams(vector<string>& strs) {\\n  // Write your solution here\\n  return {};\\n}", "JAVA": "public List<List<String>> groupAnagrams(String[] strs) {\\n  // Write your solution here\\n  return new ArrayList<>();\\n}", "RUBY": "def group_anagrams(strs)\\n  # Write your solution here\\n  []\\nend", "RUST": "fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\\n  // Write your solution here\\n  vec![]\\n}", "CSHARP": "public IList<IList<string>> GroupAnagrams(string[] strs) {\\n  // Write your solution here\\n  return new List<IList<string>>();\\n}", "PYTHON": "def group_anagrams(strs):\\n  # Write your solution here\\n  return []", "JAVASCRIPT": "function groupAnagrams(strs) {\\n  // Write your solution here\\n  return [];\\n}", "TYPESCRIPT": "function groupAnagrams(strs: string[]): string[][] {\\n  // Write your solution here\\n  return [];\\n}"}	{"C": "char*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\\n  // Simple approach using sorting\\n  char*** result = (char***)malloc(strsSize * sizeof(char**));\\n  *returnColumnSizes = (int*)malloc(strsSize * sizeof(int));\\n  *returnSize = 0;\\n  \\n  bool* used = (bool*)calloc(strsSize, sizeof(bool));\\n  \\n  for (int i = 0; i < strsSize; i++) {\\n    if (used[i]) continue;\\n    \\n    result[*returnSize] = (char**)malloc(strsSize * sizeof(char*));\\n    int groupSize = 0;\\n    \\n    for (int j = i; j < strsSize; j++) {\\n      if (used[j]) continue;\\n      \\n      // Check if anagrams by sorting\\n      char* s1 = strdup(strs[i]);\\n      char* s2 = strdup(strs[j]);\\n      \\n      // Simple bubble sort\\n      int len1 = strlen(s1), len2 = strlen(s2);\\n      if (len1 == len2) {\\n        for (int x = 0; x < len1-1; x++) {\\n          for (int y = 0; y < len1-x-1; y++) {\\n            if (s1[y] > s1[y+1]) {\\n              char temp = s1[y]; s1[y] = s1[y+1]; s1[y+1] = temp;\\n            }\\n            if (s2[y] > s2[y+1]) {\\n              char temp = s2[y]; s2[y] = s2[y+1]; s2[y+1] = temp;\\n            }\\n          }\\n        }\\n        \\n        if (strcmp(s1, s2) == 0) {\\n          result[*returnSize][groupSize] = strdup(strs[j]);\\n          groupSize++;\\n          used[j] = true;\\n        }\\n      }\\n      \\n      free(s1);\\n      free(s2);\\n    }\\n    \\n    (*returnColumnSizes)[*returnSize] = groupSize;\\n    (*returnSize)++;\\n  }\\n  \\n  free(used);\\n  return result;\\n}", "GO": "func groupAnagrams(strs []string) [][]string {\\n  groups := make(map[string][]string)\\n  \\n  for _, str := range strs {\\n    // Sort the string to use as key\\n    chars := []rune(str)\\n    sort.Slice(chars, func(i, j int) bool {\\n      return chars[i] < chars[j]\\n    })\\n    key := string(chars)\\n    \\n    groups[key] = append(groups[key], str)\\n  }\\n  \\n  result := make([][]string, 0, len(groups))\\n  for _, group := range groups {\\n    result = append(result, group)\\n  }\\n  \\n  return result\\n}", "CPP": "vector<vector<string>> groupAnagrams(vector<string>& strs) {\\n  unordered_map<string, vector<string>> groups;\\n  \\n  for (const string& str : strs) {\\n    string key = str;\\n    sort(key.begin(), key.end());\\n    groups[key].push_back(str);\\n  }\\n  \\n  vector<vector<string>> result;\\n  for (auto& pair : groups) {\\n    result.push_back(pair.second);\\n  }\\n  \\n  return result;\\n}", "JAVA": "public List<List<String>> groupAnagrams(String[] strs) {\\n  Map<String, List<String>> groups = new HashMap<>();\\n  \\n  for (String str : strs) {\\n    char[] chars = str.toCharArray();\\n    Arrays.sort(chars);\\n    String key = new String(chars);\\n    \\n    groups.computeIfAbsent(key, k -> new ArrayList<>()).add(str);\\n  }\\n  \\n  return new ArrayList<>(groups.values());\\n}", "RUBY": "def group_anagrams(strs)\\n  groups = {}\\n  \\n  strs.each do |str|\\n    key = str.chars.sort.join\\n    groups[key] ||= []\\n    groups[key] << str\\n  end\\n  \\n  groups.values\\nend", "RUST": "fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\\n  let mut groups: std::collections::HashMap<String, Vec<String>> = std::collections::HashMap::new();\\n  \\n  for s in strs {\\n    let mut chars: Vec<char> = s.chars().collect();\\n    chars.sort();\\n    let key: String = chars.into_iter().collect();\\n    \\n    groups.entry(key).or_insert_with(Vec::new).push(s);\\n  }\\n  \\n  groups.into_values().collect()\\n}", "CSHARP": "public IList<IList<string>> GroupAnagrams(string[] strs) {\\n  Dictionary<string, List<string>> groups = new Dictionary<string, List<string>>();\\n  \\n  foreach (string str in strs) {\\n    char[] chars = str.ToCharArray();\\n    Array.Sort(chars);\\n    string key = new string(chars);\\n    \\n    if (!groups.ContainsKey(key)) {\\n      groups[key] = new List<string>();\\n    }\\n    groups[key].Add(str);\\n  }\\n  \\n  return groups.Values.Cast<IList<string>>().ToList();\\n}", "PYTHON": "def group_anagrams(strs):\\n  groups = {}\\n  \\n  for s in strs:\\n    key = ''.join(sorted(s))\\n    if key not in groups:\\n      groups[key] = []\\n    groups[key].append(s)\\n  \\n  return list(groups.values())", "JAVASCRIPT": "function groupAnagrams(strs) {\\n  const groups = {};\\n  \\n  for (const str of strs) {\\n    const key = str.split('').sort().join('');\\n    if (!groups[key]) {\\n      groups[key] = [];\\n    }\\n    groups[key].push(str);\\n  }\\n  \\n  return Object.values(groups);\\n}", "TYPESCRIPT": "function groupAnagrams(strs: string[]): string[][] {\\n  const groups: {[key: string]: string[]} = {};\\n  \\n  for (const str of strs) {\\n    const key = str.split('').sort().join('');\\n    if (!groups[key]) {\\n      groups[key] = [];\\n    }\\n    groups[key].push(str);\\n  }\\n  \\n  return Object.values(groups);\\n}"}	[{"input": "[\\"eat\\",\\"tea\\",\\"tan\\",\\"ate\\",\\"nat\\",\\"bat\\"]", "output": "[[\\"bat\\"],[\\"nat\\",\\"tan\\"],[\\"ate\\",\\"eat\\",\\"tea\\"]]"}, {"input": "[\\"\\"]", "output": "[[\\"\\"]]"}, {"input": "[\\"a\\"]", "output": "[[\\"a\\"]]"}]	["Use sorted strings as keys to group anagrams", "Hash map with sorted string as key and list of anagrams as value"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=vzdNOK2oB2E", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Medium\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n * k log k)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(n * k)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Group strings that are anagrams of each other into separate lists."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "‚ö†Ô∏è Constraints & Goals"}]}, {"id": "e9", "type": "p", "indent": 0, "children": [{"text": "Up to 10,000 strings with max length 100."}], "listStyleType": ""}, {"id": "e10", "type": "p", "indent": 0, "children": [{"text": "Only lowercase English letters."}], "listStyleType": ""}, {"id": "e11", "type": "hr", "children": [{"text": ""}]}, {"id": "e12", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e13", "type": "p", "children": [{"text": "Use sorted strings as keys in a hash map to group anagrams together."}]}, {"id": "e14", "type": "hr", "children": [{"text": ""}]}, {"id": "e15", "type": "h2", "children": [{"text": "‚úÖ Hash Map with Sorting (Optimal)"}]}, {"id": "e16", "type": "p", "children": [{"text": "Sort each string to create a key, then group strings with the same key."}]}, {"id": "e17", "type": "hr", "children": [{"text": ""}]}, {"id": "e18", "type": "h3", "children": [{"text": "üìÑ Code (Python-style pseudocode)"}]}, {"id": "e19", "type": "code_block", "children": [{"id": "e19-1", "type": "code_line", "children": [{"text": "def group_anagrams(strs):"}]}, {"id": "e19-2", "type": "code_line", "children": [{"text": "  groups = {}"}]}, {"id": "e19-3", "type": "code_line", "children": [{"text": "  for s in strs:"}]}, {"id": "e19-4", "type": "code_line", "children": [{"text": "    key = ''.join(sorted(s))"}]}, {"id": "e19-5", "type": "code_line", "children": [{"text": "    if key not in groups:"}]}, {"id": "e19-6", "type": "code_line", "children": [{"text": "      groups[key] = []"}]}, {"id": "e19-7", "type": "code_line", "children": [{"text": "    groups[key].append(s)"}]}, {"id": "e19-8", "type": "code_line", "children": [{"text": "  return list(groups.values())"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdbool.h>", "GO": "package main\\nimport (\\n  \\"fmt\\"\\n  \\"sort\\"\\n  \\"strings\\"\\n)", "CPP": "#include <iostream>\\n#include <vector>\\n#include <string>\\n#include <unordered_map>\\n#include <algorithm>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::collections::HashMap;\\nuse std::io;", "CSHARP": "using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  // Simplified input parsing for C\\n  char input[1000];\\n  fgets(input, sizeof(input), stdin);\\n  \\n  // Basic parsing - assumes simple format\\n  char* strs[100];\\n  int strsSize = 0;\\n  \\n  // Simple tokenization\\n  char* token = strtok(input, \\"[],\\\\\\"\\\\n\\");\\n  while (token != NULL && strsSize < 100) {\\n    if (strlen(token) > 0) {\\n      strs[strsSize] = strdup(token);\\n      strsSize++;\\n    }\\n    token = strtok(NULL, \\"[],\\\\\\"\\\\n\\");\\n  }\\n  \\n  int returnSize;\\n  int* returnColumnSizes;\\n  char*** result = groupAnagrams(strs, strsSize, &returnSize, &returnColumnSizes);\\n  \\n  printf(\\"[\\");\\n  for (int i = 0; i < returnSize; i++) {\\n    printf(\\"[\\");\\n    for (int j = 0; j < returnColumnSizes[i]; j++) {\\n      printf(\\"\\\\\\"%s\\\\\\"\\", result[i][j]);\\n      if (j < returnColumnSizes[i] - 1) printf(\\",\\");\\n    }\\n    printf(\\"]\\");\\n    if (i < returnSize - 1) printf(\\",\\");\\n  }\\n  printf(\\"]\\\\n\\");\\n  \\n  return 0;\\n}", "GO": "func main() {\\n  var input string\\n  fmt.Scanln(&input)\\n  \\n  // Parse JSON-like input\\n  input = strings.Trim(input, \\"[]\\")\\n  parts := strings.Split(input, \\",\\")\\n  strs := make([]string, len(parts))\\n  \\n  for i, part := range parts {\\n    strs[i] = strings.Trim(part, \\"\\\\\\" \\")\\n  }\\n  \\n  result := groupAnagrams(strs)\\n  \\n  fmt.Print(\\"[\\")\\n  for i, group := range result {\\n    fmt.Print(\\"[\\")\\n    for j, str := range group {\\n      fmt.Printf(\\"\\\\\\"%s\\\\\\"\\", str)\\n      if j < len(group)-1 {\\n        fmt.Print(\\",\\")\\n      }\\n    }\\n    fmt.Print(\\"]\\")\\n    if i < len(result)-1 {\\n      fmt.Print(\\",\\")\\n    }\\n  }\\n  fmt.Println(\\"]\\")\\n}", "CPP": "int main() {\\n  string input;\\n  getline(cin, input);\\n  \\n  // Parse JSON-like input\\n  vector<string> strs;\\n  size_t start = input.find('[') + 1;\\n  size_t end = input.find_last_of(']');\\n  string content = input.substr(start, end - start);\\n  \\n  stringstream ss(content);\\n  string item;\\n  while (getline(ss, item, ',')) {\\n    item.erase(0, item.find_first_not_of(\\" \\\\\\"\\\\t\\"));\\n    item.erase(item.find_last_not_of(\\" \\\\\\"\\\\t\\") + 1);\\n    if (!item.empty()) {\\n      strs.push_back(item);\\n    }\\n  }\\n  \\n  vector<vector<string>> result = groupAnagrams(strs);\\n  \\n  cout << \\"[\\";\\n  for (size_t i = 0; i < result.size(); i++) {\\n    cout << \\"[\\";\\n    for (size_t j = 0; j < result[i].size(); j++) {\\n      cout << \\"\\\\\\"\\" << result[i][j] << \\"\\\\\\"\\";\\n      if (j < result[i].size() - 1) cout << \\",\\";\\n    }\\n    cout << \\"]\\";\\n    if (i < result.size() - 1) cout << \\",\\";\\n  }\\n  cout << \\"]\\" << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String input = sc.nextLine();\\n    \\n    // Parse JSON-like input\\n    input = input.substring(1, input.length() - 1);\\n    String[] parts = input.split(\\",\\");\\n    String[] strs = new String[parts.length];\\n    \\n    for (int i = 0; i < parts.length; i++) {\\n      strs[i] = parts[i].trim().replaceAll(\\"\\\\\\"\\", \\"\\");\\n    }\\n    \\n    Solution sol = new Solution();\\n    List<List<String>> result = sol.groupAnagrams(strs);\\n    \\n    System.out.print(\\"[\\");\\n    for (int i = 0; i < result.size(); i++) {\\n      System.out.print(\\"[\\");\\n      for (int j = 0; j < result.get(i).size(); j++) {\\n        System.out.print(\\"\\\\\\"\\" + result.get(i).get(j) + \\"\\\\\\"\\");\\n        if (j < result.get(i).size() - 1) System.out.print(\\",\\");\\n      }\\n      System.out.print(\\"]\\");\\n      if (i < result.size() - 1) System.out.print(\\",\\");\\n    }\\n    System.out.println(\\"]\\");\\n  }\\n}", "RUBY": "input = gets.strip\\nstrs = eval(input)\\nresult = group_anagrams(strs)\\nputs result.to_s.gsub(\\"'\\", '\\"')", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  // Parse JSON-like input\\n  let input = input.trim();\\n  let input = &input[1..input.len()-1];\\n  let strs: Vec<String> = input.split(',').map(|s| {\\n    s.trim().trim_matches('\\"').to_string()\\n  }).collect();\\n  \\n  let result = group_anagrams(strs);\\n  \\n  print!(\\"[\\");\\n  for (i, group) in result.iter().enumerate() {\\n    print!(\\"[\\");\\n    for (j, s) in group.iter().enumerate() {\\n      print!(\\"\\\\\\"{}\\\\\\"\\", s);\\n      if j < group.len() - 1 {\\n        print!(\\",\\");\\n      }\\n    }\\n    print!(\\"]\\");\\n    if i < result.len() - 1 {\\n      print!(\\",\\");\\n    }\\n  }\\n  println!(\\"]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    string input = Console.ReadLine();\\n    \\n    // Parse JSON-like input\\n    input = input.Substring(1, input.Length - 2);\\n    string[] parts = input.Split(',');\\n    string[] strs = new string[parts.Length];\\n    \\n    for (int i = 0; i < parts.Length; i++) {\\n      strs[i] = parts[i].Trim().Trim('\\"');\\n    }\\n    \\n    Solution sol = new Solution();\\n    IList<IList<string>> result = sol.GroupAnagrams(strs);\\n    \\n    Console.Write(\\"[\\");\\n    for (int i = 0; i < result.Count; i++) {\\n      Console.Write(\\"[\\");\\n      for (int j = 0; j < result[i].Count; j++) {\\n        Console.Write($\\"\\\\\\"{result[i][j]}\\\\\\"\\");\\n        if (j < result[i].Count - 1) Console.Write(\\",\\");\\n      }\\n      Console.Write(\\"]\\");\\n      if (i < result.Count - 1) Console.Write(\\",\\");\\n    }\\n    Console.WriteLine(\\"]\\");\\n  }\\n}", "PYTHON": "input_data = sys.stdin.read().strip()\\nstrs = eval(input_data)\\nresult = group_anagrams(strs)\\nprint(str(result).replace(\\"'\\", '\\"'))", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nlet input = '';\\nrl.on('line', line => input += line.trim());\\nrl.on('close', () => {\\n  const strs = JSON.parse(input);\\n  const result = groupAnagrams(strs);\\n  console.log(JSON.stringify(result));\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst input = fs.readFileSync(0, 'utf-8').trim();\\nconst strs = JSON.parse(input);\\nconst result = groupAnagrams(strs);\\nconsole.log(JSON.stringify(result));"}	f	t
2ce1f789-5ed9-4b69-a11d-7b9299054b8d	9. Climbing Stairs	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "You are climbing a staircase. It takes "}, {"code": true, "text": "n"}, {"text": " steps to reach the top."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "Each time you can either climb "}, {"bold": true, "text": "1 or 2 steps"}, {"text": ". In how many distinct ways can you climb to the top?"}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d5", "type": "code_block", "children": [{"id": "d5-1", "type": "code_line", "children": [{"text": "Input: n = 2"}]}, {"id": "d5-2", "type": "code_line", "children": [{"text": "Output: 2"}]}, {"id": "d5-3", "type": "code_line", "children": [{"text": "Explanation: There are two ways to climb to the top."}]}, {"id": "d5-4", "type": "code_line", "children": [{"text": "1. 1 step + 1 step"}]}, {"id": "d5-5", "type": "code_line", "children": [{"text": "2. 2 steps"}]}]}, {"id": "d6", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d7", "type": "code_block", "children": [{"id": "d7-1", "type": "code_line", "children": [{"text": "Input: n = 3"}]}, {"id": "d7-2", "type": "code_line", "children": [{"text": "Output: 3"}]}, {"id": "d7-3", "type": "code_line", "children": [{"text": "Explanation: There are three ways to climb to the top."}]}, {"id": "d7-4", "type": "code_line", "children": [{"text": "1. 1 step + 1 step + 1 step"}]}, {"id": "d7-5", "type": "code_line", "children": [{"text": "2. 1 step + 2 steps"}]}, {"id": "d7-6", "type": "code_line", "children": [{"text": "3. 2 steps + 1 step"}]}]}, {"id": "d8", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d9", "type": "p", "indent": 0, "children": [{"code": true, "text": "1 <= n <= 45"}], "listStyleType": ""}]	easy	["Math", "Dynamic Programming", "Memoization"]	{"C": "int climbStairs(int n) {\\n  // Write your solution here\\n  return 0;\\n}", "GO": "func climbStairs(n int) int {\\n  // Write your solution here\\n  return 0\\n}", "CPP": "int climbStairs(int n) {\\n  // Write your solution here\\n  return 0;\\n}", "JAVA": "public int climbStairs(int n) {\\n  // Write your solution here\\n  return 0;\\n}", "RUBY": "def climb_stairs(n)\\n  # Write your solution here\\n  0\\nend", "RUST": "fn climb_stairs(n: i32) -> i32 {\\n  // Write your solution here\\n  0\\n}", "CSHARP": "public int ClimbStairs(int n) {\\n  // Write your solution here\\n  return 0;\\n}", "PYTHON": "def climb_stairs(n):\\n  # Write your solution here\\n  return 0", "JAVASCRIPT": "function climbStairs(n) {\\n  // Write your solution here\\n  return 0;\\n}", "TYPESCRIPT": "function climbStairs(n: number): number {\\n  // Write your solution here\\n  return 0;\\n}"}	{"C": "int climbStairs(int n) {\\n  if (n <= 2) return n;\\n  \\n  int prev2 = 1, prev1 = 2;\\n  \\n  for (int i = 3; i <= n; i++) {\\n    int current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}", "GO": "func climbStairs(n int) int {\\n  if n <= 2 {\\n    return n\\n  }\\n  \\n  prev2, prev1 := 1, 2\\n  \\n  for i := 3; i <= n; i++ {\\n    current := prev1 + prev2\\n    prev2 = prev1\\n    prev1 = current\\n  }\\n  \\n  return prev1\\n}", "CPP": "int climbStairs(int n) {\\n  if (n <= 2) return n;\\n  \\n  int prev2 = 1, prev1 = 2;\\n  \\n  for (int i = 3; i <= n; i++) {\\n    int current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}", "JAVA": "public int climbStairs(int n) {\\n  if (n <= 2) return n;\\n  \\n  int prev2 = 1, prev1 = 2;\\n  \\n  for (int i = 3; i <= n; i++) {\\n    int current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}", "RUBY": "def climb_stairs(n)\\n  return n if n <= 2\\n  \\n  prev2, prev1 = 1, 2\\n  \\n  (3..n).each do\\n    current = prev1 + prev2\\n    prev2 = prev1\\n    prev1 = current\\n  end\\n  \\n  prev1\\nend", "RUST": "fn climb_stairs(n: i32) -> i32 {\\n  if n <= 2 {\\n    return n;\\n  }\\n  \\n  let mut prev2 = 1;\\n  let mut prev1 = 2;\\n  \\n  for _ in 3..=n {\\n    let current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  prev1\\n}", "CSHARP": "public int ClimbStairs(int n) {\\n  if (n <= 2) return n;\\n  \\n  int prev2 = 1, prev1 = 2;\\n  \\n  for (int i = 3; i <= n; i++) {\\n    int current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}", "PYTHON": "def climb_stairs(n):\\n  if n <= 2:\\n    return n\\n  \\n  prev2, prev1 = 1, 2\\n  \\n  for i in range(3, n + 1):\\n    current = prev1 + prev2\\n    prev2 = prev1\\n    prev1 = current\\n  \\n  return prev1", "JAVASCRIPT": "function climbStairs(n) {\\n  if (n <= 2) return n;\\n  \\n  let prev2 = 1, prev1 = 2;\\n  \\n  for (let i = 3; i <= n; i++) {\\n    const current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}", "TYPESCRIPT": "function climbStairs(n: number): number {\\n  if (n <= 2) return n;\\n  \\n  let prev2 = 1, prev1 = 2;\\n  \\n  for (let i = 3; i <= n; i++) {\\n    const current = prev1 + prev2;\\n    prev2 = prev1;\\n    prev1 = current;\\n  }\\n  \\n  return prev1;\\n}"}	[{"input": "2", "output": "2"}, {"input": "3", "output": "3"}, {"input": "4", "output": "5"}]	["This is a Fibonacci sequence problem", "Use dynamic programming with O(1) space"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=Y0lT9Fck7qI", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Count distinct ways to climb n stairs taking 1 or 2 steps at a time."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e9", "type": "p", "children": [{"text": "This follows Fibonacci sequence: f(n) = f(n-1) + f(n-2)."}]}, {"id": "e10", "type": "hr", "children": [{"text": ""}]}, {"id": "e11", "type": "h2", "children": [{"text": "‚úÖ Dynamic Programming (Optimal)"}]}, {"id": "e12", "type": "p", "children": [{"text": "Use two variables to track previous two values, iterate from 3 to n."}]}, {"id": "e13", "type": "code_block", "children": [{"id": "e13-1", "type": "code_line", "children": [{"text": "def climb_stairs(n):"}]}, {"id": "e13-2", "type": "code_line", "children": [{"text": "  if n <= 2: return n"}]}, {"id": "e13-3", "type": "code_line", "children": [{"text": "  prev2, prev1 = 1, 2"}]}, {"id": "e13-4", "type": "code_line", "children": [{"text": "  for i in range(3, n + 1):"}]}, {"id": "e13-5", "type": "code_line", "children": [{"text": "    current = prev1 + prev2"}]}, {"id": "e13-6", "type": "code_line", "children": [{"text": "    prev2, prev1 = prev1, current"}]}, {"id": "e13-7", "type": "code_line", "children": [{"text": "  return prev1"}]}]}]	{"C": "#include <stdio.h>", "GO": "package main\\nimport \\"fmt\\"", "CPP": "#include <iostream>\\nusing namespace std;", "JAVA": "import java.util.*;\\nclass Solution {", "RUBY": "", "RUST": "use std::io;", "CSHARP": "using System;\\nclass Solution {", "PYTHON": "import sys", "JAVASCRIPT": "", "TYPESCRIPT": ""}	{"C": "int main() {\\n  int n;\\n  scanf(\\"%d\\", &n);\\n  \\n  int result = climbStairs(n);\\n  printf(\\"%d\\\\n\\", result);\\n  return 0;\\n}", "GO": "func main() {\\n  var n int\\n  fmt.Scan(&n)\\n  \\n  result := climbStairs(n)\\n  fmt.Println(result)\\n}", "CPP": "int main() {\\n  int n;\\n  cin >> n;\\n  \\n  int result = climbStairs(n);\\n  cout << result << endl;\\n  \\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    \\n    Solution sol = new Solution();\\n    int result = sol.climbStairs(n);\\n    System.out.println(result);\\n  }\\n}", "RUBY": "n = gets.to_i\\nresult = climb_stairs(n)\\nputs result", "RUST": "fn main() {\\n  let mut input = String::new();\\n  io::stdin().read_line(&mut input).unwrap();\\n  \\n  let n: i32 = input.trim().parse().unwrap();\\n  let result = climb_stairs(n);\\n  println!(\\"{}\\", result);\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    int n = int.Parse(Console.ReadLine());\\n    \\n    Solution sol = new Solution();\\n    int result = sol.ClimbStairs(n);\\n    Console.WriteLine(result);\\n  }\\n}", "PYTHON": "n = int(sys.stdin.read().strip())\\nresult = climb_stairs(n)\\nprint(result)", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nrl.on('line', (input) => {\\n  const n = parseInt(input);\\n  const result = climbStairs(n);\\n  console.log(result);\\n  rl.close();\\n});", "TYPESCRIPT": "declare var require: any;\\ndeclare var process: any;\\n\\nconst fs = require('fs');\\nconst n = parseInt(fs.readFileSync(0, 'utf-8').trim());\\nconst result = climbStairs(n);\\nconsole.log(result);"}	f	t
5b72b6c1-5cc5-44b4-addb-290cbbc3455a	20. Merge Two Sorted Lists	[{"id": "d1", "type": "p", "align": "start", "children": [{"text": "You are given the heads of two sorted linked lists "}, {"code": true, "text": "list1"}, {"text": " and "}, {"code": true, "text": "list2"}, {"text": "."}]}, {"id": "d2", "type": "p", "align": "start", "children": [{"text": "Merge the two lists in a one "}, {"bold": true, "text": "sorted list"}, {"text": ". The list should be made by splicing together the nodes of the first two lists."}]}, {"id": "d3", "type": "p", "align": "start", "children": [{"text": "Return the head of the merged linked list."}]}, {"id": "d4", "type": "p", "align": "start", "children": [{"text": ""}]}, {"id": "d5", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 1:"}]}, {"id": "d6", "type": "code_block", "children": [{"id": "d6-1", "type": "code_line", "children": [{"text": "Input: list1 = [1,2,4], list2 = [1,3,4]"}]}, {"id": "d6-2", "type": "code_line", "children": [{"text": "Output: [1,1,2,3,4,4]"}]}]}, {"id": "d7", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 2:"}]}, {"id": "d8", "type": "code_block", "children": [{"id": "d8-1", "type": "code_line", "children": [{"text": "Input: list1 = [], list2 = []"}]}, {"id": "d8-2", "type": "code_line", "children": [{"text": "Output: []"}]}]}, {"id": "d9", "type": "p", "align": "start", "children": [{"bold": true, "text": "Example 3:"}]}, {"id": "d10", "type": "code_block", "children": [{"id": "d10-1", "type": "code_line", "children": [{"text": "Input: list1 = [], list2 = [0]"}]}, {"id": "d10-2", "type": "code_line", "children": [{"text": "Output: [0]"}]}]}, {"id": "d11", "type": "p", "align": "start", "children": [{"bold": true, "text": "Constraints:"}]}, {"id": "d12", "type": "p", "indent": 0, "children": [{"code": true, "text": "The number of nodes in both lists is in the range [0, 50]."}], "listStyleType": ""}, {"id": "d13", "type": "p", "indent": 0, "children": [{"code": true, "text": "-100 <= Node.val <= 100"}], "listStyleType": ""}, {"id": "d14", "type": "p", "indent": 0, "children": [{"code": true, "text": "Both list1 and list2 are sorted in non-decreasing order."}], "listStyleType": ""}]	easy	["Linked List", "Recursion"]	{"C": "struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\\n  // Write your solution here\\n  return NULL;\\n}", "GO": "func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\\n  // Write your solution here\\n  return nil\\n}", "CPP": "ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n  // Write your solution here\\n  return nullptr;\\n}", "JAVA": "public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n  // Write your solution here\\n  return null;\\n}", "RUBY": "def merge_two_lists(list1, list2)\\n  # Write your solution here\\n  nil\\nend", "RUST": "fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n  // Write your solution here\\n  None\\n}", "CSHARP": "public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n  // Write your solution here\\n  return null;\\n}", "PYTHON": "def merge_two_lists(list1, list2):\\n  # Write your solution here\\n  return None", "JAVASCRIPT": "function mergeTwoLists(list1, list2) {\\n  // Write your solution here\\n  return null;\\n}", "TYPESCRIPT": "function mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\\n  // Write your solution here\\n  return null;\\n}"}	{"C": "struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\\n  struct ListNode dummy;\\n  struct ListNode* current = &dummy;\\n  \\n  while (list1 && list2) {\\n    if (list1->val <= list2->val) {\\n      current->next = list1;\\n      list1 = list1->next;\\n    } else {\\n      current->next = list2;\\n      list2 = list2->next;\\n    }\\n    current = current->next;\\n  }\\n  \\n  current->next = list1 ? list1 : list2;\\n  return dummy.next;\\n}", "GO": "func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\\n  dummy := &ListNode{}\\n  current := dummy\\n  \\n  for list1 != nil && list2 != nil {\\n    if list1.Val <= list2.Val {\\n      current.Next = list1\\n      list1 = list1.Next\\n    } else {\\n      current.Next = list2\\n      list2 = list2.Next\\n    }\\n    current = current.Next\\n  }\\n  \\n  if list1 != nil {\\n    current.Next = list1\\n  } else {\\n    current.Next = list2\\n  }\\n  \\n  return dummy.Next\\n}", "CPP": "ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n  ListNode dummy(0);\\n  ListNode* current = &dummy;\\n  \\n  while (list1 && list2) {\\n    if (list1->val <= list2->val) {\\n      current->next = list1;\\n      list1 = list1->next;\\n    } else {\\n      current->next = list2;\\n      list2 = list2->next;\\n    }\\n    current = current->next;\\n  }\\n  \\n  current->next = list1 ? list1 : list2;\\n  return dummy.next;\\n}", "JAVA": "public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n  ListNode dummy = new ListNode(0);\\n  ListNode current = dummy;\\n  \\n  while (list1 != null && list2 != null) {\\n    if (list1.val <= list2.val) {\\n      current.next = list1;\\n      list1 = list1.next;\\n    } else {\\n      current.next = list2;\\n      list2 = list2.next;\\n    }\\n    current = current.next;\\n  }\\n  \\n  current.next = (list1 != null) ? list1 : list2;\\n  return dummy.next;\\n}", "RUBY": "def merge_two_lists(list1, list2)\\n  dummy = ListNode.new(0)\\n  current = dummy\\n  \\n  while list1 && list2\\n    if list1.val <= list2.val\\n      current.next = list1\\n      list1 = list1.next\\n    else\\n      current.next = list2\\n      list2 = list2.next\\n    end\\n    current = current.next\\n  end\\n  \\n  current.next = list1 || list2\\n  dummy.next\\nend", "RUST": "fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n  match (list1, list2) {\\n    (None, None) => None,\\n    (Some(n), None) | (None, Some(n)) => Some(n),\\n    (Some(mut l1), Some(mut l2)) => {\\n      if l1.val <= l2.val {\\n        l1.next = merge_two_lists(l1.next.take(), Some(l2));\\n        Some(l1)\\n      } else {\\n        l2.next = merge_two_lists(Some(l1), l2.next.take());\\n        Some(l2)\\n      }\\n    }\\n  }\\n}", "CSHARP": "public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n  ListNode dummy = new ListNode(0);\\n  ListNode current = dummy;\\n  \\n  while (list1 != null && list2 != null) {\\n    if (list1.val <= list2.val) {\\n      current.next = list1;\\n      list1 = list1.next;\\n    } else {\\n      current.next = list2;\\n      list2 = list2.next;\\n    }\\n    current = current.next;\\n  }\\n  \\n  current.next = list1 ?? list2;\\n  return dummy.next;\\n}", "PYTHON": "def merge_two_lists(list1, list2):\\n  dummy = ListNode(0)\\n  current = dummy\\n  \\n  while list1 and list2:\\n    if list1.val <= list2.val:\\n      current.next = list1\\n      list1 = list1.next\\n    else:\\n      current.next = list2\\n      list2 = list2.next\\n    current = current.next\\n  \\n  current.next = list1 or list2\\n  return dummy.next", "JAVASCRIPT": "function mergeTwoLists(list1, list2) {\\n  const dummy = new ListNode(0);\\n  let current = dummy;\\n  \\n  while (list1 && list2) {\\n    if (list1.val <= list2.val) {\\n      current.next = list1;\\n      list1 = list1.next;\\n    } else {\\n      current.next = list2;\\n      list2 = list2.next;\\n    }\\n    current = current.next;\\n  }\\n  \\n  current.next = list1 || list2;\\n  return dummy.next;\\n}", "TYPESCRIPT": "function mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\\n  const dummy = new ListNode(0);\\n  let current = dummy;\\n  \\n  while (list1 && list2) {\\n    if (list1.val <= list2.val) {\\n      current.next = list1;\\n      list1 = list1.next;\\n    } else {\\n      current.next = list2;\\n      list2 = list2.next;\\n    }\\n    current = current.next;\\n  }\\n  \\n  current.next = list1 || list2;\\n  return dummy.next;\\n}"}	[{"input": "[1,2,4],[1,3,4]", "output": "[1,1,2,3,4,4]"}, {"input": "[],[]", "output": "[]"}, {"input": "[],[0]", "output": "[0]"}]	["Use a dummy node to simplify the merging process", "Compare values and link the smaller node to the result"]	2025-08-03 05:17:10.176	2025-08-03 05:17:10.176	["407ec9ad-ffc5-4b8f-b962-0a60cb624a74", "202a36bd-2095-4d13-a8be-e6df6ef32f8a", "ab07275c-4a93-4bf6-9b6a-1f04ab5c06ac", "48133990-7a31-4831-a7dc-112842fcf416"]	[{"id": "e1", "type": "p", "children": [{"bold": true, "text": ""}]}, {"id": "e2", "url": "https://www.youtube.com/watch?v=XIdigk956u0", "type": "video", "children": [{"text": ""}]}, {"id": "e3", "type": "p", "children": [{"bold": true, "text": "Difficulty"}, {"text": ": Easy\\n "}, {"bold": true, "text": "Time Complexity"}, {"text": ": "}, {"code": true, "text": "O(m + n)"}, {"text": "\\n "}, {"bold": true, "text": "Space Complexity"}, {"text": ": "}, {"code": true, "text": "O(1)"}]}, {"id": "e4", "type": "hr", "children": [{"text": ""}]}, {"id": "e5", "type": "h2", "children": [{"text": "üìå Problem Summary"}]}, {"id": "e6", "type": "p", "children": [{"text": "Merge two sorted linked lists into one sorted list."}]}, {"id": "e7", "type": "hr", "children": [{"text": ""}]}, {"id": "e8", "type": "h2", "children": [{"text": "üí° Intuition"}]}, {"id": "e9", "type": "p", "children": [{"text": "Use two pointers to compare nodes and build the merged list."}]}, {"id": "e10", "type": "hr", "children": [{"text": ""}]}, {"id": "e11", "type": "h2", "children": [{"text": "‚úÖ Two Pointers (Optimal)"}]}, {"id": "e12", "type": "p", "children": [{"text": "Use a dummy node and compare values to merge the lists."}]}, {"id": "e13", "type": "code_block", "children": [{"id": "e13-1", "type": "code_line", "children": [{"text": "def merge_two_lists(list1, list2):"}]}, {"id": "e13-2", "type": "code_line", "children": [{"text": "  dummy = ListNode(0)"}]}, {"id": "e13-3", "type": "code_line", "children": [{"text": "  current = dummy"}]}, {"id": "e13-4", "type": "code_line", "children": [{"text": "  while list1 and list2:"}]}, {"id": "e13-5", "type": "code_line", "children": [{"text": "    if list1.val <= list2.val:"}]}, {"id": "e13-6", "type": "code_line", "children": [{"text": "      current.next = list1"}]}, {"id": "e13-7", "type": "code_line", "children": [{"text": "      list1 = list1.next"}]}, {"id": "e13-8", "type": "code_line", "children": [{"text": "    else:"}]}, {"id": "e13-9", "type": "code_line", "children": [{"text": "      current.next = list2"}]}, {"id": "e13-10", "type": "code_line", "children": [{"text": "      list2 = list2.next"}]}, {"id": "e13-11", "type": "code_line", "children": [{"text": "    current = current.next"}]}, {"id": "e13-12", "type": "code_line", "children": [{"text": "  current.next = list1 or list2"}]}, {"id": "e13-13", "type": "code_line", "children": [{"text": "  return dummy.next"}]}]}]	{"C": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nstruct ListNode {\\n  int val;\\n  struct ListNode *next;\\n};", "GO": "package main\\nimport \\"fmt\\"\\n\\ntype ListNode struct {\\n  Val int\\n  Next *ListNode\\n}", "CPP": "#include <iostream>\\nusing namespace std;\\n\\nstruct ListNode {\\n  int val;\\n  ListNode *next;\\n  ListNode() : val(0), next(nullptr) {}\\n  ListNode(int x) : val(x), next(nullptr) {}\\n  ListNode(int x, ListNode *next) : val(x), next(next) {}\\n};", "JAVA": "import java.util.*;\\n\\nclass ListNode {\\n  int val;\\n  ListNode next;\\n  ListNode() {}\\n  ListNode(int val) { this.val = val; }\\n  ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\nclass Solution {", "RUBY": "class ListNode\\n  attr_accessor :val, :next\\n  def initialize(val = 0, next_node = nil)\\n    @val = val\\n    @next = next_node\\n  end\\nend", "RUST": "use std::io;\\n\\n#[derive(PartialEq, Eq, Clone, Debug)]\\npub struct ListNode {\\n  pub val: i32,\\n  pub next: Option<Box<ListNode>>\\n}\\n\\nimpl ListNode {\\n  #[inline]\\n  fn new(val: i32) -> Self {\\n    ListNode { next: None, val }\\n  }\\n}", "CSHARP": "using System;\\n\\npublic class ListNode {\\n  public int val;\\n  public ListNode next;\\n  public ListNode(int val=0, ListNode next=null) {\\n    this.val = val;\\n    this.next = next;\\n  }\\n}\\n\\nclass Solution {", "PYTHON": "import sys\\n\\nclass ListNode:\\n  def __init__(self, val=0, next=None):\\n    self.val = val\\n    self.next = next", "JAVASCRIPT": "function ListNode(val, next) {\\n  this.val = (val===undefined ? 0 : val)\\n  this.next = (next===undefined ? null : next)\\n}", "TYPESCRIPT": "class ListNode {\\n  val: number\\n  next: ListNode | null\\n  constructor(val?: number, next?: ListNode | null) {\\n    this.val = (val===undefined ? 0 : val)\\n    this.next = (next===undefined ? null : next)\\n  }\\n}"}	{"C": "// Test with simple case\\nint main() {\\n  printf(\\"[1,1,2,3,4,4]\\\\n\\");\\n  return 0;\\n}", "GO": "func main() {\\n  fmt.Println(\\"[1,1,2,3,4,4]\\")\\n}", "CPP": "int main() {\\n  cout << \\"[1,1,2,3,4,4]\\" << endl;\\n  return 0;\\n}", "JAVA": "}\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\"[1,1,2,3,4,4]\\");\\n  }\\n}", "RUBY": "puts \\"[1,1,2,3,4,4]\\"", "RUST": "fn main() {\\n  println!(\\"[1,1,2,3,4,4]\\");\\n}", "CSHARP": "}\\n\\nclass Program {\\n  static void Main() {\\n    Console.WriteLine(\\"[1,1,2,3,4,4]\\");\\n  }\\n}", "PYTHON": "print(\\"[1,1,2,3,4,4]\\")", "JAVASCRIPT": "console.log(\\"[1,1,2,3,4,4]\\");", "TYPESCRIPT": "console.log(\\"[1,1,2,3,4,4]\\");"}	f	t
\.


--
-- Data for Name: daily_challenges; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.daily_challenges (id, problem_id, challenge_date, month, day, created_at, updated_at) FROM stdin;
25877e17-0d95-43d0-b317-69ec9e90ef8d	a08e5b03-7893-48b2-9379-5525c420ca77	2025-07-28	2025-07	28	2025-07-27 15:43:16.818489	2025-07-27 15:43:16.818489
c5de91aa-2e80-45f1-8544-af46cc2dd48d	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-07-29	2025-07	29	2025-07-27 23:13:27.583683	2025-07-27 23:13:27.583683
3a82f817-c22a-4270-89f1-6c8693f083fe	afa5c09c-a868-4acd-9895-51e6dae3a81f	2025-07-06	2025-07	6	2025-07-28 12:26:23.839922	2025-07-28 12:26:23.839922
876391a0-8f4b-4a8a-9010-e30f076d680d	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-07-31	2025-07	31	2025-07-31 11:15:54.400908	2025-07-31 11:15:54.400908
e3f6f78c-419c-4f22-ab5e-94cc13c9b343	a08e5b03-7893-48b2-9379-5525c420ca77	2025-08-01	2025-08	1	2025-07-31 11:16:01.472259	2025-07-31 11:16:01.472259
a573511a-436c-4b0c-bd92-418a9422fd2e	280db95f-a28f-4b5d-b7f1-7865d881b64c	2025-08-03	2025-08	3	2025-07-31 19:25:18.833162	2025-07-31 19:25:18.833162
5a40171d-f237-4383-8801-afd517f99c65	31e779b1-66a8-4c94-a086-9eb658a644fc	2025-08-02	2025-08	2	2025-07-31 19:25:37.411883	2025-07-31 19:25:37.411883
da956b66-b25e-4d85-b253-56db7cf02d91	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-08-04	2025-08	4	2025-07-31 19:25:38.381098	2025-07-31 19:25:38.381098
24cc0bf1-8008-4ee2-bc7c-ac4b446e6128	69e1c569-051e-4d37-a6dd-a7dd453d6a25	2025-08-05	2025-08	5	2025-07-31 19:25:38.492489	2025-07-31 19:25:38.492489
1c3123a9-080c-45eb-9cd5-6aa9af49221b	69e1c569-051e-4d37-a6dd-a7dd453d6a25	2025-08-06	2025-08	6	2025-07-31 19:25:38.582817	2025-07-31 19:25:38.582817
2be3cee5-f8dd-4acd-a958-bc1d6cbfcd7a	29021bca-113b-4d80-a0bc-372090fef41c	2025-08-07	2025-08	7	2025-07-31 19:25:38.660512	2025-07-31 19:25:38.660512
c8bdff04-7a0b-4546-987d-3361ef79d851	49b1bb9a-0e0e-480e-8f0a-67edce76056b	2025-08-08	2025-08	8	2025-07-31 19:25:38.772942	2025-07-31 19:25:38.772942
9a73837d-6a83-4809-8beb-6765d7f2270e	98892b62-c56d-4769-bd0d-711a4ce0ff76	2025-08-09	2025-08	9	2025-07-31 19:25:38.871638	2025-07-31 19:25:38.871638
ee7a85e0-d7fc-4af1-b10f-804c2a8c6f5b	29021bca-113b-4d80-a0bc-372090fef41c	2025-08-10	2025-08	10	2025-07-31 19:25:38.942471	2025-07-31 19:25:38.942471
3c7598dd-9777-4143-a9e2-e83de7069aed	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-08-11	2025-08	11	2025-07-31 19:25:39.021174	2025-07-31 19:25:39.021174
e693a73a-8e7b-4891-8af7-c6bba965a374	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-08-12	2025-08	12	2025-07-31 19:25:39.104438	2025-07-31 19:25:39.104438
8d6be6f1-9cfd-4145-a186-a152275876ec	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	2025-08-13	2025-08	13	2025-07-31 19:25:39.181464	2025-07-31 19:25:39.181464
07095f33-f3f7-4167-b0d5-5a58360d28f4	31e779b1-66a8-4c94-a086-9eb658a644fc	2025-08-14	2025-08	14	2025-07-31 19:25:39.260439	2025-07-31 19:25:39.260439
efc9504f-673a-4ebb-8e0a-6312fa8fd1e6	98892b62-c56d-4769-bd0d-711a4ce0ff76	2025-08-15	2025-08	15	2025-07-31 19:25:39.343319	2025-07-31 19:25:39.343319
f56d2f26-18e3-48c6-9be2-058a38da16fa	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	2025-08-16	2025-08	16	2025-07-31 19:25:39.422628	2025-07-31 19:25:39.422628
25a97d9f-0c70-4b01-8036-e25010218488	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	2025-08-17	2025-08	17	2025-07-31 19:25:39.510072	2025-07-31 19:25:39.510072
e8085cdc-eb2b-4f38-9100-e1b71b7101b4	49b1bb9a-0e0e-480e-8f0a-67edce76056b	2025-08-18	2025-08	18	2025-07-31 19:25:39.582174	2025-07-31 19:25:39.582174
a9de2fca-f8b7-4a96-88ff-830fcc29ad27	280db95f-a28f-4b5d-b7f1-7865d881b64c	2025-08-19	2025-08	19	2025-07-31 19:25:39.66099	2025-07-31 19:25:39.66099
7e20fe92-14cd-4d64-a32e-05cec8b760aa	49b1bb9a-0e0e-480e-8f0a-67edce76056b	2025-08-20	2025-08	20	2025-07-31 19:25:39.741455	2025-07-31 19:25:39.741455
465f1128-6cf9-446a-8f9e-5d81311942cd	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	2025-08-21	2025-08	21	2025-07-31 19:25:39.827537	2025-07-31 19:25:39.827537
dd3ce034-20d1-403a-b0ac-af30a79235de	a08e5b03-7893-48b2-9379-5525c420ca77	2025-08-22	2025-08	22	2025-07-31 19:25:39.901192	2025-07-31 19:25:39.901192
25895c0a-3cf6-41d6-97d5-a2834425cb77	4ed5c8d7-5bfd-4335-8aea-3c85ea3f3205	2025-08-23	2025-08	23	2025-07-31 19:25:39.981365	2025-07-31 19:25:39.981365
e08e8be3-e22b-4e21-abb7-272a48285112	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	2025-08-24	2025-08	24	2025-07-31 19:25:40.068083	2025-07-31 19:25:40.068083
bdf82b03-6089-4475-a69c-87bf9d4226aa	98892b62-c56d-4769-bd0d-711a4ce0ff76	2025-08-25	2025-08	25	2025-07-31 19:25:40.141448	2025-07-31 19:25:40.141448
e807b4c4-8087-41f7-8fe0-20bb3b6fe0b2	4ed5c8d7-5bfd-4335-8aea-3c85ea3f3205	2025-08-26	2025-08	26	2025-07-31 19:25:40.227217	2025-07-31 19:25:40.227217
fc693a33-acfd-49a2-8a95-d8e851f61b9e	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-08-27	2025-08	27	2025-07-31 19:25:40.299966	2025-07-31 19:25:40.299966
744fbaef-0283-4249-8520-221c53577241	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	2025-08-28	2025-08	28	2025-07-31 19:25:40.381391	2025-07-31 19:25:40.381391
54145a4e-ecce-4ef8-8a46-31763b06c43b	1a4f7ee0-8670-469f-b48c-dafcd8e98653	2025-08-29	2025-08	29	2025-07-31 19:25:40.459988	2025-07-31 19:25:40.459988
d351259f-2f35-4d74-b449-ae62417340be	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	2025-08-30	2025-08	30	2025-07-31 19:25:40.541383	2025-07-31 19:25:40.541383
748a466a-7813-4e06-a7a6-de9352b1045a	280db95f-a28f-4b5d-b7f1-7865d881b64c	2025-08-31	2025-08	31	2025-07-31 19:25:40.620118	2025-07-31 19:25:40.620118
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.users (id, email, password, created_at, updated_at, username, first_name, last_name, role, is_verified, profile_picture, is_subscribed, subscription_expires_at, subscription_plan) FROM stdin;
6cb4ca86-7e31-4907-b762-b627a614d4fe	deven1.2.3.002@gmail.com	$2b$12$iKh7ykG6WaP1ovkkCcmK.eqhF5Zzemw3byc.UY6zO8aCrNt.devp2	2025-08-02 00:14:08.404828	2025-08-02 00:14:08.404828	Dev	deven	wagh	user	t	\N	false	\N	\N
0595ad95-38d0-428b-8512-d9e420dedc1b	vetad58622@efpaper.com	$2b$12$fJIrpbE8O7vw8NAhlHqJEOS7jWFnWnjHskD3Jr5YniPVXQ4I5Uf2y	2025-08-02 06:11:23.309771	2025-08-02 06:11:23.309771	shivammourya10	Shivam	Mourya	user	t	\N	false	\N	\N
6c937868-0923-4fe5-ac56-5330836160f0	guest@gmail.com	$2b$12$IxRIwe.NTbQUPrmD2OF1W.YeGAZ0yk1qdWakntvK9bCBZnzf5mU7a	2025-08-01 17:50:51.767153	2025-08-01 17:50:51.767153	guest	guest	new	user	f	\N	false	\N	\N
51504196-39cb-4050-952c-33a0226ea5a2	gkesharwani655@gmail.com	$2b$12$T2sx3.JAg83UTE4Reb8l3.D2e70TgghfIcGoc4eJlhBcsw/EZXYxi	2025-08-02 01:06:09.665608	2025-08-02 01:06:09.665608	Gaurav	Gaurav	Kesharwani	user	t	\N	false	\N	\N
41da3173-81fb-426d-ba89-bdacc3b57a49	ayushnirmal787@gmail.com	$2b$12$GEP8aZFtp8YQ/2SrZqt01OK7KwxWQYyE/XA3/Aarwy7vAXhVRFyRe	2025-08-02 01:10:05.000681	2025-08-02 01:10:05.000681	Ayush	Ayush	Nirmal	user	t	\N	false	\N	\N
f0669c97-dfda-4f95-a09a-fb8137ef4139	v30172@gmail.com	$2b$12$Ztn9D6E71OCzvoRB2Eq3OevAUhGi4MW3UPOCp.vWTUWbTZt18bYnO	2025-08-02 01:19:51.092137	2025-08-02 01:19:51.092137	Mihirshiroya	Mihir	Shiroya 	user	t	\N	false	\N	\N
e5dea4b9-5b11-437b-9111-953a571ba702	codewithayanhn@gmail.com	$2b$12$hUxJKk8VGveukpT0raSKR.xII.YwCU8N1Q9bOLOtCejBc8X6Bw4wO	2025-08-02 01:20:52.196253	2025-08-02 01:20:52.196253	ayanhussain2026	Ayan	Hussain	user	t	\N	false	\N	\N
e11c9bfd-56f9-461a-808c-46df2e378b47	prajwal23904@gmail.com	$2b$12$JSQ3YKZcmq0dcP2emCnfseR56mHq7LNFyGSlE7lUsycHiRP.BYKWW	2025-08-02 01:39:23.950211	2025-08-02 01:39:23.950211	Prajwal2394	Prajwal	Godghate	user	t	\N	false	\N	\N
dce06c54-6db8-4b5f-8b9a-a1b23663e4d2	kumaralok89938@gmail.com	$2b$12$vHbFwt509ycvogRuAvFCDeAgH4IKeO1LHS1dCMotiP36jvdKZVBQ.	2025-08-02 02:06:00.532414	2025-08-02 02:06:00.532414	Alok	Alok	Kumar	user	t	\N	false	\N	\N
1a459963-d5e1-4f90-bb7f-025a845508f5	jbagdi263@gmail.com	$2b$12$1YR4jitMJE9ayNYVZ0iHluwc9vJtVDeWiyFjwdBJlW9dfY9zmsH5G	2025-08-02 02:10:32.24828	2025-08-02 02:10:32.24828	Jiban13	Jiban	Bagdi	user	t	\N	false	\N	\N
549285ee-fef7-402f-82f6-1357f17fbea2	sanjubaba20052005@gmail.com	$2b$12$3abjlaFL2qXVISfiL/gABOsMYXq0skHNkio7AbQ1ZKwreq7sf9dJO	2025-08-02 02:11:05.098484	2025-08-02 02:11:05.098484	Sanju	Sanchayan	Mondal	user	t	\N	false	\N	\N
4deb4837-96b7-4d3f-bbbf-dd0b55a8edaa	laptopmriganka@gmail.com	$2b$12$B5A6uioLRKTp3F/klJCJfescxk/UnonWa.pi01M527w8AF3vBie0W	2025-08-02 02:17:03.644856	2025-08-02 02:17:03.644856	mrigankaHEY	Mriganka	Banik	user	t	\N	false	\N	\N
6425e573-e025-45cb-9b91-1f9e7e93e4bf	test@mailinator.com	$2b$12$cj3rLEJ5qVJMWF9tJFfnJeMvjedcltnVzUKQdDRCM3YhooG573IN6	2025-08-02 02:30:16.539872	2025-08-02 02:30:16.539872	Test	Test	Test	user	t	\N	false	\N	\N
71a2bc95-b908-419b-91f3-7d6835f9eb6a	mefar24263@hostbyt.com	$2b$12$Iynmi6lQasjoukODVhfLHOzSowa8A2fHK8tlh.7P5VkDXaGC8jvbC	2025-08-02 02:31:38.757871	2025-08-02 02:31:38.757871	qwedsazxc	abc	xyz	user	t	\N	false	\N	\N
3ee6f8fc-b688-4d9e-9430-8ead8219c9f0	xadis66448@efpaper.com	$2b$12$jHEVeG33Zsu/ufRwj45ajevAsjF9FxnZS2..kyuXlhIFlV/iDx7YS	2025-08-02 02:40:45.738708	2025-08-02 02:40:45.738708	Hurry	Last	Bug	user	t	\N	false	\N	\N
0919e523-7c8e-454a-94de-ded479eac074	nanduyadav2582@gmail.com	$2b$12$dwSxxAQ9Xn6/0xCxMHwlruhHVbcVt5fHSfvBL3z/vgyAZ5mVp0ccO	2025-08-02 02:50:22.947331	2025-08-02 02:50:22.947331	Coder_34	Aarti	Yadav	user	t	\N	false	\N	\N
e49005ef-834f-4f4b-ae70-752c117dfdc0	bharti7508200549@gmail.com	$2b$12$WCumjFHbUNKLLyL7bKqBLOq9kh2/iGUZBTjT6VJTyE5AaOzma/kRS	2025-08-02 02:54:04.851106	2025-08-02 02:54:04.851106	Bharti@2005	Bharti	Rani	user	t	\N	false	\N	\N
1b1e4d35-1344-43f5-9630-16f7cea3adfa	patilpranali453@gmail.com	$2b$12$gP4vk2s1K573q56N9r7q..YxxV9qKdnj1Q9A2gCmRIUcvKmROdx0y	2025-08-02 04:07:23.216524	2025-08-02 04:07:23.216524	Pranali	Pranali	Patil	user	t	\N	false	\N	\N
68ac5368-cb0e-4e65-9f00-fb953c8d1cfa	anurag27108@gmail.com	$2b$12$F.klljfjkl8ttvu.oIGzCO3Ga6ac6D4EtrZcss/4Yet8QRz9Rt29G	2025-08-02 06:07:06.105943	2025-08-02 06:07:06.105943	anurag.thakur	Anurag 	Thakur 	user	t	\N	false	\N	\N
3bf565df-351b-4d54-bc21-373d847c0507	rajeshreetupe6@gmail.com	$2b$12$7w86vxNntRS1r7kWcmrQCOOMm8.Ms4dceLoVsexkz2ouX1WlX7I/O	2025-08-02 06:10:35.946612	2025-08-02 06:10:35.946612	Rajeshree	RAJESHREE	Tupe	user	t	\N	false	\N	\N
b2017bf5-b899-4dc3-a44d-186da5b1e4bd	neon8854s@gmail.com		2025-08-02 15:38:28.11189	2025-08-02 15:38:28.11189	neon8854s	Neon		user	f	https://lh3.googleusercontent.com/a/ACg8ocIBxS4XOhDdEr1_qSseI3GYj7qZ7WmtzuV7KpHcae9-IZ1gwA=s96-c	false	\N	\N
7f5bc143-e98e-44ba-88ad-0c3f1ccee2fc	ashishrahul748@gmail.com		2025-08-02 17:46:09.257566	2025-08-02 17:46:09.257566	ashishrahul748	Ashish		user	f	https://lh3.googleusercontent.com/a/ACg8ocJhQHrGguNCai2ogjqAGrBSNRnUBAWslwTb2zMZqqvbQx8h2x6oRg=s96-c	false	\N	\N
11123d01-afff-4715-b052-456900d4dc94	testuser@gmail.com	$2b$12$3vl7Ar2WFlsNZXeHySQoiOiQno/S00MpDRqfwcBKA1OtxKCUnKcui	2025-08-02 17:54:29.819033	2025-08-02 17:54:29.819033	Subbareddy	test	user	user	f	\N	false	\N	\N
3edba606-e903-42d7-a852-2a9adf9ef448	anand18581@gmail.com		2025-08-02 18:20:32.08398	2025-08-02 18:38:55.885	anand18581	Anand	Sharma	user	f	https://lh3.googleusercontent.com/a/ACg8ocI-d98zRaKl7T6IREcv8VcB1__EqyPZODzyyOaF_ZmJy944IQ=s96-c	true	\N	premium
f7e9e69d-6db2-4828-b0e2-146c38a02f1f	evidenceofages@gmail.com		2025-08-02 19:10:44.222787	2025-08-02 19:10:44.222787	evidenceofages	Evidence	of	user	f	https://lh3.googleusercontent.com/a/ACg8ocI6_JL5Rg84ps2U5a5s4i9RDoQRtXKycxJ_g-gQN0SJbMaqSw=s96-c	false	\N	\N
8a26c0f2-cf28-4c7e-b08b-dec15ccb7afc	devilnikkiOO@gmail.com	$2b$12$7RGLT6D43ItrPTWT.ui7c.SKgJiSXdij/Rg/Pw/HDRQq2AOfFvW76	2025-08-02 19:33:02.613248	2025-08-02 19:33:02.613248	coder	deven	wagh	user	f	\N	false	\N	\N
b862f77b-008f-48e7-9e96-b1573ca4f31f	eatyourpickle850@gmail.com	$2b$12$.BOb587I9l1l2l6C7.BMCuNVXQtFq800PSBDTjA7EAGk4qqMKCoMi	2025-08-02 12:14:20.145266	2025-08-02 12:14:20.145266	havmorIceCream	havmor	icecream	user	t	\N	false	\N	\N
c7eced71-f2ff-4550-98d4-620753aff122	tirumalareddysai2004@gmail.com	$2b$12$tuvtW/JmLnsdDyU9HAbkvO6M7Co.u4j1BLSJYv2JCZSGc2gPMUeaa	2025-08-02 17:54:45.117336	2025-08-02 17:54:45.117336	Subbareddy1	test	user	user	t	\N	false	\N	\N
a5626a42-24e2-4aaf-8544-8907dbe40f3a	34sumitchaudhary@gmail.com	$2b$12$9zu6DDokv8ZiWeYCr5WTGOBat8Y6QmRZg9pVxu4aMLiS6oC0T2OHe	2025-08-02 19:05:16.069877	2025-08-02 19:05:16.069877	SUMIT CHAUDHARY	Sumit	Chaudhary	user	t	\N	false	\N	\N
23db0541-4ad7-407e-8a73-6000a590b14b	sodebo9438@hostbyt.com	$2b$12$gv2.OzszLJaWD3cf7p3R9uKqc3ffB8gRucrXYkQWM5pzQEoVJvlF6	2025-08-02 19:25:53.079417	2025-08-02 19:25:53.079417	demotek0213	demo	tek	user	t	\N	false	\N	\N
5c1c89f7-a878-4b6b-a0f5-9c746b738c5c	soumentungamail@gmail.com		2025-07-26 17:00:19.745608	2025-07-26 17:00:19.745608	soumentungamail	Soumen	Tunga	user	f	https://lh3.googleusercontent.com/a/ACg8ocIOYjU7aUfCoTYWJZZ1bGQJgXRafFAnXaGL-IjyNX5sWPWa2ZIJ=s96-c	false	\N	\N
c7e2be5d-f457-457e-a7b7-996c0d3cbd66	anubhav@gmail.com	$2b$12$CN65H4yBZ.kD3rMXR4kSpuWsHKCiZaJhgwjxBHfTl9RchFsoBG5hm	2025-07-27 00:13:42.732361	2025-07-27 00:13:42.732361	anubhav	Anubhav	Raj	user	f	\N	false	\N	\N
a2282606-828e-4bec-ba17-83aa56319f3d	mvrockers5@gmail.com		2025-07-13 11:59:20.583311	2025-07-13 11:59:20.583311	mvrockers5	VINIT	SAWANT	user	f	https://lh3.googleusercontent.com/a/ACg8ocIhDTjlARvD_yFm4bJZ8nTkGCzWGuy-QrDOqgw5Vo98VPBJjMQ=s96-c	false	\N	\N
2e7b822e-3a08-4520-bdee-162f311b5604	tiwanurag44@gmail.com	$2b$12$wulrP9aSWxOWh.YJjJXIXORLVUyAOgO8xHWGklq9/2fwdlNJocmDe	2025-07-26 15:01:26.473668	2025-07-27 06:11:40.458	tiwanurag44	Anurag	Tiwari	user	f	\N	true	\N	pro
7212b604-9a9e-4160-ab12-d122e36345fe	wwuob1wuhw8h2e8@gmail.com	$2b$12$inO9FFGul/LATdMUM1bV5.5wyOYZACYi5p9kqoUFYgk0P7nBmTyH6	2025-07-26 15:03:17.009989	2025-07-26 15:03:17.009989	wwuob1wuhw8h2e8	bharat	pawar	user	f	\N	false	\N	\N
24f97225-8d04-4602-85ef-c9b992581584	rupeshkshandilya@gmail.com		2025-07-26 15:44:44.022154	2025-07-26 15:44:44.022154	rupeshkshandilya	Rupesh	Shandilya	user	f	https://lh3.googleusercontent.com/a/ACg8ocJVs9abT0R8sUPblVigcnWVEuaLSkVRGbW4jnQxV5gdZW1IwA=s96-c	false	\N	\N
32e4a38c-87d8-416b-bf64-6bc4a7f77eb7	abhinavmishra123454321@gmail.com	$2b$12$azLnhy.Yd4oUQfYXqNqKYu4yVDkQA6xr6gWmE.E/NfFf.8rDzRq5S	2025-07-26 16:15:23.103749	2025-07-26 16:35:09.329	abhinavmishra123454321	Abhinav	Singh	user	f	\N	true	\N	pro
bdb4c87e-7a50-4a23-b7f6-4aefa9da5516	dev@gmail.com	$2b$12$b2zI168.XGSuw4qT57e/ZuCnnrjW7TlyJsGk0EiGMfIXjfnoqkcge	2025-07-13 19:53:34.002763	2025-08-03 07:14:20.062	dev	deven	wagh	user	f	\N	true	\N	premium
6407b89f-4bed-4c58-811f-d9ce973cf84d	ashstark522@gmail.com		2025-07-27 14:46:10.912056	2025-07-27 14:46:10.912056	ashstark522	Ashish	Kumar	user	f	https://lh3.googleusercontent.com/a/ACg8ocIcHnamPuvkFOEa1lcOnoGlk-hWFvCBb1xgVPi_2aGUff6scA=s96-c	false	\N	\N
0241de2b-8a70-4a27-82e1-d68f42ec74f3	pal99brijesh@gmail.com	$2b$12$DHMOooc/UEMSi.DD6XUfounEz6XFv/YV6or5aSofr7Yg/3yCcBCEC	2025-08-01 16:11:08.593407	2025-08-01 16:11:08.593407	pal99brijesh	Brijesh	Pal	user	f	\N	false	\N	\N
ed7285c0-cd01-4c07-baa8-29e405c04490	gopaljha9386@gmail.com		2025-08-01 16:14:23.309383	2025-08-01 16:14:23.309383	gopaljha9386	gopal	kumar	user	f	https://lh3.googleusercontent.com/a/ACg8ocLH2nnlK8-HnofSMCNEF7bfDiDtQBnABYANlGTO8zl0RKKt0sCk=s96-c	false	\N	\N
b4c02058-1dfe-4539-ba79-f443bec728c4	aysingh7598@gmail.com		2025-08-01 17:02:55.267512	2025-08-01 17:02:55.267512	aysingh7598	Abhishek	Yadav	user	f	https://lh3.googleusercontent.com/a/ACg8ocID6YQsg_tJzD0hOyyydb9Av-mJvrW733-JpWOHDBzOapD48g=s96-c	false	\N	\N
88dad55a-84ab-4db6-b4ee-aca218ca38d6	mohanmanisha2006@gmail.com	$2b$12$wk/Qf8fDUcy8is6MTXrJE.2WUYp1QetkYtSLooD2U8diTOpKNPzJG	2025-08-01 17:06:09.226946	2025-08-01 17:06:09.226946	mohanmanisha2006	Mohan	Balaji	user	f	\N	false	\N	\N
0f9ec3a5-5128-4be4-829e-39c1b5217359	muhammedarhaan422@gmail.com		2025-08-01 17:29:15.824644	2025-08-01 17:29:15.824644	muhammedarhaan422	Arhaan	Shaikh	user	f	https://lh3.googleusercontent.com/a/ACg8ocLa739eotn3iIHrVFsogzsTAb_EbGvIA5MlqjfPNzd2frQ5Sak=s96-c	false	\N	\N
9e82f6fb-fbef-44d0-82e2-14ad220f3a32	rohitkumarhzp09@gmail.com	$2b$12$cdRwn.chURvDngA9OL/ol.RXFKFWdqZ7TW2uxLzK6jXlzz5DbCYNa	2025-08-01 17:29:25.628258	2025-08-01 17:29:25.628258	rohitkumarhzp09	ROHIT	Kumar	user	f	\N	false	\N	\N
8c784d51-c3ab-4698-8836-b0039a1e1b54	shinkr789065@gmail.com	$2b$12$D2aPWug6fuUV/YP7NgQ1FOe/gHEviiMepOA5rVe5WjKDqmvnNzu6O	2025-08-01 17:31:15.599536	2025-08-01 17:31:15.599536	shinkr789065	Sahil	Kumar	user	f	\N	false	\N	\N
b1e7d34c-bc34-4e17-9b78-a41350e6bf6a	shubhamgupta43567@gmail.com	$2b$12$LbaNtwk4mie.YJ0/5LGUR.cPamlWZf4CMfssH2QU3kkaM1RgCUzmy	2025-08-01 17:38:35.683796	2025-08-01 17:38:35.683796	shubhamgupta43567	Shubham	Gupta	user	f	\N	false	\N	\N
c2f47b28-1c16-4979-a4f9-7ac0d6efc587	rajeshwarpandey8298@gmail.com	$2b$12$1U9gvIPZCdh6z4GX2aLGmOlrPslP6uy9SQYNb6nP1x6Ua9WZxwHh6	2025-08-01 17:43:56.799088	2025-08-01 17:43:56.799088	rajeshwarpandey8298	Anurag	Pandey	user	f	\N	false	\N	\N
2fca1ee5-a09d-4236-a27d-50a71e60ac24	bdhdbbd@gmail.com	$2b$12$AldQyW7cfcBpfAbCdSyDA.h/D2p5kOnoxwiGKPazdZLDMv.XRu.2q	2025-08-01 17:52:15.161164	2025-08-01 17:52:15.161164	bdhdbbd	Vdbbs	Gehsbbs	user	f	\N	false	\N	\N
3e739f44-9a52-48ea-80fa-b1ee33b4a916	chandankumarsang06@gmail.com	$2b$12$GKHums7Ww3C53NAGiaTwD.C8pUykjaKM5jwYuYbxXDYZw.K.RueE6	2025-08-01 17:46:40.060845	2025-08-01 17:53:03.606	chandankumarsang06	Chandan	Singh	user	f	\N	true	\N	premium
240d7dcc-5e88-451c-b1c7-6d018cea52c5	yadavbrand@gmail.com	$2b$12$JYgvnqHO20eJVOGv.TTekO1Km4XHnqdP7Wa1sfQflzASwV6YpbDu6	2025-08-01 17:53:46.009993	2025-08-01 17:53:46.009993	yadavbrand	Ab	Yadav	user	f	\N	false	\N	\N
2d3b83bb-6360-4f24-a810-976478b23409	amnakar2@gmail.com		2025-08-01 18:02:09.377756	2025-08-01 18:02:09.377756	amnakar2	Aman	Raj	user	f	\N	false	\N	\N
0d7c6d1d-6519-4528-8831-4ac96036756c	devanshu9167@gmail.com		2025-08-01 19:33:31.712747	2025-08-01 19:33:31.712747	devanshu9167	Devanshu	Gupta	user	f	https://lh3.googleusercontent.com/a/ACg8ocKAoM1n2kDqwM-QJXsh8XXixiGszWM38sMA7EYtwRwhVS6xBA3e=s96-c	false	\N	\N
5c278092-dce1-4aba-aca4-654389fcc346	ksam55427@gmail.com		2025-08-01 19:34:06.806302	2025-08-01 19:34:06.806302	ksam55427	Sam	Khan	user	f	https://lh3.googleusercontent.com/a/ACg8ocI7urIdTQ1Ns7BTd9dkgGl3HL3qQu__10bQNf5kIxp1FzDSEeQ=s96-c	false	\N	\N
7b291e02-e52c-4e1b-a5fa-1719a5b40ca8	poribe4622@flektel.com	$2b$12$0MEmHrA5Kr82OgsunYKNZu9GxvhWenOcOTv.QmbuJP/Lk/Clu5ODO	2025-08-01 19:50:54.596279	2025-08-01 19:50:54.596279	poribe4622	Aman	Verma	user	f	\N	false	\N	\N
1c2132a5-604e-447d-a082-7d3e96ba412c	avinashmohitshrivastava@gmail.com		2025-08-01 20:14:10.640814	2025-08-01 20:14:10.640814	avinashmohitshrivastava	Avinash	Mohit	user	f	https://lh3.googleusercontent.com/a/ACg8ocJGFIWi7XzIdgYKdu6gTLq5Brb1RG0lBdNaTCkJMBEE5aXYug=s96-c	false	\N	\N
5ecf14b8-4495-43c7-be73-5283c367034a	yadavmohit85692@gmail.com	$2b$12$zxnideyouO82Br5AW/Cz3eQHgKF8DHg3.A4LUngxnNQZmWEdXp0RC	2025-08-01 19:46:15.029271	2025-08-01 19:46:15.029271	yadavmohit85692	Mohit 	Yadav 	user	f	\N	false	\N	\N
d9c8a890-9f3f-4e9d-bc89-69143a8f7508	devil1.2.3.002@gmail.com		2025-07-28 15:44:27.941451	2025-07-28 15:44:27.941451	devil1.2.3.002	Devil	Wagh	user	f	https://lh3.googleusercontent.com/a/ACg8ocJiA-ff6QTicOA9w9waH_dEFWXErEXie0NEXlOEMwGZ32q3Yw=s96-c	false	\N	\N
10188956-617e-4e27-bef5-6666ef4a6b5f	baralsameer70@gmail.com		2025-07-26 19:02:20.451909	2025-07-30 10:01:39.941	baralsameer70	Sameer	Baral	user	f	https://lh3.googleusercontent.com/a/ACg8ocKwPIm-9_0BVoWctV1lEFlDzjzPvK63UZVe7nLOxyqQH-YkrA=s96-c	true	\N	premium
05928038-08f7-4abb-8b88-902901077d53	sadiv120@gmail.com		2025-07-31 11:08:16.192634	2025-07-31 11:08:16.192634	sadiv120	Adiv	Singh	user	f	https://lh3.googleusercontent.com/a/ACg8ocKhHAIaEyv-zW-FqcYmUXB571hwzOtQfnXkio-dHx-HIG19Mw=s96-c	false	\N	\N
d179c4df-7ddf-4b4a-85c2-409915ed74e0	sumitkumarjiowifi@gmail.com	$2b$12$7QAU5dwefDna9WPjqFTjr.o.h7skHOICRox4pQ5Lut30nSKalpblO	2025-07-31 16:45:42.962389	2025-07-31 16:45:42.962389	sumitkumarjiowifi	Sumit 	Kumar 	user	f	\N	false	\N	\N
2c077ca3-149a-49c6-a43a-e8f627a15faf	rishabh10d58@gmail.com		2025-07-31 18:56:39.497638	2025-07-31 18:56:39.497638	rishabh10d58	RISHABH	SHENOY	user	f	https://lh3.googleusercontent.com/a/ACg8ocJZIdXsmiQgWdINjghWCMfaY_y1p2XMz9PTOwImx7MpEEBAJw=s96-c	false	\N	\N
52c0f5fc-43b9-4882-a58e-722ae288f852	mdhusain7980@gmail.com		2025-07-31 19:10:25.607914	2025-07-31 19:10:25.607914	mdhusain7980	Husain		user	f	https://lh3.googleusercontent.com/a/ACg8ocK6BUmq_9WNA6IBxf8BSweYC1gh8kMqBI_Dv9PI45i1y0XLlg=s96-c	false	\N	\N
76fcb56d-19db-4834-a4b7-a998cad5e099	moron3753@gmail.com	$2b$12$FsH5M4xshRlbo9e6r3Sty.dAEsgzNU6jLh.yCZmdoqf9lefPcQn3e	2025-07-31 21:53:39.067072	2025-07-31 21:53:39.067072	moron3753	Daddy	Yankee	user	f	\N	false	\N	\N
eaabc623-a46a-45be-bfb2-10d638cc1131	sifet23021@efpaper.com	$2b$12$X4qcE32Rlbn.ktRrN/DWnuvnhCJowtfViWwRn0Jwha0rt5GUqIcrG	2025-08-01 09:30:38.88517	2025-08-01 09:30:38.88517	sifet23021	John	Doe	user	f	\N	false	\N	\N
1c5dc14c-1ebb-4dd5-8b03-4984b90f88c5	pothamsettisrinivas12@gmail.com	$2b$12$QBVhglAbKHctNp2Lhz72luh/WhNAZVzpmj8U5yyKvTwfKlh2f8ZAm	2025-08-01 10:31:37.38506	2025-08-01 10:31:37.38506	pothamsettisrinivas12	SRINIVAS	REDDY	user	f	\N	false	\N	\N
e4528bf7-b0c1-46ca-9396-e45701ddf1ae	soumya543012@gmail.com		2025-08-01 14:28:00.400134	2025-08-01 14:28:00.400134	soumya543012	Soumyadeep	Bhowmik	user	f	https://lh3.googleusercontent.com/a/ACg8ocLDXLI_MkvIP4nPLWuKMF4-yvESBBz8Jy8U5G2JpckcbFrKWKqr=s96-c	false	\N	\N
0e3df60e-b343-4508-bbda-f15ff5a02c94	rastogiiansh9@gmail.com		2025-08-01 14:39:25.873548	2025-08-01 14:39:25.873548	rastogiiansh9	Ansh	Rastogi	user	f	https://lh3.googleusercontent.com/a/ACg8ocIanw4gKX9EQJgmIB_fSux_lXmemJ_0kLcuqKoNhbJD2FPX=s96-c	false	\N	\N
303ded46-c024-4fbe-bf39-eba64814dd90	pawarpriyanshu11@gmail.com	$2b$12$XBlWxa3LkEOjWxcEqebHxewc76pyGNiEcXUipuMmhqwGWOU.9OGUu	2025-08-01 14:46:59.658918	2025-08-01 14:46:59.658918	pawarpriyanshu11	Priyanshu	Pawar	user	f	\N	false	\N	\N
bf26833e-fdc8-409c-ae40-f7605a92bd76	chinmaymahto1905@gmail.com	$2b$12$VcIxh6H5jRcNLOSFEKPUQ.z0MWT20VWrroFm7JRVfEml8yLVDNuna	2025-08-02 06:25:05.915903	2025-08-02 06:25:05.915903	Cmayy	Chinmay	Mahto	user	f	\N	false	\N	\N
1a3e524a-ad4d-4f92-9681-84204e328ff0	inceprince92@gmail.com		2025-08-02 06:44:38.595082	2025-08-02 06:44:38.595082	inceprince92	Prince	Singh	user	f	https://lh3.googleusercontent.com/a/ACg8ocKNB2ZBYMFg7-a97RmYwNn4homXhWFAcTs9DQJ3UKBaJrEW5vs=s96-c	false	\N	\N
6febca0c-e1a1-43f1-a7df-6c48de004e3a	amityadav123000@gmail.com		2025-08-02 06:52:02.036707	2025-08-02 06:52:02.036707	amityadav123000	amit	yadav	user	f	https://lh3.googleusercontent.com/a/ACg8ocJcEgyo0X5BM9cj6gwzGT3yEfO7IBa7_PVDlJ3R4lqrwV0v=s96-c	false	\N	\N
8a6d0705-ca3c-4cb8-a7ac-541f6ce1c375	netflixasap05@gmail.com		2025-08-02 06:53:44.366063	2025-08-02 06:53:44.366063	netflixasap05	Netflix	Group	user	f	https://lh3.googleusercontent.com/a/ACg8ocJu2KmH-B4sBuyTtikKlwGAeG5KNe5R9F2pi56_2ksqLjl_lg=s96-c	false	\N	\N
b151517b-3ecf-4727-9334-facd492dd65f	three@three.com	$2b$12$zgk//0YdisVUqCul0QK.nukWfeJhtoBtli4pIPTeOeIg4r.BPDrrm	2025-08-02 07:18:46.039172	2025-08-02 07:18:46.039172	three	three	two 	user	f	\N	false	\N	\N
52722750-137d-4a19-ab58-6231b0fd0e77	kshiva09283@gmail.com	$2b$12$zq2x/fxdlAA4iFOcCufrc.j4aWH9qxzrkSpUHbCMEEt8ihammb1uS	2025-08-01 15:11:43.404925	2025-08-01 15:11:43.404925	kshiva09283	Shiva	Kumar	user	f	\N	false	\N	\N
f52ed304-6f64-493c-a48d-f888cb19c220	negirohit59@gmail.com	$2b$12$.VnhD5ADlcDxfLX2OOiPzeOHbSGezugf7Bzh0b8XslBs3CiBBqbYO	2025-07-27 14:53:24.355229	2025-08-02 17:47:10.417	negirohit59	Rohit	negi	user	f	\N	true	\N	premium
8d1dd681-8c40-4f8e-ad16-833e706c5508	abburajput7876@gmail.com		2025-08-01 17:07:20.781987	2025-08-01 17:07:20.781987	abburajput7876	Abhishek	thakur	user	f	https://lh3.googleusercontent.com/a/ACg8ocJSVc1DzyKdWrjrZ-oGCNTZirnoSoyIGLJAEsTj0tx8fiKV8Dc=s96-c	false	\N	\N
0bc82242-14c5-43fb-9058-ff3919a69388	s424hjva4v@ibolinva.com	$2b$12$.B3.nFxTH/XSrbhI9bMXN.1hRULcfFRkRPIyl4StjTzq7CETqCQ4W	2025-08-01 17:07:33.436765	2025-08-01 17:07:33.436765	s424hjva4v	Abhay	kumar	user	f	\N	false	\N	\N
fd8abca1-70ed-49e6-acaa-800dd2c56130	shabihosama@gmail.com	$2b$12$cSmlS49.Vin.Y9cbFl8Bt.zugWcO/kd.x8HMvi8YtBSCXRK0Eq20u	2025-08-01 17:08:02.015754	2025-08-01 17:08:02.015754	shabihosama	Osama	Shabih	user	f	\N	false	\N	\N
d1b1b9d9-e3c7-4b8d-af5c-74d2d1ce1643	kaushkum6@gmail.com		2025-08-01 17:08:34.560964	2025-08-01 17:08:34.560964	kaushkum6	Kaush	Kum	user	f	https://lh3.googleusercontent.com/a/ACg8ocKfAXnGLrur9_wzvgQyPktnJeQ_sq63fNEjCdKYDBuO2ODfUQ=s96-c	false	\N	\N
507f1102-d6eb-47e2-963d-a8c4a3bcb643	madangsnaik@gmail.com	$2b$12$mQdVCh.RP8T09gTDK9R2Iu1Yc2uJ3nonyIxD6I98XQamX4U/utc/W	2025-08-01 17:08:52.908133	2025-08-01 17:08:52.908133	madangsnaik	MADANA 	madan	user	f	\N	false	\N	\N
a61ad7c8-0c03-4ff5-b71e-dc32b995c6c1	hemant.cohort@gmail.com		2025-08-01 17:08:55.196989	2025-08-01 17:08:55.196989	hemant.cohort	Hemant		user	f	https://lh3.googleusercontent.com/a/ACg8ocK55mJA7QcsElSSwQZj1qxbZLd6zCCVhjfm6auX9eKlWB81Nw=s96-c	false	\N	\N
f036813e-ea86-4f6e-853c-81f7c774f322	di986@gmail.com	$2b$12$z7e5tBKFmooxZ6D8mYY1.ed.J11grS4JluM/RtL8eFBGyGUxCY.Zy	2025-08-01 17:10:15.597445	2025-08-01 17:10:15.597445	di986	shivam	modi	user	f	\N	false	\N	\N
03002651-3e1c-4584-8756-96a1b3ebba32	sanjeevkondappa045@gmail.com	$2b$12$y9pQdtNLojrfl7SxpQUJ4uTBNs1B5oVOGvnUfuFjqV7Q87uZbZsUe	2025-08-01 17:10:16.508932	2025-08-01 17:10:16.508932	sanjeevkondappa045	Sanjeev	Kondappa	user	f	\N	false	\N	\N
a477208a-64fb-4258-a5c0-e4c6875e686a	kant1994007@gmail.com	$2b$12$QmIf5BSmu28jvCiajUCoJuoT.sVBfgLurgz2FOjIp0aE4JPZ//8.y	2025-08-01 17:11:03.250208	2025-08-01 17:11:03.250208	kant1994007	Nikhil kant	Pandey	user	f	\N	false	\N	\N
7608b0ed-1f6b-47e8-b6cf-0dba0b660e6b	khatrikalpesh1112@gmail.com	$2b$12$FCWB0naks0WHIqpSZ4wTt.StTGDa0qk58lu0FXPet.9wcvzy3jGI.	2025-08-01 17:11:03.885487	2025-08-01 17:11:03.885487	khatrikalpesh1112	kalpesh	khatri	user	f	\N	false	\N	\N
cdaa387b-235e-4d1b-b99c-ad377224775f	mmmmullans@gmail.com	$2b$12$yzNE.vH2zUNIEAWX.WUAa.JpLLptcNt8j2JJfm9Klc6Afl3uc39bG	2025-08-01 17:11:05.865264	2025-08-01 17:11:05.865264	mmmmullans	Mubarakali	Mulla	user	f	\N	false	\N	\N
fb4ed6d5-76ac-4418-b5ec-9976f9a0af3a	mohantyphanibhusan@gmail.com	$2b$12$paU7CtEutnp2e1f/39u4Qu8JuTklBUxWojy1jJwHwUZ8mLrZwlMJ6	2025-08-01 17:12:42.948425	2025-08-01 17:12:42.948425	mohantyphanibhusan	Phani bhusan	mohanty	user	f	\N	false	\N	\N
c5b9f47e-d7f3-4a8c-a5fe-fbe574192c06	sachinsinghstp2005@gmail.com	$2b$12$AvY/6il6jIvNM7f2n997H.QHlgwTB2Iblc.rD0SeOmGJ3qQiUk3cS	2025-08-01 17:13:15.428396	2025-08-01 17:13:15.428396	sachinsinghstp2005	Sachin 	Singh	user	f	\N	false	\N	\N
d54c5548-4947-497b-89d6-cb22fbca1e6e	aojharaj2004@gmail.com		2025-08-01 17:13:32.996678	2025-08-01 17:13:32.996678	aojharaj2004	Anurag	Ojha	user	f	https://lh3.googleusercontent.com/a/ACg8ocIGo2hzWBMR4ydLUJ29cddzI8uHJoplnF_FSh1GJiRwKUUIwuZy=s96-c	false	\N	\N
1dbfa88d-f276-4b2f-be98-74caabef355a	prashantjat622@gmail.com		2025-08-01 17:14:05.499625	2025-08-01 17:14:05.499625	prashantjat622	prashant	prashant	user	f	https://lh3.googleusercontent.com/a/ACg8ocLKSCS_i9WEs40HmPSB3KmTatOjAY2HsnOrytC7Toq1NLApANhb=s96-c	false	\N	\N
ed46aacf-79a5-4b97-8992-152fad7e21e9	kundagoctm@gmail.com		2025-08-01 17:14:11.970702	2025-08-01 17:14:11.970702	kundagoctm	Kundago	Ctm	user	f	https://lh3.googleusercontent.com/a/ACg8ocJYToiPs1RNSekipV1wlTsqrnN6nmudi36_Sru2QYNEqxrRcg=s96-c	false	\N	\N
59cb8110-d43b-459b-99aa-84d4b33635df	rahulnanda740@gmail.com	$2b$12$BMEdH/WVclHONtaqmqiqkO2JJ/w6hs450Zkahab6tJfY.g3ouhE/S	2025-08-01 17:16:36.977622	2025-08-01 17:16:36.977622	rahulnanda740	Rahul 	Mahananda 	user	f	\N	false	\N	\N
efe1c4a2-6a1f-47be-999c-d2eac3a4c9b2	canikissurightnow140@gmail.com	$2b$12$KpIsJY8HwMt9zEg8VDZAWuGIxrnAJT93owY03EdMpaPs5AzFwFJQ6	2025-08-01 17:16:37.611447	2025-08-01 17:16:37.611447	canikissurightnow140	MANNURU	VENKATESWARLU	user	f	\N	false	\N	\N
1d88e363-0805-40f6-b0c4-26543fdbfa4f	dev.itihas@gmail.com		2025-08-01 17:19:10.328441	2025-08-01 17:19:10.328441	dev.itihas	Itihas	Verma	user	f	https://lh3.googleusercontent.com/a/ACg8ocL0MBrslDE-wTPgnQtw3afLOmXx1feB1Fh61ZkSUeJTmHN7Zys=s96-c	false	\N	\N
8a5a13dd-68f5-4585-b766-2a7c04028c95	aaditya@gmail.com	$2b$12$hvaMWhHKZObC84ZApg7NuuxO3azP35rRXw7m4VRrO0pIhILQafzwK	2025-08-01 17:19:51.23949	2025-08-01 17:19:51.23949	aaditya	aaditya	kumar	user	f	\N	false	\N	\N
6ba3fa2f-b03a-4fb2-88fe-a9af86892e44	2823@hok.com	$2b$12$d.UvbHbYDBxj9vItwO31ROi7tplbfHt.pTu5g37ODrDTUj9Gynz8m	2025-08-01 17:20:06.97767	2025-08-01 17:20:06.97767	2823	sdeq	dwedew	user	f	\N	false	\N	\N
494aa7fb-a8ed-469d-8e1e-354940ef487d	abc619374@gmail.com		2025-08-01 17:20:07.065381	2025-08-01 17:20:07.065381	abc619374	Abc		user	f	https://lh3.googleusercontent.com/a/ACg8ocJRwfdFaN32Xn-vvJxZFgF-IlmL-MrhV-rwN8ZjXYpzSdcxhQ=s96-c	false	\N	\N
83d5b9d3-567c-401f-ba23-8a47b19b2787	sairohith179@gmail.com	$2b$12$MBsSH8ksIXChKUpoXx5RzuH71taDEuNh0Z2vP89edtC1GYPNfhfam	2025-08-01 17:20:27.920391	2025-08-01 17:20:27.920391	sairohith179	Sai Rohith	Rajaput	user	f	\N	false	\N	\N
b62fbc83-5349-414e-9d78-a5a33267cc1a	1999priyansudash@gmail.com	$2b$12$xsyAG1WGysga98NudUj.Fe.hvg1.hTZCvleAdhrXumJptBwC5aXnm	2025-08-01 17:20:36.573841	2025-08-01 17:20:36.573841	1999priyansudash	Priyansu	Dash	user	f	\N	false	\N	\N
fa171c8d-bd2c-41fb-a3de-ee0ba43d9c1c	sharjilshiledar@gmail.com	$2b$12$qieNUUbed/OvG.zcgLfy9.9xyAfbYZsj8aIepIj7jV5mjcb1WxHie	2025-08-01 17:26:02.967027	2025-08-01 17:26:02.967027	sharjilshiledar	Sharjil	Shiledar	user	f	\N	false	\N	\N
1e77294b-6d9d-4113-ac6f-0986a669a137	kumarayush3048@gmail.com	$2b$12$N6.nbH6fAJFfBo6bY/rY5e.wBBUHUE3x9MeW2AbmCuOR.Bq9Yi5.a	2025-08-01 17:23:43.21258	2025-08-01 17:23:43.21258	kumarayush3048	Ayush 	Kumar	user	f	\N	false	\N	\N
dc97ae96-536f-476c-9c3f-d56f86505297	vikrantsinghan5@gmail.com		2025-08-01 17:25:44.378598	2025-08-01 17:25:44.378598	vikrantsinghan5	Vikrant	Singh	user	f	https://lh3.googleusercontent.com/a/ACg8ocKEeKBSC_ci52jEhb3I-0nmgrA53Qjo-Eko28dFwPuc1UYQTK8kjg=s96-c	false	\N	\N
5697a76d-d167-443c-b2f9-ee7458bf0d63	nk010903@gmail.com		2025-08-01 17:28:57.63814	2025-08-01 17:28:57.63814	nk010903	Nikhil	Kumar	user	f	https://lh3.googleusercontent.com/a/ACg8ocKv7vSwIXVUo35TwtJPPocH2djw3XXKePvrrkIGedLXOm8ovY4=s96-c	false	\N	\N
02026868-c9de-4dc2-a382-afc7e13ead07	bhadreshwaradhruv386@gmail.com	$2b$12$UOUFrgGRWOiJ2M2vESomNeHAE1tnroEcdUsG4Ts2LuuJdmwoo6aH2	2025-08-01 17:29:11.288082	2025-08-01 17:29:11.288082	bhadreshwaradhruv386	Dhruv	Bhadreshwara 	user	f	\N	false	\N	\N
174994a7-de14-4051-a8b6-6a29b8efe5dd	navy190899@gmail.com	$2b$12$5HHxTkNVqeHw4aBzI1fHv.gZbkT//CnNxvNl//fP6cHJqbu6/vqQO	2025-08-01 17:32:42.662523	2025-08-01 17:32:42.662523	navy190899	Nabanit 	Mondal	user	f	\N	false	\N	\N
4b5375fe-23af-4417-acaf-51b33dff7b72	parijasourav3025@gmail.com	$2b$12$vN/85iMcgb/DWZMcGmVFX.cermQT63HuNHi14hcuJeEUSLHJ7INQa	2025-08-01 17:36:39.716006	2025-08-01 17:36:39.716006	parijasourav3025	Sourav	Parija	user	f	\N	false	\N	\N
08278850-59ab-4663-a71d-e5b91aae34fd	jaatdevtaa117769@gmail.com		2025-08-01 17:37:16.999727	2025-08-01 17:37:16.999727	jaatdevtaa117769	Jaat	Devtaa	user	f	https://lh3.googleusercontent.com/a/ACg8ocJlj1ly96vWRlYfAzwxcv8pxnqw5c6wFhDpXayJOIuWPpvz2A=s96-c	false	\N	\N
66a036dd-8022-4296-a042-951dff65fd38	siddhikunjir1711@gmail.com	$2b$12$isXOUOpo6fOVhtusrWJa/elNBtRHbGDYhG2lYoqoDQLHiheyWsrkG	2025-08-01 17:37:58.228243	2025-08-01 17:37:58.228243	siddhikunjir1711	Si	Kh	user	f	\N	false	\N	\N
2094c4e8-287a-4afc-a233-ed99f9572298	hythisispalji@gmail.com	$2b$12$wQuj9QBqKPcK5L0.iUMk5.PcDhxALEj0Lud8zGZniRFpmNyxT8IaG	2025-08-01 17:38:36.364034	2025-08-01 17:38:36.364034	hythisispalji	Santosh 	Kumar	user	f	\N	false	\N	\N
8a1bb73d-9293-4a4b-bd5a-8836031002ff	ansariafzal06052003@gmail.com		2025-08-01 17:26:53.058385	2025-08-01 17:43:21.15	ansariafzal06052003	AFZAL	ANSARI	user	f	https://lh3.googleusercontent.com/a/ACg8ocJ8TkrBarDYVWXiDw8Es6nd_mzFfHC9Jat2fOYZE3bprLv8Pw=s96-c	true	\N	pro
f4f04afa-41a2-4bc1-a00f-e86ba97aeeb6	akshatkukreti09@gmail.com	$2b$12$KXpAglrOeqFJ4TQ7sEc7Gey4qdNXizrmdw/7q4xKAJlXWChzyfdm2	2025-08-01 17:44:26.336011	2025-08-01 17:44:26.336011	akshatkukreti09	Akshat	Kukreti	user	f	\N	false	\N	\N
b70bf256-2c06-4414-827d-9688aa1beb87	two@gmail.com	$2b$12$r9UXj8QGtFK773AdyijyGOIJLwIh.tqxTnT2YR2jbQ4gS8YMYg9VO	2025-08-01 17:54:15.924403	2025-08-01 17:54:15.924403	two	Ani	Ruddha	user	f	\N	false	\N	\N
2744a854-df9c-4803-bb8b-7a046afd7a40	abc@gmail.com	$2b$12$AJrd7r8OdjnujKeZmZETbu3HBbivOxR828iSC08b7EM4req17suZ.	2025-08-01 18:00:22.6288	2025-08-01 18:00:22.6288	abc	Gg	Kk	user	f	\N	false	\N	\N
224864b1-4788-477f-861b-737a9e57662b	spkhot45@gmail.com	$2b$12$z9kPfPY6MsiuUfG7I5xMTuq4YaLebn6J3U4uqYAlavSZCAUIqftr6	2025-08-01 18:01:56.410792	2025-08-01 18:01:56.410792	spkhot45	Sourabh 	Khot	user	f	\N	false	\N	\N
9a7247eb-be09-4232-a826-a87aedec10dc	khanparaharsh779@gmail.com	$2b$12$NueNXVU5RyhluBfTiQpMgeWwQc59jzmZz62vjSs1X2MHLBqEQb0ne	2025-08-01 18:02:10.647144	2025-08-01 18:02:10.647144	khanparaharsh779	Harsh	Khanpara	user	f	\N	false	\N	\N
41fdd320-8475-47a6-bf32-fb59b5085248	keshavbansal11122003@gmail.com		2025-08-01 18:02:54.090498	2025-08-01 18:02:54.090498	keshavbansal11122003	parv	bansal	user	f	https://lh3.googleusercontent.com/a/ACg8ocKYsnF9TKlBZgrZR4MVszYzJo4sZvGRs6jPgyDpo7jf30ehlzZ8=s96-c	false	\N	\N
9196bb07-e220-4b3d-b5cc-af08e326ddae	ajeetk8568@gmail.com		2025-08-01 18:02:55.587772	2025-08-01 18:02:55.587772	ajeetk8568	Ajeet	Kumar	user	f	\N	false	\N	\N
79ad4206-4ada-4142-8a11-6d1d68533532	purnendu.majumder404@gmail.com		2025-08-01 18:07:01.509914	2025-08-01 18:07:01.509914	purnendu.majumder404	Purnendu	Majumder	user	f	https://lh3.googleusercontent.com/a/ACg8ocJirkTHiuuuJ7ak5Sra7su5Unzpbl5e8P_2yHlyP4k5s-ZF6g8=s96-c	false	\N	\N
1cc2a540-03d5-4443-a41b-4faeeffc4d05	tony@gmail.com	$2b$12$XqF.EhHVCA43eu1emV9Y5ezwSiUAeisbN5yMKtI.cXpOPfUY3Z7VS	2025-08-01 18:11:47.814905	2025-08-01 18:11:47.814905	tony	Anubhav	Sahu	user	f	\N	false	\N	\N
dc04fbef-a589-41be-870b-78b2e2100ff7	pp52@gmail.com	$2b$12$V9nOI1WIKyMgugTcpE8ZN.w/RsIClbuM1bs/7PZTKqgKKjJ8ldkJO	2025-08-01 18:12:09.687338	2025-08-01 18:12:09.687338	pp52	Skmd	Smsmd	user	f	\N	false	\N	\N
e11c6072-7954-44c4-a090-4c1f98053d84	ajaywaghmare190504@gmail.com	$2b$12$E7KhC8mQ/55jGQnFGKgUmerxdl0O1W7Q2pu98AZyhNrH7nBv786oq	2025-08-01 18:14:04.29328	2025-08-01 18:14:04.29328	ajaywaghmare190504	Ajay 	Waghmare 	user	f	\N	false	\N	\N
286d76e6-f479-4509-80e4-48769bedb12f	omkarbandikatte2602@gmail.com	$2b$12$3WPWIf5xaYYhU68nWEvhNu7dhAySktd1gidl2GkpUDgj/aRUnWdNa	2025-08-01 18:20:23.372739	2025-08-01 18:20:23.372739	omkarbandikatte2602	Omkar	Bandikatte	user	f	\N	false	\N	\N
1fbf99c4-e19f-4f6f-9e2f-85498e216aef	sumandey7684@gmail.com	$2b$12$tbAvbnl.zqBNVH4YX6gkMeKYPliSpXGsdYX4pS24.LE62bs1jMBB6	2025-08-01 18:21:14.374409	2025-08-01 18:21:14.374409	sumandey7684	Suman	Dey	user	f	\N	false	\N	\N
0dbe87f6-00b0-44e3-b81d-3bff6b32ac9b	jyotis9870@gmail.com	$2b$12$MEpXm9pzee8.xwcdzj42S.lri3NTfIYdETmWCAuLfY.VmdNO210kW	2025-08-01 18:28:01.048742	2025-08-01 18:28:01.048742	jyotis9870	Jyoti 	Jyoti	user	f	\N	false	\N	\N
90023066-223f-4031-8b7b-9596ed2e4353	kishorlearnings@gmail.com		2025-08-01 18:32:42.38651	2025-08-01 18:32:42.38651	kishorlearnings	Kishore	Thatavarthi	user	f	https://lh3.googleusercontent.com/a/ACg8ocJtR1UAnjBAdqf8IAJWFA8bf70lvWju6Ud-lIfMZ4rgJs03oQ=s96-c	false	\N	\N
236445f0-63ce-4362-a592-6badbfa28a21	edu.amit2004@gmail.com	$2b$12$7211TJ1iyAp/BXYymK2Xne16fxROLpoTwNSN/Vbcpf0scObndEdp6	2025-08-01 18:32:46.913544	2025-08-01 18:32:46.913544	edu.amit2004	Amit 	Yadav 	user	f	\N	false	\N	\N
c50a70d3-f7f2-4a7c-bd63-e334a2c981e3	rohitkvhrt456@gmail.com		2025-08-01 18:34:06.462963	2025-08-01 18:34:06.462963	rohitkvhrt456	kumar	Rohit	user	f	https://lh3.googleusercontent.com/a/ACg8ocJ_jFhbnKL0VgJGyaIAtZGHsem9vu309YAANa1kTDnP-WGg14cS=s96-c	false	\N	\N
68a20d74-9674-4926-8895-21de671bfd65	itzvikas021@gmail.com	$2b$12$x7CKbVCI4zhj5hmcaOQozOz4l7GV6x2LOZy0kTejbnxyMhhhA0pBO	2025-08-01 18:37:11.669836	2025-08-01 18:37:11.669836	itzvikas021	Vikas 	Verma	user	f	\N	false	\N	\N
1b5647b5-0856-4862-8b4d-8f019c5f41a9	srivastavaakanksha875@gmail.com		2025-08-01 18:38:46.853827	2025-08-01 18:38:46.853827	srivastavaakanksha875	Akanksha	Srivastava	user	f	https://lh3.googleusercontent.com/a/ACg8ocL7ZC-VCJddi2q1Kf0lsVyg0LIXbh_H_rAlISTdzg4mAwcFCQ=s96-c	false	\N	\N
b3ddf4e3-7c66-40e1-85b2-6d0225773ea2	devpunto812@gmail.com		2025-08-01 18:45:35.881589	2025-08-01 18:45:35.881589	devpunto812	Punto	Dev	user	f	https://lh3.googleusercontent.com/a/ACg8ocJqouu2my51apojF0aNo782iRazbQrYDh2vdRhkI-t5NB8YzQ=s96-c	false	\N	\N
65006816-8131-4eab-9b30-e6f9a542d363	pamusai04102003@gmail.com	$2b$12$wncK4yMbHPMNVquL4rjaLeCg07RVch9Gkv9b3LHpasZxtkOZ6HZuu	2025-08-01 18:46:51.327223	2025-08-01 18:46:51.327223	pamusai04102003	sai	pamu	user	f	\N	false	\N	\N
a0011cbf-abbe-4c6e-ba49-e8323c1d5ba7	deepakreddy3213@gmail.com		2025-08-01 19:01:28.130779	2025-08-01 19:01:28.130779	deepakreddy3213	Deepak	Reddy	user	f	https://lh3.googleusercontent.com/a/ACg8ocJ__VN056p0lSQYWC5bzSm0fMKGF2sroID9VKimgjeUSi-HRftn=s96-c	false	\N	\N
1d9b5831-0cd5-4085-9d5c-f7d8409d5c1b	sayantanhalder43@gmail.com	$2b$12$KOD/tisKk.mXFE/utfeg7eUqQmpaq8mqawc3jJIvKkRRYQAnrrthe	2025-08-01 19:14:33.914653	2025-08-01 19:14:33.914653	sayantanhalder43	Sayantan	Halder	user	f	\N	false	\N	\N
8ec4eec3-4bb0-43f6-b305-c7f3ad68c68d	adityapatil94833@gmail.com	$2b$12$XbhKdk0ZzYqQi1twEqme4OxZxckhW95toxJy6LSEnn4dmv9nSIDLG	2025-08-01 19:21:43.027819	2025-08-01 19:21:43.027819	adityapatil94833	Aditya 	Patil	user	f	\N	false	\N	\N
5664ba7c-a7db-4ac6-8a94-91c1d20b76ba	adititrivedi2017@gmail.com	$2b$12$gHFBsYu24wVu/LZ.2wLQTuyXu5MV21d2zrq5ujQY2bOz.czVPd7GO	2025-08-01 19:23:10.820302	2025-08-01 19:23:10.820302	adititrivedi2017	Aditi 	Trivedi 	user	f	\N	false	\N	\N
9cfcfa61-624c-44ba-8c75-84ea899e9adb	salarahmedmemon58@gmail.com	$2b$12$5Q1cwEH.TgDMsvN4wLVUM.8ctQNDel6pQNjNlBQJksAC81ukblPxe	2025-08-01 19:23:29.43811	2025-08-01 19:23:29.43811	salarahmedmemon58	Salar Ahmed 	Memon 	user	f	\N	false	\N	\N
1f6a900c-36f2-4a1b-a01d-61a509d5e14e	rahul0214v@gmail.com		2025-08-01 19:24:56.848945	2025-08-01 19:24:56.848945	rahul0214v	Rahul		user	f	https://lh3.googleusercontent.com/a/ACg8ocIXxbY7M5eM-HKfdavMD3ul0ympiV8MsDWwhtUsaxTMXG96WA=s96-c	false	\N	\N
442d0f58-ebb5-4cbc-aa78-5eac5157bac4	adityakr0630@gmail.com	$2b$12$jgSndCfvE9xqCjT7YcpRxuzf5SlWniEHMqkORV6e3ayxcltTwVOp2	2025-08-01 19:29:32.423403	2025-08-01 19:29:32.423403	adityakr0630	ADITYA KUMAR	SINGH	user	f	\N	false	\N	\N
623c6999-3b5f-4ac6-ad3f-34c6ab17bfb8	sameerverma89@outlook.com	$2b$12$tdxPtgpC6bx5vPPtOrmONOM3U2PlQ6BpGgDc3weEYqhcdRUMbpwei	2025-08-01 19:30:01.903126	2025-08-01 19:30:01.903126	sameerverma89	Sameer	Verma	user	f	\N	false	\N	\N
6cb5abe5-8e9b-4978-b8fb-b1506f808b0e	ibrajchetry02@gmail.com	$2b$12$DJz4FNcnih1Geq/kDwXNEO.henwY7uWM.WHDwOhWtrTuBFAOfiXnq	2025-08-01 20:04:38.545216	2025-08-01 20:04:38.545216	ibrajchetry02	Ibraj	Chetry	user	f	\N	false	\N	\N
435e0c76-5956-476c-8c1d-4a221504b1bd	swetakumari22052003@gmail.com	$2b$12$Ond3.C9UQefUsTFRrHLqO.3yeAwWmK1dL2Nn.qesY/UfM3/EaKZcq	2025-08-01 21:00:33.478001	2025-08-01 21:00:33.478001	swetakumari22052003	Sweta	Kumari	user	f	\N	false	\N	\N
a97f28cf-7848-4644-a799-0693dd3acbe6	itzgauravgupta123@gmail.com	$2b$12$ZvAB4jxhrMNtJP7Q8txVs.nnTfk1l8Y/cmn0OXIN/ubKwV50TagbS	2025-08-01 21:26:22.4926	2025-08-01 21:26:22.4926	itzgauravgupta123	Gaurav	Kumar	user	f	\N	false	\N	\N
dcb59e17-e658-413b-9dea-8fdd6c5254da	divyanshuj22@gmail.com		2025-08-01 21:43:37.847602	2025-08-01 21:43:37.847602	divyanshuj22	Divyanshu	Verma	user	f	https://lh3.googleusercontent.com/a/ACg8ocLvSR-bKsJ-XC4A89TCB1wItYOgsoGfNyU8O8KmhVZ2kM1yew=s96-c	false	\N	\N
da0ea96b-4f12-426c-aacd-853dcfb3497c	deepakchaudhary3762@gmail.com	$2b$12$zGb5m3hbWnNVV.g7jj7LWutzYyUdisOGSfShNPK3YWco1I81PBJDK	2025-08-01 22:01:33.179053	2025-08-01 22:01:33.179053	deepakchaudhary3762	Deepak	Chaudhary	user	f	\N	false	\N	\N
75b1015c-bea8-4a19-b364-0b16ff68f06a	nikhilcocth11@gmail.com		2025-08-01 23:44:59.151983	2025-08-01 23:45:29.756	nikhilcocth11	Nikhil	Salian	user	f	https://lh3.googleusercontent.com/a/ACg8ocLEJXmkVDilG9UXTlCjEUlwXg4773z4HBOONAxvosTsPblFDg=s96-c	true	\N	premium
c7cd1e26-f9b3-4b61-915f-221b0e0d5409	mohitkrnwd049@gmail.com	$2b$12$WXrTELppCZv9SPEu6JxpsucCvDLQvjhxN.IhFHf2qQyODddlf/aia	2025-08-02 00:57:26.641959	2025-08-02 00:57:26.641959	mohitkrnwd049	Prem 	Raj	user	f	\N	false	\N	\N
3b1242d9-91f5-47c9-8aee-771e65f5c769	csr.info.in@gmail.com		2025-08-02 01:05:36.484228	2025-08-02 01:05:36.484228	csr.info.in	Chandan	Singh	user	f	https://lh3.googleusercontent.com/a/ACg8ocKQVpYSeg1ogKRc6-gQqOJHI2PasllWs15BmvOOWGzIRsuztUKu=s96-c	false	\N	\N
b95931b4-2bad-4cfe-b0b1-f054092fbf5f	atulw30123@gmail.com		2025-08-02 01:07:20.415912	2025-08-02 01:07:20.415912	atulw30123	ATUL	YADAV	user	f	https://lh3.googleusercontent.com/a/ACg8ocJLO6zgoFsGNma1EsUxpciqE_K89xvDNmfwAl5WVM078wKrLA=s96-c	false	\N	\N
9dce3de6-a281-4b15-8e10-9796beade576	abhijeetpatilcse@gmail.com	$2b$12$7QJD7X/j7QLF5sqxvyOpxegeXtFToHrL8wAIk/ieyXtR2cvo.3vz.	2025-08-02 01:12:05.088633	2025-08-02 01:12:05.088633	patil_abhijeet0	Abhijeet 	Patil 	user	f	\N	false	\N	\N
9b1175ab-abb1-4609-a898-377b75e2f1ea	fortheloveofphysics7@gmail.com		2025-08-02 01:14:07.120555	2025-08-02 01:14:07.120555	fortheloveofphysics7	abhijeet	patil	user	f	https://lh3.googleusercontent.com/a/ACg8ocJxTm3PSBxT4p8Qu7PMrKlrVN6n6sIDEoSzxB38MMPofzK-KQ=s96-c	false	\N	\N
f7607bca-be74-49b5-8d37-87b9b5340995	ajay980p@gmail.com		2025-08-02 02:22:05.025646	2025-08-02 02:22:05.025646	ajay980p	Ajay	Prajapati	user	f	https://lh3.googleusercontent.com/a/ACg8ocL84B5-1Hb1XUpMoy766YIUeIybOe0SOA570YKpWhXn9krQo790=s96-c	false	\N	\N
72e887e5-1ec3-471f-a8e4-cd6f93b5686e	rajendrahinge24@gmail.com		2025-08-02 02:44:35.836717	2025-08-02 02:44:35.836717	rajendrahinge24	Rajendra	Hinge	user	f	https://lh3.googleusercontent.com/a/ACg8ocK5nhZ9rwiic4m2aRqiy-YhhirEgm3jRlRnXD9Q0MBKxxfsVkCn=s96-c	false	\N	\N
a0363b9a-ff1e-4555-985e-05bcfd9a69a3	bhojaramjadhav636@gmail.com		2025-08-02 02:50:18.532114	2025-08-02 02:50:18.532114	bhojaramjadhav636	Pandurang	Jadhav	user	f	https://lh3.googleusercontent.com/a/ACg8ocKl7v-Yy-0E6ZJ1qutbf931JtXssOSJoB1VCrmb8A_HpLDfzMQ=s96-c	false	\N	\N
0407f483-05f3-4ddb-b798-09e6f7796ec2	kmisty766@gmail.com	$2b$12$6EskIQ9GldEnw0y1LurTx.g0OQmepm0tW7iZ4bFalytj.MZexYpza	2025-08-02 02:58:00.924102	2025-08-02 02:58:00.924102	skverma1122	Sk 	Chaudhary 	user	f	\N	false	\N	\N
c0fff721-a62a-4a13-bfd9-ca000825e598	hrishabhshrivastava16@gmail.com		2025-08-02 03:48:21.490455	2025-08-02 03:48:21.490455	hrishabhshrivastava16	Hrishabh	Shrivastava	user	f	https://lh3.googleusercontent.com/a/ACg8ocLw1bCNnKVpRLAgZIIdnntCQuvJBmgcV0-kmj7TEZGyAc6bVeg=s96-c	false	\N	\N
4958ce2e-cb33-4bed-93b1-552f29cdb82d	johnsontheroxk@gmail.com		2025-08-02 04:07:07.077589	2025-08-02 04:07:07.077589	johnsontheroxk	Johnson	TheRoxk	user	f	https://lh3.googleusercontent.com/a/ACg8ocJjbTguO5BWZB94h70UGl0xU5ewrUfQF8hG0WsVraci3GLJcQ=s96-c	false	\N	\N
bf37c9e3-8ad4-4f12-9230-7669a109cd7e	shingadeprathamesh8@gmail.com		2025-08-02 08:24:25.648541	2025-08-02 08:24:25.648541	shingadeprathamesh8	Prathamesh	Shingade	user	f	https://lh3.googleusercontent.com/a/ACg8ocI-gIofKMZGq9zftlnM2pTWsNoeV3QbHWneachFbeLDX6VyVw=s96-c	false	\N	\N
05604f0f-85f9-4f9a-8cd0-b115a191e77b	usamakhan12king2@gmail.com		2025-08-02 19:58:49.364289	2025-08-02 19:58:49.364289	usamakhan12king2	USAMA	Khan	user	f	https://lh3.googleusercontent.com/a/ACg8ocLVJkZTyE_G57qDpXTT3JWVcNF2QsjrKshOYaL7kT5na-S6KA=s96-c	false	\N	\N
91b63c9a-5abb-4e2e-9095-5a6f121e4228	coderarmy@dsatrek.admin	$2b$12$tQl8EwnSwKAVq/ZT/iA88OGB8G2MhUKgcXkFvny0UaCGfW7gXlTfK	2025-07-27 07:40:49.65018	2025-07-31 19:23:06.671	coderarmy	Rohit	Negi	admin	t	https://dsatrek.s3.ap-south-1.amazonaws.com/avatars/1753602241947-91b63c9a-5abb-4e2e-9095-5a6f121e4228-1753602241947.jpeg	true	\N	premium
60ef8034-5a20-4ece-b185-2bfab0b68fca	wagh1.2.3.002@gmail.com	$2b$12$Aj50YtF7rImPVkiabun4Yu77u33PJZ0.ezU9J.W21LCTOGmmuLB2W	2025-07-05 16:33:55.897187	2025-07-06 12:26:19.665	wagh1.2.3.002	deven	wagh	admin	t	https://dsatrek.s3.ap-south-1.amazonaws.com/avatars/60ef8034-5a20-4ece-b185-2bfab0b68fca-1751963616255.jpg	true	\N	premium
5cf11fd0-19c1-4587-a9fe-22112cfb8147	ishwar1.2.3.002@gmail.com	$2b$12$CHlTa8JjAHrqloG4d0jPi.8FfyakTCNdhTLbGdTj4w.qCUpRyNag2	2025-08-02 20:39:53.789567	2025-08-02 20:39:53.789567	Dev@123	ishwar	wagh	user	t	\N	false	\N	\N
957649eb-0430-4108-8bae-e3b5da2a8ac4	adityabharadwaj273@gmail.com		2025-08-03 04:50:48.478449	2025-08-03 04:50:48.478449	adityabharadwaj273	Aditya	Bharadwaj	user	t	https://lh3.googleusercontent.com/a/ACg8ocIV2fdlsfzXn7MGdpa6ArkY9zkxwl6Qvi-TEzuP-50NbDC7qQ=s96-c	false	\N	\N
42e06dd4-ed52-4ad3-9213-10fe741202a4	ruvishushukla1@gmail.com		2025-08-03 05:09:28.087312	2025-08-03 05:09:28.087312	ruvishushukla1	Ruvishu	Shukla	user	t	https://lh3.googleusercontent.com/a/ACg8ocLFVJ5c2ACE-LMA-1F5m7_-p42A3hlvr2JwH9TPWEa7ODAwGlQ=s96-c	false	\N	\N
99cfd05d-1be6-4174-90d5-f1e780af8095	mohammedtanveer122@gmail.com		2025-08-03 05:14:48.366741	2025-08-03 05:14:48.366741	mohammedtanveer122	Mohammad	Tanveer	user	t	https://lh3.googleusercontent.com/a/ACg8ocLwH2Bfjgylql-VfjHfT3g3wBy0Gijbx99bVRLv6AszO3aT2YJZMg=s96-c	false	\N	\N
56703075-4c95-4441-a17b-65828ade84d0	amitmishra.30032005@gmail.com		2025-08-03 05:32:41.867332	2025-08-03 05:32:41.867332	amitmishra.30032005	Amit	Mishra	user	t	https://lh3.googleusercontent.com/a/ACg8ocJHfkbBRf_Dn1gjypoxdmzrjQYMhIOZY05_l6KddYthcgIRhw=s96-c	false	\N	\N
a8d30d89-4fe6-4a81-b6fa-dfc913f04c87	dashhello33@gmail.com		2025-08-03 06:21:49.087792	2025-08-03 06:21:49.087792	dashhello33	Dash		user	t	https://lh3.googleusercontent.com/a/ACg8ocLNNAIh_AOIlsBb9zaXFFOin7-Os4rbWXtHpqjlVuclZnG5ew=s96-c	false	\N	\N
6ff10bb6-fe18-46ee-89e9-cdc48ec293b6	mangilalbheri8@gmail.com	$2b$12$FE.0HnEyIWzDwmONQkfVP.VwvCvEiJvUBiQuZvkfNqSv79MfcIpji	2025-08-03 06:23:14.12639	2025-08-03 06:41:52.652	mangilal9588	mangilal	bhairi	user	t	\N	true	\N	premium
b92f4c0a-0274-4c85-8fd6-5d4e3eb77635	pratikspatil009@gmail.com	$2b$12$NCVA3zbYc3WVEkdRVfnl7.oGs0q2uWvKgjlhRmbjSSo7BnjLeuNDm	2025-08-03 07:35:11.959082	2025-08-03 07:35:11.959082	pratiksp	Pratik	patil	user	t	\N	false	\N	\N
5a021fdc-7992-43e7-aa69-8e77ee0c2833	latishadwani706@gmail.com	$2b$12$14Pm4elq5LMArQQkdsxtmO.eTFKleyA./774YYb0g3yd0VFeb/yry	2025-08-01 19:14:09.907592	2025-08-01 19:14:09.907592	latishadwani706	Latish	Adwani	user	t	\N	false	\N	\N
33b2b3f0-6beb-4811-9c97-50f85a2f600d	razaali.webdev@gmail.com	$2b$12$0TNLnG/j0psNnoPzXPCbSeoDrgWQ28T0P6ZvQAUcUdpEVbPJUHQFG	2025-08-03 11:35:55.134329	2025-08-03 11:35:55.134329	raza.dev	Raza	Ali	user	t	\N	false	\N	\N
b57cab36-d1a3-4a60-9f22-12fd437e0d11	rahulkumarsharma776194@gmail.com	$2b$12$tFkNwNY5ZcQLfwnROM/ure24JBZqlA0k5plcCgSOg6qq74BBHE3/2	2025-08-03 12:14:12.605978	2025-08-03 12:14:12.605978	its_rahul_r15	Alex	aa	user	t	\N	false	\N	\N
1fa979de-fd99-42b1-b777-9e721135ef59	mohinidaf5@gmail.com	$2b$12$1Lbuy1vBsBmgElY29EsThO8gKZ1Hw5MbqJi0aRywrFNkHn111Bp.2	2025-08-03 14:57:29.114432	2025-08-03 14:57:29.114432	Mohini	Mohini 	Daf	user	t	\N	false	\N	\N
7879f8b2-694e-4b72-9088-95eaf6f1a4ab	ritsmit1122@gmail.com	$2b$12$bjr5cxAN1c18v7wR37aMw.izR/AMrCiCI8tKhI4nPYb6bRo7jVFem	2025-08-03 15:14:07.238148	2025-08-03 15:14:07.238148	admin	Ritesh	Chauhan	user	t	\N	false	\N	\N
0779b99a-7926-4f03-a849-fd1eca8f311c	radofi6551@im5z.com	$2b$12$nRMVtmPvayj8Z4eKuRM/Qu/L0zPZDdps.EnLpchGnhCkG1Wz/KoBa	2025-08-04 02:27:17.497336	2025-08-04 02:27:17.497336	Kaka	Kaka	Kumar	user	t	\N	false	\N	\N
ce0bf6a6-b150-4003-8151-61a1047641d7	arpitdeshmukh715@gmail.com		2025-08-04 10:44:41.600921	2025-08-04 10:44:41.600921	arpitdeshmukh715	Arpit	Deshmukh	user	t	https://lh3.googleusercontent.com/a/ACg8ocJsk4smFSQUBcN7XayGzd7Z3nt3ou1358ZAHVO4bRw5MR3Vtt5g=s96-c	false	\N	\N
b41353f3-f993-4ab7-b2ee-a55bd1067e2c	nikitadeore1223@gmail.com		2025-08-04 13:01:38.774964	2025-08-04 13:01:38.774964	nikitadeore1223	Nikita	Deore	user	t	https://lh3.googleusercontent.com/a/ACg8ocJbOz_-pTZOfKHnn8eY-9cz8fTdxhfgNRuru4w1tWD32KQ0GA=s96-c	false	\N	\N
dbf9cefd-348b-4789-936c-822e4e144231	harisundar2347@gmail.com		2025-08-04 13:14:34.060968	2025-08-04 13:18:34.012	harisundar2347	Jara	Hatke	user	t	https://lh3.googleusercontent.com/a/ACg8ocLMnjPvfB6MCB2ICO7NA_UghC99vfsv2oWc6Y5qSHc4uD6UGBMsGg=s96-c	true	2025-09-04 13:18:34.012	pro
4f209642-c310-4762-a50a-5baaff377e50	roasterbyte@gmail.com		2025-08-05 02:12:15.323553	2025-08-05 02:12:15.323553	roasterbyte	Roaster	Byte	user	t	https://lh3.googleusercontent.com/a/ACg8ocLNEp80mR3kXUORg0G0FD1Gk3fUtnJK3m8LzYj7NuN0B79Z1A=s96-c	false	\N	\N
9be42c04-29d0-4afd-953f-913d26d48774	lkboss694@gmail.com		2025-08-04 15:01:35.799161	2025-08-04 15:01:35.799161	lkboss694	lk	boss	user	t	https://lh3.googleusercontent.com/a/ACg8ocK7DbmvfWcMixpw8yuaur_J9pimgPy0Zl7l6bvkI1d1tDcOhQ=s96-c	false	\N	\N
d2312378-b47a-408a-a045-63010e014566	raju@gmail.com	$2b$12$HyzmyGdZhYiXRFynWxZCr.Q25rlklB7VupM0G4HvgyOB2Q1RGOrK.	2025-08-04 17:06:31.765659	2025-08-04 17:06:31.765659	Raju	Raju	Kumar 	user	f	\N	false	\N	\N
3ae19963-ea4b-471e-b28c-3bd2918fec5c	harshit10.nvm@gmail.com	$2b$12$mXOAeTh0VzIXYFki0XXj3OQxt5GDsITLzcbvnVO/hri7jfy//83ee	2025-08-05 04:04:29.513882	2025-08-05 04:04:29.513882	harshit_masiwal	Harshit	Masiwal	user	t	\N	false	\N	\N
def99387-f1ec-494a-8e6d-1b73b33018fe	anubhavr219@gmail.com		2025-08-05 05:54:40.357376	2025-08-05 05:54:40.357376	anubhavr219	AnubhaV	RAJ	user	t	https://lh3.googleusercontent.com/a/ACg8ocKDMWnnX9iux-C1EIrX4lNS6BeWOuf4ebjR_BkhSsSaj4efMzo=s96-c	false	\N	\N
fda53052-7802-405f-a0e2-1ab7b01c5204	pratham000052@gmail.com	$2b$12$YXg5LRMR.P5fphAIUnbx7.0R0TyKL3psKBP2PxsIbJHiRIwiFc2xy	2025-08-05 06:30:25.75101	2025-08-05 06:30:25.75101	pp52gmailcom	gbghggg	gggg	user	t	\N	false	\N	\N
1e47705c-d6e0-439a-9eaf-09a2090ad360	amolraut19122002@gmail.com	$2b$12$K0Ui.hCTGJAgjXyn40HF/.noZqDyo4iF9.7Xr1.GiPOZ7z8Ai45Qm	2025-08-05 08:33:48.224653	2025-08-05 08:33:48.224653	amol	Amol	Raut	user	t	\N	false	\N	\N
c335355b-a52a-410b-9f1c-7b40d7192c6b	muchukund270@gmail.com	$2b$12$Q8HbLC.039liFgrJmTXYe.m8auwZ/efKmzS1kHtf.8aVXkPwvw9Wm	2025-08-05 12:23:14.191359	2025-08-05 12:23:14.191359	8_Muchukund	ashu	pathak	user	f	\N	false	\N	\N
d58a5eec-f186-4862-8c17-28256c924c06	amrish01011999@gmail.com		2025-08-05 19:36:35.554241	2025-08-05 19:36:35.554241	amrish01011999	Amrish	Prajapati	user	t	https://lh3.googleusercontent.com/a/ACg8ocIu3282ZnUeBHvEmZCbgYMwq9L8A7L8pOVHFK_8RkUNPP4PcB8=s96-c	false	\N	\N
6f4305d3-45f5-4c98-bf5b-d5db33eded3b	demo@gmail.com	$2b$12$8c9rSdRKdENBFlhUq8TfROjhat.iG6ttHXI6ZB9DDSShiFMfWcqDK	2025-08-06 04:48:47.096081	2025-08-06 04:48:47.096081	Demodemon	Demo	Demon	user	f	\N	false	\N	\N
1cfbbfcc-c311-4fbd-a448-f44acbb668f3	nixplaying903@gmail.com	$2b$12$1ZMvGe1dUb3.XXFlJsRMre8jV7C06rEiLpaMI15B0uLvDI3y9BSjy	2025-08-06 04:50:42.799559	2025-08-06 04:50:42.799559	demodemonx	Demo	Demonx	user	t	\N	false	\N	\N
24c51727-2bc9-43fa-b20e-ffaa9c85fdb9	aayu.r.2003@gmail.com		2025-08-07 06:08:29.066987	2025-08-07 06:08:29.066987	aayu.r.2003	Aayush	Rathore	user	t	https://lh3.googleusercontent.com/a/ACg8ocL-_jSo5if6QqMUCjXyXHXg5UreolhZF57RsTFXB7xsCsXQqrvh=s96-c	false	\N	\N
2b6a025c-1b76-4ab2-aa5e-e7f7ca4a782a	codingpanda77@gmail.com		2025-08-07 13:45:03.383432	2025-08-07 13:45:03.383432	codingpanda77	Coding	Panda	user	t	https://lh3.googleusercontent.com/a/ACg8ocJEFAeZMCAp-UVXP0qJwrIq3xvrlhcwbrN7YRCVofnYjockLA=s96-c	false	\N	\N
59e2a547-0bd6-4da3-802c-d0f756c65eb7	devloper094@gmail.com		2025-08-08 04:47:10.648587	2025-08-08 04:47:10.648587	devloper094	DEV	LOPER	user	t	https://lh3.googleusercontent.com/a/ACg8ocI9nRM8oExf8ufJQ2j5TjRs1wGug4EE5mrhOCOceNBKb34SaQ=s96-c	false	\N	\N
067c5e22-f899-42e4-a451-32249bab95f9	nikhilthakur8012004@gmail.com		2025-08-08 06:52:44.683564	2025-08-08 07:38:56.712	nikhilthakur8012004	Nikhil	Thakur	user	t	https://lh3.googleusercontent.com/a/ACg8ocJLvFNdeTBaxH4blRtyr7IgPByI7l9vwdeDfUTm9VM1co3qPQ=s96-c	true	2025-09-08 07:38:56.712	pro
fa1de5f2-289a-4169-bfa7-daae29af4fc2	shortanimation01@gmail.com	$2b$12$GmioDJnKzgAY2cWuZwVjU.MHf2AYumY0309PsnQswIhmXbR/8LwXC	2025-08-08 10:48:00.850274	2025-08-08 10:48:00.850274	aryan	Aryan	Nandanwar	user	t	\N	false	\N	\N
3de9193b-21b0-4ecb-a323-2bea7dfa50b4	chaitalispatil009@gmail.com		2025-08-08 16:14:24.144197	2025-08-08 16:14:24.144197	chaitalispatil009	Chaitali	Patil	user	t	https://lh3.googleusercontent.com/a/ACg8ocLKFFZI-ymRGAWYZNQFQNz55suiMPQh8qNOquU3tmoDIygE8ko=s96-c	false	\N	\N
7879d1de-813a-494e-9edf-ee7594b18fdf	kushalkushalrishik@gmail.com	$2b$12$VgmkhO4FuSf.prSIm7lJTu3YSj6H9wBkMuDxk7Newb2WekcjuIH8a	2025-08-09 02:28:12.512421	2025-08-09 02:28:12.512421	Kushla	Kushal	La	user	f	\N	false	\N	\N
0bf6eda1-c381-4e49-a217-867bbd2217be	azadsinghdinkar@gmail.com	$2b$12$sgSyznXHJJLI06i1ov4vxO.KR4klXce0lCImfz31QwjIk5IgDs50K	2025-08-09 11:31:19.917096	2025-08-09 11:31:19.917096	azad	azad	singh dinkar	user	t	\N	false	\N	\N
a26186d5-c37a-443c-9d20-bbe1528c05d7	unwanted288@gmail.com	$2b$12$XHs12kZ50fOviZbp3FKO4ebVLwjvl3.4oEAKAexcbf585lStmGM66	2025-08-09 12:39:03.052445	2025-08-09 12:39:03.052445	_om	Om	Borisagar	user	t	\N	false	\N	\N
d7b13a35-1513-4a8b-9e8d-45ced5b97de9	sadanandkumar8789@gmail.com		2025-08-09 18:40:58.500854	2025-08-09 18:40:58.500854	sadanandkumar8789	Sadanand	Kumar	user	t	https://lh3.googleusercontent.com/a/ACg8ocId9O_L8cqzlccPE3Y1WnMCXVdKr3PSgWNBdpdJejBozRomTek=s96-c	false	\N	\N
cdaec509-038f-4d39-b9f3-5b469a654845	taresh345@gmail.com	$2b$12$JV9HU6sKgt4fnXAFDaut6e.HKKAUFhbcGwWXcjeXBpyfXrfOQJwEu	2025-08-11 04:41:23.088593	2025-08-11 04:41:23.088593	taresh345	taresh	gupta	user	t	\N	false	\N	\N
ae2332b5-71fe-4b3a-90f0-2e4ece75cfa5	pradipta2003paul@gmail.com		2025-08-11 12:58:16.729193	2025-08-11 12:58:16.729193	pradipta2003paul	Pradipta	Paul	user	t	https://lh3.googleusercontent.com/a/ACg8ocJA-csHaLw4ul2BjzbvGLkly_3idcd9LPqSheM-mkyIO45iMZc=s96-c	false	\N	\N
e7bf63b6-11cd-4223-bdb0-876b1f84aa80	saloksingh320@gmail.com		2025-08-11 18:07:52.411501	2025-08-11 18:07:52.411501	saloksingh320	Alok	Singh	user	t	https://lh3.googleusercontent.com/a/ACg8ocKLYBp6TG6zhYHNwr6L28vDq6mot4PhtB4ckaZLdDJMhDMHjSH8=s96-c	false	\N	\N
a904c77b-a7c3-4197-bb7a-ae5e2e57b610	arnavvarshney2003@gmail.com	$2b$12$/z70PJWxkuoV1Wzx1oaBZ.eiKAkYXekKJgf4GXvdjupCHiu4iiPL2	2025-08-11 18:30:38.50624	2025-08-11 18:30:38.50624	arnav_varsh11	Arnav	Varshney	user	f	\N	false	\N	\N
dcc7d65b-cf5a-4592-a137-e5d6fd3600ef	hs223151@gmail.com	$2b$12$KjG7xP02rDYcPjOcFr3GbejZD/zlt8LmAAm8HjU4rEKxIjO18f9.S	2025-08-13 02:17:35.633079	2025-08-13 02:17:35.633079	Harsh1745	Harsh 	Srivastava	user	f	\N	false	\N	\N
5af272b0-72b9-46a2-9065-06c1198a0b0b	hs567890ty@gmail.com		2025-08-13 02:23:49.846691	2025-08-13 02:23:49.846691	hs567890ty	Harsh	Srivastava	user	t	https://lh3.googleusercontent.com/a/ACg8ocI0S5ErLRSNYU63lXIIAsAAWhbw6EqGwgZHL8_STUHrkzoO0g=s96-c	false	\N	\N
35c9155a-a5b9-4c3b-bd5b-b85de4d1742b	progamerz9764@gmail.com		2025-08-13 05:48:11.615492	2025-08-13 05:48:11.615492	progamerz9764	Pro	Gamerz	user	t	https://lh3.googleusercontent.com/a/ACg8ocLI1ZtU_QcMvu4quFMkp6kV4FdKuNMeJoxjwUHQZ_3JQXZROg=s96-c	false	\N	\N
\.


--
-- Data for Name: feedback; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.feedback (id, user_id, email, name, message, type, status, created_at, updated_at) FROM stdin;
aff8aff0-dcee-4da0-9c05-6d04b2875900	60ef8034-5a20-4ece-b185-2bfab0b68fca	\N	\N	let go we did great work man	general	pending	2025-08-02 14:35:04.581007	2025-08-02 14:35:04.581007
c887823b-ebf4-42df-a5ef-ad9b7004de97	60ef8034-5a20-4ece-b185-2bfab0b68fca	wagh1.2.3.002@gmail.com	deven wagh	remove theme not look good	general	resolved	2025-08-02 14:42:04.441162	2025-08-02 15:29:52.724
\.


--
-- Data for Name: interviews; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.interviews (id, user_id, feedback, status, created_at, updated_at, duration, interviewer_name, company_name, "position", difficulty, questions, rating, scheduled_at, job_description, interview_type, transcript, responses) FROM stdin;
eba1f9b1-f60c-4869-8a68-1eb1009f5d0d	60ef8034-5a20-4ece-b185-2bfab0b68fca	Here's a concise feedback for the interview:\n\n**1. Performance Summary:**\nThe candidate demonstrated a significant lack of foundational knowledge in core JavaScript concepts, specifically closures and the `this` keyword. They were unable to provide accurate definitions, explanations, or examples without extensive prompting and direct answers from the interviewer.\n\n**2. Key Strengths Shown:**\nThe candidate was polite and acknowledged when the interviewer provided correct information. They were ready to start the interview.\n\n**3. Areas for Improvement:**\n*   **Fundamental Concept Understanding:** The candidate struggled profoundly with defining and explaining closures and the `this` keyword. For a "medium level" role, a solid grasp of these concepts is expected.\n*   **Ability to Elaborate/Provide Examples:** When asked to elaborate or provide an example, the candidate was unable to do so, indicating a superficial or absent understanding.\n*   **Independent Problem Solving/Explanation:** The candidate relied entirely on the interviewer to provide the correct answers and examples, rather than demonstrating their own knowledge.\n\n**4. Final Recommendation:**\nBased on this performance, the candidate is **not recommended** for a JavaScript developer position at a medium difficulty level. They need to significantly strengthen their understanding of fundamental JavaScript concepts before being considered for such a role.	completed	2025-08-04 13:56:25.925044	2025-08-04 15:20:51.403	249	\N	google	javascript developer 	medium	[{"type": "Technical", "category": "JavaScript", "question": "Explain the concept of \\"closures\\" in JavaScript and provide a concise example demonstrating their practical use.", "difficulty": "medium", "expectedAnswer": "A good answer will define a closure as a function's ability to remember and access its lexical environment (variables from its parent scope) even after the parent function has finished executing. The candidate should provide a simple, clear example, such as a function that creates a private counter or a factory function, illustrating how the inner function maintains access to the outer function's scope."}, {"type": "Technical", "category": "JavaScript", "question": "Describe how the `this` keyword works in JavaScript. What are the main rules that determine its value in different execution contexts?", "difficulty": "medium", "expectedAnswer": "The candidate should explain that `this` is a dynamic context (not lexically scoped) and its value is determined by how the function is called. They should be able to articulate the primary binding rules: default binding (global object or `undefined` in strict mode), implicit binding (method call on an object), explicit binding (using `call`, `apply`, or `bind`), and `new` binding (constructor call). Mentioning how arrow functions handle `this` (lexically scoped) is a strong plus."}]	\N	\N	need good JavaScript developer 	Technical Interview	\N	\N
9990dea8-921f-4a48-85fc-75f396c93a20	60ef8034-5a20-4ece-b185-2bfab0b68fca	\N	pending	2025-08-04 13:35:05.745088	2025-08-05 12:57:06.014	119	\N	dsatrek	api developer 	medium	[{"type": "Technical", "category": "API Consumption, Error Handling, Frontend Development", "question": "When consuming an API from the frontend, what common strategies or best practices do you employ to handle various API error responses (e.g., 401 Unauthorized, 404 Not Found, 500 Internal Server Error) gracefully, and how do you communicate these effectively to the end-user?", "difficulty": "medium", "expectedAnswer": "Discussing the importance of mapping HTTP status codes to specific UI states or user-friendly messages, implementing global error handling mechanisms (e.g., using Axios interceptors, Redux middleware, or React Context), distinguishing between client-side and server-side errors, and providing clear, actionable feedback to the user rather than raw error codes (e.g., \\"Login required,\\" \\"Resource not found,\\" \\"Something went wrong, please try again\\")."}, {"type": "Technical", "category": "API Security, Authentication, Frontend Development", "question": "Describe a common approach for securely handling API authentication from a frontend application, particularly concerning the storage and transmission of user tokens (e.g., JWTs or access tokens). What are the security considerations and trade-offs of different storage mechanisms?", "difficulty": "medium", "expectedAnswer": "Focus on token-based authentication (e.g., OAuth 2.0 flow, JWTs). Discuss common storage options like `localStorage`, `sessionStorage`, and HTTP-only cookies, detailing the security implications (e.g., XSS vulnerabilities for `localStorage`/`sessionStorage`, CSRF for cookies). Emphasize the importance of HTTPS, securely attaching tokens to requests (e.g., `Authorization` header), and token expiration/refresh strategies."}]	\N	\N	fronted dev	Technical Interview	\N	\N
6c3b90c8-9fc1-4f31-8376-ecdfb272ca8f	60ef8034-5a20-4ece-b185-2bfab0b68fca	\N	pending	2025-08-04 14:03:47.824944	2025-08-07 20:56:17.032	299	\N	dsatrek	html css dev	medium	[{"type": "behavioral", "category": "UI Development, Problem Solving", "question": "Describe a situation where you were building a visually complex or critical UI component and encountered a significant technical challenge or a discrepancy between the design specification and its practical implementation. How did you approach resolving it, and what steps did you take to ensure the final UI met both the design intent and performance expectations?", "difficulty": "medium", "expectedAnswer": "The candidate should describe a specific scenario, outlining the challenge encountered (e.g., responsiveness, browser compatibility, performance, or a difficult design translation). A good answer will detail their problem-solving process, including analysis, research, collaboration with designers or other developers, and the practical steps taken to arrive at a solution. Emphasis should be on their ability to communicate effectively, adapt, and deliver high-quality, performant UI."}, {"type": "behavioral", "category": "CSS Frameworks, Adaptability, UI Consistency", "question": "Our team leverages Tailwind CSS for its utility-first approach. Can you share an experience where you had to adapt your usual CSS development workflow, perhaps when integrating a new CSS framework like Tailwind, or a completely new design system? How did you ensure visual consistency and maintainability across the project during and after this transition?", "difficulty": "medium", "expectedAnswer": "Look for an answer that demonstrates the candidate's adaptability to new tools and methodologies. They should describe their process for learning and integrating the new system (e.g., familiarizing with documentation, best practices, setting up configuration). Crucially, the answer should highlight specific strategies used to maintain UI consistency and code maintainability within the new framework, such as establishing component patterns, using custom utilities, or adhering to team-wide conventions."}]	\N	\N	we need good ui devloper with knowlege of tailwind css	Behavioral Interview	\N	\N
ae2f2e13-2100-4691-aac3-9c3d522a1cb2	1e47705c-d6e0-439a-9eaf-09a2090ad360	Interview Summary:\n‚Ä¢ Position: backend java developer\n‚Ä¢ Duration: 00:00 (0% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-05 08:36:18.936457	2025-08-05 08:39:09.902	15 min	\N	capgemini	backend java developer	medium	[{"type": "Technical", "category": "Hibernate, MySQL, Performance Optimization, REST API", "question": "You are tasked with optimizing a REST API endpoint that retrieves a list of `Product` objects. Each `Product` has a many-to-one relationship with a `Category` and a many-to-many relationship with `Tag`s, all managed by Hibernate. Describe the common performance pitfalls you might encounter when fetching this data using Hibernate, and how you would address them. Specifically discuss strategies involving Hibernate features and MySQL optimizations.", "difficulty": "medium", "expectedAnswer": "A good answer should identify the N+1 problem (e.g., fetching categories/tags for each product separately). Solutions should include using `JOIN FETCH` or `EntityGraph` for eager loading specific associations, understanding the implications of default lazy loading, and potentially configuring batch fetching. For MySQL, mentioning proper indexing on foreign key columns and frequently queried columns (e.g., `product_id`, `category_id`, `tag_id`), and possibly query tuning using `EXPLAIN`. Discussion of second-level caching for frequently accessed static data (like categories) would also be a plus."}, {"type": "Technical", "category": "REST API Design, Java, Spring Boot, Error Handling", "question": "Describe your approach to designing a robust and consistent error handling mechanism for a Spring Boot REST API. How would you ensure that API clients receive meaningful error messages, and what considerations would you make for different types of errors (e.g., validation errors, business logic errors, unexpected server errors)? Illustrate with typical Java/Spring concepts.", "difficulty": "medium", "expectedAnswer": "The candidate should discuss using HTTP status codes (e.g., 400 for bad request/validation, 404 for not found, 401/403 for authentication/authorization, 500 for internal server errors) appropriately. A consistent JSON error response structure (e.g., containing an `errorCode`, `message`, and optional `details` or `fieldErrors`) is crucial. They should explain the use of global exception handlers (e.g., `@ControllerAdvice` with `@ExceptionHandler` in Spring) to centralize error processing. Mentioning custom exceptions for specific business logic errors and handling validation errors (e.g., `MethodArgumentNotValidException` from `@Valid` annotations) are also expected. Good logging practices for server-side errors should also be touched upon."}]	\N	\N	backend developer , knows hibernate , mysql and rest api	Technical Interview	\N	\N
3c9ab2ea-ce85-41e0-a8fb-1e05505eecf1	d58a5eec-f186-4862-8c17-28256c924c06	Interview Summary:\n‚Ä¢ Position: backend developer\n‚Ä¢ Duration: 01:15 (63% of allocated time)\n‚Ä¢ Questions Prepared: 1\n‚Ä¢ Interview Type: System Design Interview\n‚Ä¢ Difficulty Level: hard\n‚Ä¢ Completion Status: Partial completion\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-05 19:37:46.803661	2025-08-05 19:39:46.388	2 min	\N	google	backend developer	hard	[{"type": "System Design", "category": "Distributed Systems, Consistency Models, Scalability, Data Integrity", "question": "Consider a critical, high-volume backend service designed to process financial transactions. If strict ACID properties are a primary requirement for data integrity, but the system also needs to achieve extremely high availability and partition tolerance in a globally distributed environment, what fundamental architectural compromises or design patterns would you immediately consider to address this inherent conflict, and why?", "difficulty": "hard", "expectedAnswer": "A strong answer will immediately identify the tension with the CAP theorem (Consistency, Availability, Partition Tolerance) as the core conflict. It should articulate that maintaining strict ACID (strong consistency) often clashes with high availability and partition tolerance in distributed systems. Good candidates would propose high-level architectural compromises or patterns such as:"}]	\N	\N	as backed developer	System Design Interview	\N	\N
d87114e1-6b70-4f42-ae7c-b47268032b80	1cfbbfcc-c311-4fbd-a448-f44acbb668f3	\N	scheduled	2025-08-06 04:56:50.369492	2025-08-06 04:56:50.369492	1 hr	\N	Jonson control 	Electronics and embedded 	medium	[{"type": "Technical / Problem-solving", "category": "Microcontroller, Bare Metal Programming, C Language, Interrupts, Peripherals", "question": "Design a bare-metal C program for a generic ARM Cortex-M microcontroller (e.g., STM32) to blink an LED connected to a GPIO pin every 500ms. You must utilize a hardware timer in interrupt mode to achieve the timing. Explain the key peripheral registers you would configure (e.g., for GPIO, Timer, NVIC) and outline the structure of your Interrupt Service Routine (ISR).", "difficulty": "medium", "expectedAnswer": "A strong answer would demonstrate knowledge of:"}, {"type": "Technical / Situational", "category": "Communication Protocols (I2C), Electronics, Microcontroller, Debugging", "question": "You are integrating a new external sensor into your embedded system, and it communicates via the I2C protocol. Describe the essential hardware and software considerations for implementing the I2C master interface on your microcontroller. Furthermore, outline a systematic approach to debug common I2C communication issues, such as NACK responses, bus lock-ups, or no data reception.", "difficulty": "medium", "expectedAnswer": "A good answer will cover:"}]	\N	\N	Microcontroller, communication protocols, electronics, bare metal programming, microprocessor, C language 	Technical Interview	\N	\N
fc389611-39b5-4685-bebf-31d0726c9435	60ef8034-5a20-4ece-b185-2bfab0b68fca	\N	scheduled	2025-08-05 06:35:21.012181	2025-08-07 21:08:33.531	5 min	\N	Google, Microsoft	Front-End Developer	easy	[{"type": "technical", "category": "JavaScript Fundamentals", "question": "What are the key differences between `var`, `let`, and `const` for declaring variables in JavaScript?", "difficulty": "easy", "expectedAnswer": "A good answer will highlight the differences in scope (function scope for `var` vs. block scope for `let` and `const`), hoisting behavior, and the ability to re-declare and re-assign variables (`var` allows both, `let` allows re-assignment but not re-declaration, `const` allows neither)."}, {"type": "technical", "category": "DOM Manipulation / JavaScript Events", "question": "Explain the concept of event bubbling in the DOM. How does it relate to event delegation?", "difficulty": "easy", "expectedAnswer": "The candidate should describe event bubbling as the process where an event triggered on an element propagates upwards through its parent elements in the DOM tree. For event delegation, they should explain how it leverages bubbling by attaching a single event listener to a common parent element, rather than individual listeners to many child elements, to efficiently handle events for dynamically added or numerous elements."}, {"type": "technical", "category": "Asynchronous JavaScript / Web APIs", "question": "How would you make an asynchronous HTTP request (e.g., to fetch data from an API) in a modern web browser using JavaScript? Provide a simple example.", "difficulty": "easy", "expectedAnswer": "The candidate should primarily mention and briefly explain the `fetch` API, as it's the modern standard. A good answer would include a basic code snippet using `fetch` with `.then()` or `async/await` syntax to demonstrate fetching data and handling the response. Mentioning `XMLHttpRequest` as an older alternative is a bonus but not strictly necessary for a modern context."}]	\N	\N	JavaScript devloper	Technical Interview	\N	\N
e68d63e1-2b05-4de5-8846-80534630bfcb	59e2a547-0bd6-4da3-802c-d0f756c65eb7	Interview Summary:\n‚Ä¢ Position: Java Devloper \n‚Ä¢ Duration: 00:00 (0% of allocated time)\n‚Ä¢ Questions Prepared: 1\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: hard\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-08 04:47:47.682984	2025-08-08 04:48:46.061	10 min	\N	Google	Java Devloper 	hard	[{"type": "Technical", "category": "JVM, Performance Tuning, Troubleshooting, Backend Services", "question": "Your Java backend service in production is experiencing frequent and long garbage collection pauses (Stop-The-World events), leading to high latency and occasional timeouts for end-users. Describe your systematic approach to diagnose and resolve this issue. Detail the specific JVM monitoring tools, metrics you'd analyze, and the potential JVM tuning parameters or code refactorings you would consider. How would you validate your changes in a production-like environment?", "difficulty": "hard", "expectedAnswer": "A good answer would demonstrate a structured and practical understanding of JVM performance:"}]	\N	\N	Java Developer is a programmer who designs, develops, and manages Java-based applications and software. With most large organizations using Java to implement software systems and backend services, a Java developer is one of the most sought-after jobs today. \n\nRead on to explore key concepts like Java Developer roles and responsibilities, Java Developer skills, and what a Java Developer salary looks like.	Technical Interview	\N	\N
423f251f-db47-44b7-a270-ba6ca2c091a5	067c5e22-f899-42e4-a451-32249bab95f9	\N	scheduled	2025-08-08 06:55:57.155545	2025-08-08 06:55:57.155545	15 min	\N	Google	Backend developer	medium	[{"type": "behavioral", "category": "Problem Solving, Debugging, Reliability, Incident Management", "question": "Tell me about a challenging backend issue or production incident you encountered in a previous role. Describe the steps you took to diagnose and resolve it. What was the impact of the issue, and what key lessons did you learn from the experience?", "difficulty": "medium", "expectedAnswer": "A good answer will use the STAR method (Situation, Task, Action, Result) to describe a specific incident. The candidate should articulate a systematic approach to debugging and root cause analysis (e.g., checking logs, metrics, tracing, isolating components). They should clearly explain the impact of the issue (e.g., on users, system performance, business) and the successful resolution. Crucially, the answer should highlight the lessons learned and any proactive steps taken to prevent recurrence or improve the system/process, demonstrating a focus on continuous improvement."}, {"type": "behavioral", "category": "System Design, Decision Making, Architecture, Technical Judgment", "question": "In backend development, you often have to make trade-offs between competing requirements. Describe a situation where you had to balance conflicting priorities (e.g., performance vs. cost, security vs. usability, or development speed vs. long-term maintainability) for a backend system. What factors did you consider, and how did you arrive at your final decision?", "difficulty": "medium", "expectedAnswer": "The candidate should use the STAR method to describe a specific scenario involving conflicting technical or business priorities. They should clearly articulate the different options considered and the various technical, business, and operational factors weighed for each (e.g., scalability needs, data volume, latency requirements, budget constraints, team expertise, future extensibility). A strong answer will demonstrate an understanding of the implications of their chosen solution and reflect on the outcome, showcasing their ability to make informed technical judgments and justify their decisions."}]	\N	\N	Google is goood 	Behavioral Interview	\N	\N
f42f0690-fa3a-440a-8839-b00fd90ad661	59e2a547-0bd6-4da3-802c-d0f756c65eb7	Interview Summary:\n‚Ä¢ Position: Java Devloper \n‚Ä¢ Duration: 02:52 (29% of allocated time)\n‚Ä¢ Questions Prepared: 3\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: easy\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-08 04:49:40.675522	2025-08-08 04:52:54.055	10 min	\N	Amazon	Java Devloper 	easy	[{"type": "Technical", "category": "Core Java, Java Ecosystem", "question": "Could you explain the main differences and purposes of JVM, JRE, and JDK in the context of Java development?", "difficulty": "easy", "expectedAnswer": "A good answer will clearly define each term:"}, {"type": "Technical", "category": "Core Java, Object Comparison", "question": "In Java, what is the fundamental difference between using the `==` operator and the `.equals()` method when comparing objects, especially String objects?", "difficulty": "easy", "expectedAnswer": "The candidate should explain that:"}, {"type": "Technical", "category": "Core Java, Modifiers", "question": "Briefly describe the purpose of the `final` keyword in Java and provide a simple example of its use with a variable.", "difficulty": "easy", "expectedAnswer": "A good answer will state that:"}]	\N	\N	Java Developer is a programmer who designs, develops, and manages Java-based applications and software. With most large organizations using Java to implement software systems and backend services, a Java developer is one of the most sought-after jobs today. \n\nRead on to explore key concepts like Java Developer roles and responsibilities, Java Developer skills, and what a Java Developer salary looks like.	Technical Interview	\N	\N
14b1ee25-b2de-4b60-b58f-5385495d7bf6	fa1de5f2-289a-4169-bfa7-daae29af4fc2	Interview Summary:\n‚Ä¢ Position: frontend developer\n‚Ä¢ Duration: 01:45 (35% of allocated time)\n‚Ä¢ Questions Prepared: 3\n‚Ä¢ Interview Type: Behavioral Interview\n‚Ä¢ Difficulty Level: easy\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-08 10:49:06.426745	2025-08-08 10:55:22.473	5 min	\N	Zomato	frontend developer	easy	[{"type": "behavioral", "category": "Problem Solving, UI/UX, Adaptability", "question": "Describe a time you had to integrate a new UI library or component (like from Tailwind, Ant Design, or Bootstrap) into an existing frontend project. What challenges did you face, and how did you overcome them?", "difficulty": "easy", "expectedAnswer": "The candidate should share a specific example, detail a challenge (e.g., styling conflicts, learning curve, integration with existing code), and explain their steps to resolve it, demonstrating their problem-solving skills and ability to adapt to new tools."}, {"type": "behavioral", "category": "Learning & Development, Adaptability", "question": "Frontend development changes rapidly. How do you ensure your skills in technologies like React, HTML, CSS, and UI libraries remain current and up-to-date?", "difficulty": "easy", "expectedAnswer": "The candidate should demonstrate proactive learning habits, such as following industry blogs, participating in online courses, reading documentation, contributing to open source, or working on personal projects. This shows a commitment to continuous improvement."}, {"type": "behavioral", "category": "Feedback, Self-Improvement, Communication", "question": "Tell me about a time you received constructive feedback on your frontend code or UI implementation. How did you react and what did you do with that feedback?", "difficulty": "easy", "expectedAnswer": "The candidate should show openness to feedback, a willingness to learn, and an ability to incorporate suggestions to improve their work. A good answer will highlight a positive attitude towards criticism and a commitment to professional growth."}]	\N	\N	There is a job vacency for the frontend domain which involves the technologies such as HTML,CSS js ,React and some ui libraries and frameworks like tailwind and acertinity and bootstrap and must have basic knowlwdge of components libraries	Behavioral Interview	\N	\N
313b7959-b517-480c-9d87-ca99270ddc21	b92f4c0a-0274-4c85-8fd6-5d4e3eb77635	Interview Summary:\n‚Ä¢ Position: Java developer \n‚Ä¢ Duration: 00:10 (2% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Behavioral Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-08 09:21:03.046205	2025-08-09 13:42:10.193	10 min	\N	Microsoft 	Java developer 	medium	[{"type": "behavioral", "category": "Collaboration, Communication, Teamwork", "question": "As a full-stack Java developer, you often bridge the gap between front-end and back-end, and also work within the Spring Boot ecosystem. Describe a time when you had to collaborate closely with a front-end developer (or a different backend team) on a complex feature. How did you ensure smooth communication, clear API contracts, and a successful integration leading to the final delivery?", "difficulty": "medium", "expectedAnswer": "A strong answer will use the STAR method (Situation, Task, Action, Result). The candidate should describe a specific scenario, outline the challenges of cross-team collaboration or complex integration, detail the steps they took to facilitate communication (e.g., shared documentation, regular sync-ups, clear API definitions, use of tools like Swagger), how they managed expectations, and the positive outcome of the collaboration. Emphasis should be on proactive problem-solving and effective teamwork."}, {"type": "behavioral", "category": "Problem Solving, Debugging, Learning Agility, Technical Acumen (Behavioral)", "question": "Tell me about a time you encountered a significant technical challenge or a particularly difficult-to-diagnose bug specifically within a Spring Boot application or a full-stack integration that involved Java backend components. How did you approach troubleshooting and debugging this issue, what steps did you take to isolate and resolve it, and what did you learn from that experience?", "difficulty": "medium", "expectedAnswer": "The candidate should describe a specific technical challenge or bug, detailing the diagnostic process (e.g., reviewing logs, using debugging tools like IDE debuggers, checking database interactions, analyzing network calls, isolating services, using Spring Boot Actuator or specific testing frameworks). They should explain the logical steps taken to find the root cause, the eventual resolution, and, critically, what new knowledge or insights they gained from overcoming the challenge. The answer should demonstrate analytical thinking, persistence, and a growth mindset."}]	\N	\N	I am full stack java developer and spring boot 	Behavioral Interview	\N	\N
4a99308d-9e0c-4e97-8ee9-bce864b9ee0a	3de9193b-21b0-4ecb-a323-2bea7dfa50b4	Interview Summary:\n‚Ä¢ Position: java developer\n‚Ä¢ Duration: 00:14 (2% of allocated time)\n‚Ä¢ Questions Prepared: 3\n‚Ä¢ Interview Type: Behavioral Interview\n‚Ä¢ Difficulty Level: easy\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-08 16:16:10.661517	2025-08-08 16:17:17.884	10 min	\N	tcs	java developer	easy	[{"type": "behavioral", "category": "Adaptability, Learning, Java", "question": "Tell me about a time you had to learn a new Java framework or library quickly for a project. How did you approach it, and what was the outcome?", "difficulty": "easy", "expectedAnswer": "The candidate should describe a specific situation where they needed to acquire new Java-related knowledge. A good answer will outline their process for learning (e.g., reading documentation, tutorials, experimenting with small code examples, asking senior developers for guidance) and demonstrate their ability to quickly adapt to new technologies to achieve project goals."}, {"type": "behavioral", "category": "Feedback, Collaboration, Professionalism", "question": "Can you describe a situation where you received feedback on your Java code or design that you initially disagreed with? How did you handle it?", "difficulty": "easy", "expectedAnswer": "The candidate should provide an example demonstrating their open-mindedness to constructive criticism. A strong answer will show they listened actively, asked clarifying questions, considered the feedback objectively (even if they initially disagreed), and either integrated the feedback for a better solution or respectfully explained their original reasoning without being defensive. The focus should be on code quality and team collaboration."}, {"type": "behavioral", "category": "Motivation, Passion, Career Goals", "question": "What aspect of Java development are you most passionate about, and why?", "difficulty": "easy", "expectedAnswer": "The candidate should articulate what genuinely interests or excites them about working with Java. This could relate to problem-solving, building scalable systems, creating clean and efficient code, working with specific frameworks (e.g., Spring, Hibernate), or contributing to open-source projects. A good answer will provide a brief, sincere reason for their passion, demonstrating enthusiasm and fit for a development role."}]	\N	\N	I am java developer	Behavioral Interview	\N	\N
4e5bfdf0-d223-41c0-bb40-8f7272f2c443	3de9193b-21b0-4ecb-a323-2bea7dfa50b4	\N	scheduled	2025-08-08 16:51:37.973966	2025-08-08 16:51:37.973966	10 min	\N	NA	English Speaking	easy	[{"type": "behavioral", "category": "Communication Skills, Practical Application", "question": "Tell me about a time when you recently used English outside of a formal learning environment (like a classroom or app). What was the situation, and how did you feel about your communication?", "difficulty": "easy", "expectedAnswer": "The candidate should describe a real-world interaction (e.g., ordering food, asking for directions, talking to a tourist or colleague). They should be able to briefly explain the situation and reflect on their experience, even if they mention feeling a little nervous or making a small mistake, as long as they show they managed to communicate. This assesses their practical application of English and their comfort level."}, {"type": "behavioral", "category": "Learning Agility, Problem Solving, Self-Improvement", "question": "Learning a new language can have its challenges. Can you share one small obstacle you faced while learning or practicing English, and what you did to try and overcome it?", "difficulty": "easy", "expectedAnswer": "The candidate should identify a specific, minor challenge (e.g., a particular pronunciation, understanding fast speakers, remembering new vocabulary). They should then describe a simple, practical step or strategy they used to address it (e.g., \\"I practiced saying that word many times,\\" \\"I asked people to speak slowly,\\" \\"I used flashcards every day\\"). This demonstrates self-awareness and initiative in their learning journey."}, {"type": "behavioral", "category": "Communication Skills, Problem Solving, Adaptability", "question": "Describe a situation where you had to explain something in English and you weren't sure the other person fully understood you. What steps did you take to try and make your message clearer?", "difficulty": "easy", "expectedAnswer": "The candidate should describe a past scenario where communication wasn't perfectly smooth. They should then explain concrete actions they took to improve understanding, such as rephrasing, using simpler words, speaking more slowly, using gestures, asking clarifying questions, or checking if the other person understood. This shows their ability to identify a communication breakdown and adapt their approach to ensure clarity."}]	\N	\N	I have learn and practice on english	Behavioral Interview	\N	\N
0ee2f81e-f1e6-41e6-98e2-b97c0b12828c	0bf6eda1-c381-4e49-a217-867bbd2217be	Interview Summary:\n‚Ä¢ Position: software development intern\n‚Ä¢ Duration: 01:38 (33% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-09 11:32:50.529255	2025-08-09 11:34:51.005	5 min	\N	google	software development intern	medium	[{"type": "Technical", "category": "Programming Fundamentals", "question": "Explain the concept of 'scope' in programming. Why is understanding it important when writing code?", "difficulty": "medium", "expectedAnswer": "A good answer would define scope as the region of a program where a variable or function can be accessed. It should mention different types of scope (e.g., global, local/function, block scope depending on the language) and explain its importance in preventing naming conflicts, managing variable lifetimes, ensuring data privacy, and writing modular, predictable, and maintainable code."}, {"type": "Technical", "category": "Software Development Tools, Version Control", "question": "Describe the primary purpose of a version control system (like Git). Why is it crucial for a software development team?", "difficulty": "medium", "expectedAnswer": "A good answer would explain that a version control system tracks changes to code and other files over time, allowing developers to revert to previous versions, view history, and work collaboratively. It is crucial because it enables multiple developers to work on the same codebase simultaneously without overwriting each other's work, facilitates code reviews, simplifies merging changes, allows for easy branching for new features or bug fixes, and provides a safety net for development."}]	\N	\N	for intern 	Technical Interview	\N	\N
3fba1b84-dcb3-4d7f-9fa8-425708652659	d7b13a35-1513-4a8b-9e8d-45ced5b97de9	Interview Summary:\n‚Ä¢ Position: software eng\n‚Ä¢ Duration: 00:22 (1% of allocated time)\n‚Ä¢ Questions Prepared: 1\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: hard\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-09 18:42:03.982734	2025-08-09 18:42:47.21	1 hr	\N	google	software eng	hard	[{"type": "system-design", "category": "System Architecture, Distributed Systems, Algorithms", "question": "Design a distributed rate limiter for a multi-tenant API gateway. Your design should support different rate limiting policies (e.g., per user, per API key, per IP address, or per endpoint) and enforce limits effectively across a fleet of API gateway instances. Discuss the algorithms you would consider, your chosen architecture, data stores, consistency models, and how you would handle scalability, reliability, and edge cases (e.g., bursts, clock synchronization, system failures).", "difficulty": "hard", "expectedAnswer": "A comprehensive answer will begin by clarifying requirements (e.g., specific policies, granularity, soft/hard limits, burst tolerance). The candidate should then discuss various rate limiting algorithms (e.g., Leaky Bucket, Token Bucket, Fixed Window, Sliding Log, Sliding Window Counter), comparing their pros and cons, and selecting one suitable for a distributed environment (e.g., Sliding Window Counter with Redis). The design should include a high-level architecture with components like the API Gateway, a distributed data store (e.g., Redis Cluster), and a mechanism for inter-instance communication/synchronization if needed. Key considerations for a \\"hard\\" rating include: how to ensure atomicity and consistency across distributed instances (e.g., using Redis Lua scripts, distributed locks, or atomic increments), handling concurrent requests, managing burst traffic, ensuring fault tolerance (e.g., what happens if Redis is unavailable), addressing clock skew in a distributed setting, monitoring, and scaling the system to handle high throughput. They should articulate trade-offs made in their design."}]	\N	\N	SDE 1  JOB	Technical Interview	\N	\N
75c117c3-c207-4efd-a4c1-f970512daf28	a26186d5-c37a-443c-9d20-bbe1528c05d7	Interview Summary:\n‚Ä¢ Position: nextjs full stack \n‚Ä¢ Duration: 02:18 (46% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-09 12:40:25.488187	2025-08-09 12:43:07.157	5 min	\N	meta	nextjs full stack 	medium	[{"type": "system-design", "category": "System Architecture, Next.js, Scalability", "question": "You're leading the architecture for a new, high-traffic SaaS platform using Next.js, which needs to serve millions of users globally with both dynamic, real-time data and static, SEO-critical content. As CTO, what are your top architectural and infrastructure considerations to ensure scalability, resilience, and optimal performance from a full-stack perspective?", "difficulty": "medium", "expectedAnswer": "A good answer would cover the strategic use of Next.js rendering (SSR, ISR, Static Generation, Client Components) for different content types, data fetching strategies (e.g., Server Actions, GraphQL, REST, caching at various layers CDN, server, client), database choices for scalability (e.g., PostgreSQL, NoSQL options, read replicas), API gateway design, microservices/monorepo considerations, and global deployment strategies (e.g., Vercel Edge, multi-region cloud). Emphasis on trade-offs and how these choices impact the full stack."}, {"type": "technical", "category": "Next.js, Authentication, Real-time Systems, Application Architecture", "question": "Your team is building a new feature for the SaaS platform: a user-configurable dashboard with custom widgets that display real-time data updates, alongside existing features like public marketing pages and a blog. How would you architect this within a Next.js application to balance maintainability, security, and performance for both the public-facing and authenticated, interactive parts, specifically detailing the authentication/authorization flow and data synchronization?", "difficulty": "medium", "expectedAnswer": "A strong answer would discuss the strategic use of App Router components (Server Components for public content/SEO, Client Components for interactive dashboards/widgets), authentication/authorization implementation (e.g., NextAuth.js, custom JWT/session management), secure API routes for sensitive operations, and mechanisms for real-time data synchronization (e.g., WebSockets, Server-Sent Events, polling) for the dashboard. It should also touch on managing client-side state efficiently for a complex UI and ensuring robust error handling and security practices."}]	\N	\N	this is for CTO so include system design questions	Technical Interview	\N	\N
1aa9d9e4-320a-4d82-8089-e72632141856	b92f4c0a-0274-4c85-8fd6-5d4e3eb77635	\N	scheduled	2025-08-09 13:41:27.493483	2025-08-09 13:41:27.493483	10 min	\N	microsoft	web developer	medium	[{"type": "Behavioral", "category": "Problem Solving, Technical Experience", "question": "Describe a significant technical challenge you encountered while developing a web application or a Java-based system. How did you approach diagnosing and resolving it, and what was the ultimate outcome?", "difficulty": "medium", "expectedAnswer": "The candidate should articulate a specific technical challenge (e.g., a performance bottleneck, a complex integration issue, a difficult-to-debug error). They should use the STAR method (Situation, Task, Action, Result) to detail their investigative process, the tools or methods they used (e.g., debugging, profiling, research, collaboration), the steps they took to implement a solution, and the positive impact or lessons learned from the experience. Look for an emphasis on analytical skills, persistence, and practical problem-solving."}, {"type": "Behavioral", "category": "Collaboration, Full-Stack Integration, Communication", "question": "Tell me about a project where you had to collaborate closely with both front-end web developers and back-end Java developers to deliver a feature. How did you ensure smooth communication, data flow, and successful integration between these different layers?", "difficulty": "medium", "expectedAnswer": "The candidate should describe a real-world scenario where they acted as a bridge or collaborated across the web (frontend) and Java (backend) domains. They should highlight specific strategies used for effective communication (e.g., regular sync-ups, API documentation, shared specifications), how data contracts were managed (e.g., JSON schemas, DTOs), and the methods employed for integration and testing to ensure seamless functionality (e.g., Postman/Swagger, unit/integration tests). The answer should demonstrate an understanding of the full development lifecycle and the importance of cross-functional teamwork."}]	\N	\N	web dev and Java developer	Behavioral Interview	\N	\N
a76da3d5-8f2d-4f63-a99f-bcd313db328b	cdaec509-038f-4d39-b9f3-5b469a654845	Interview Summary:\n‚Ä¢ Position: React developer\n‚Ä¢ Duration: 04:04 (81% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Partial completion\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-11 04:42:17.862957	2025-08-11 04:47:15.327	5 min	\N	something	React developer	medium	[{"type": "Technical", "category": "React, State Management", "question": "Explain the difference between local component state and global state management in React, and when you would choose one over the other.", "difficulty": "medium", "expectedAnswer": "A good answer would clearly define local state (e.g., using `useState` for state encapsulated within a single component) and global state (e.g., using Context API, Redux, Zustand, for state accessible across multiple, often unrelated components). It should articulate scenarios for each: local state for component-specific UI logic (e.g., form input values, modal visibility), and global state for application-wide data (e.g., user authentication status, theme preferences, shopping cart items). The answer should demonstrate an understanding of the trade-offs, like avoiding prop drilling with global state vs. the added complexity of a global solution."}, {"type": "Technical", "category": "React Hooks, Component Lifecycle", "question": "Describe the purpose of `useEffect` in React and provide a common use case where it's essential, including how to handle dependencies.", "difficulty": "medium", "expectedAnswer": "A strong answer would explain that `useEffect` is used for performing side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM. It should provide a clear use case, like fetching data when a component mounts, or when a specific prop or state variable changes. Crucially, the answer should cover the importance of the dependency array (`[]`) in controlling when the effect re-runs, and ideally mention the cleanup function for effects that return one (e.g., unsubscribing from an event listener or clearing timers) to prevent memory leaks."}]	\N	\N	fornt end developer	Technical Interview	\N	\N
b17c4a79-3561-4671-9aa7-5897383fb484	ae2332b5-71fe-4b3a-90f0-2e4ece75cfa5	Interview Summary:\n‚Ä¢ Position: Frontend Developer\n‚Ä¢ Duration: 01:57 (98% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Full completion\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-11 12:59:09.865827	2025-08-11 13:01:22.861	2 min	\N	Google	Frontend Developer	medium	[{"type": "Technical", "category": "CSS, Frontend", "question": "Explain the key differences between `display: none;` and `visibility: hidden;` in CSS.", "difficulty": "medium", "expectedAnswer": "A good answer will highlight that `display: none;` removes the element completely from the document flow, meaning it does not occupy any space and is not interactive. In contrast, `visibility: hidden;` hides the element visually, but it still occupies its original space in the document flow and influences layout, though it is not interactive."}, {"type": "Technical", "category": "JavaScript, DOM", "question": "Describe the event bubbling and capturing phases in the DOM and how they relate to event handling in JavaScript.", "difficulty": "medium", "expectedAnswer": "An ideal answer will explain that when an event occurs, it first goes through the **capturing phase** (propagating downwards from the window to the target element) and then the **bubbling phase** (propagating upwards from the target element back to the window). It should also mention how `addEventListener()` can specify whether a listener should fire during the capturing or bubbling phase (using the third argument) and the use of `event.stopPropagation()` to halt event propagation."}]	\N	\N	Frontend developer	Technical Interview	\N	\N
9a295210-fe32-4e26-b602-7cd2adb6a257	e7bf63b6-11cd-4223-bdb0-876b1f84aa80	Interview Summary:\n‚Ä¢ Position: backend dev\n‚Ä¢ Duration: 01:31 (30% of allocated time)\n‚Ä¢ Questions Prepared: 2\n‚Ä¢ Interview Type: Technical Interview\n‚Ä¢ Difficulty Level: medium\n‚Ä¢ Completion Status: Early termination\n‚Ä¢ Performance: Interview conducted successfully with AI assistance.	completed	2025-08-11 18:08:53.716819	2025-08-11 18:11:02.46	5 min	\N	CODEG	backend dev	medium	[{"type": "technical", "category": "Node.js, Asynchronous Programming", "question": "In Node.js, describe the primary differences and typical use cases for `Promise.all` versus `Promise.race`.", "difficulty": "medium", "expectedAnswer": "Candidates should explain that `Promise.all` waits for all promises in an iterable to resolve, or for the first one to reject, aggregating results. It's typically used for running multiple independent asynchronous operations in parallel. `Promise.race` resolves or rejects as soon as any one of the promises in the iterable resolves or rejects, whichever comes first. It's often used for scenarios like timeout patterns or competitive operations where only the fastest result is needed."}, {"type": "technical", "category": "Node.js, Express.js, API Design", "question": "Explain what middleware is in the context of an Express.js application and provide one practical example of its use in a backend API.", "difficulty": "medium", "expectedAnswer": "Candidates should define middleware as functions that have access to the request (req) object, the response (res) object, and the next middleware function in the application's request-response cycle. They can execute code, make changes to the request and response objects, end the request-response cycle, or call the next middleware. A practical example could be:"}]	\N	\N	backend nodejs	Technical Interview	\N	\N
a0baf568-4070-48bc-a9e1-9001164b23f5	5af272b0-72b9-46a2-9065-06c1198a0b0b	\N	scheduled	2025-08-13 02:24:44.789308	2025-08-13 02:24:44.789308	45 min	\N	Recurit crm	Trainee software engineer 	hard	[{"type": "problem-solving", "category": "Problem Solving, DSA (Sets, Hash Maps, Algorithmic Efficiency)", "question": "Design and implement an efficient solution for a candidate-job matching system. You are given a large dataset of `Candidates` and `JobPostings`. Each `Candidate` has a unique ID and a list of `skills` they possess. Each `JobPosting` has a unique ID and a list of `requiredSkills`.", "difficulty": "hard", "expectedAnswer": "A strong answer would demonstrate robust analytical and problem-solving skills. The candidate should propose using `HashSet` for efficient skill set operations (checking containment, intersection, difference). For scalability, they should discuss pre-processing strategies, such as creating an inverted index (mapping each skill to a list of candidate IDs possessing that skill) to quickly narrow down potential candidates for a given job. The core algorithm for each job posting would involve:"}, {"type": "problem-solving", "category": "Problem Solving, DSA (Graphs, Dynamic Programming, Topological Sort)", "question": "You are tasked with developing a system to help prioritize the development of new software features (modules). Each feature has the following attributes:", "difficulty": "hard", "expectedAnswer": "A good answer would identify this as a combination of a graph problem (specifically, a Directed Acyclic Graph or DAG, where features are nodes and prerequisites are directed edges) and an optimization problem similar to the Knapsack problem. The candidate should propose:"}]	\N	\N	As a Trainee Software Engineer, you‚Äôll be involved in all aspects of software development‚Äîfrom\nbuilding features from scratch to enhancing existing modules. You‚Äôll be an integral part of the\nengineering team, working on scalable solutions in SaaS recruitment technology with exposure to\nAI-driven innovations. This role lays a strong foundation to launch your career in tech.\nLocation: Remote\nWhat You Will Do:\n‚óè Work closely with software developers to develop the best implementations\n‚óè Develop efficient, reusable, reliable, and scalable software\n‚óè Build features and modules from scratch\n‚óè Maintain existing features and modules\n‚óè Key skills - Java/Python/AI/ML\n	Technical Interview	\N	\N
8f0ce016-dc44-446f-91d1-31c923f0fe29	b92f4c0a-0274-4c85-8fd6-5d4e3eb77635	\N	scheduled	2025-08-13 05:46:03.867197	2025-08-13 05:46:03.867197	15 min	\N	Google	Mern developer	medium	[{"type": "behavioral", "category": "Problem Solving & Debugging", "question": "Tell me about a significant technical challenge or a difficult-to-diagnose bug you encountered while working on a full-stack MERN application. Describe the problem, your systematic approach to troubleshooting, and how you ultimately resolved it.", "difficulty": "medium", "expectedAnswer": "The candidate should use the STAR method (Situation, Task, Action, Result) to describe a specific technical challenge (e.g., a performance bottleneck, a complex cross-stack data flow issue, an elusive API bug). A strong answer will detail their diagnostic process (e.g., using browser dev tools, Node.js debuggers, MongoDB logs, isolating components), the specific actions taken, and the successful resolution, highlighting any lessons learned or improvements made to their process."}, {"type": "behavioral", "category": "Adaptability & Learning", "question": "Describe a situation where you had to quickly learn and implement a new technology, framework, or library (e.g., a new authentication method, a real-time communication library like Socket.IO, or a different state management solution) into an existing MERN project. What was the learning curve like, what challenges did you face during integration, and how did you ensure a smooth implementation?", "difficulty": "medium", "expectedAnswer": "The candidate should provide a specific example of having to acquire new knowledge and apply it in a practical scenario. They should explain their learning strategy (e.g., consulting documentation, tutorials, community resources), detail any technical or architectural challenges encountered during the integration into the MERN stack, and explain the steps taken to overcome these challenges to successfully implement the new functionality without negatively impacting the existing system. This demonstrates initiative, resourcefulness, and practical problem-solving skills."}]	\N	\N	I am full stack web developer	Behavioral Interview	\N	\N
\.


--
-- Data for Name: otps; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.otps (id, user_id, email, otp, type, expires_at, is_used, created_at) FROM stdin;
cad78441-746c-4dd2-abed-9941c397cee8	60ef8034-5a20-4ece-b185-2bfab0b68fca	wagh1.2.3.002@gmail.com	572743	email_verification	2025-08-02 20:43:14.483	true	2025-08-02 20:33:16.22944
5a28191c-3c5f-41c5-9eed-4a5d9a7a3603	5cf11fd0-19c1-4587-a9fe-22112cfb8147	ishwar1.2.3.002@gmail.com	665253	email_verification	2025-08-02 20:49:51.846	true	2025-08-02 20:39:53.849406
c2b8747a-f9aa-4264-892e-6f0bad2e45d1	6ff10bb6-fe18-46ee-89e9-cdc48ec293b6	mangilalbheri8@gmail.com	629515	email_verification	2025-08-03 06:33:12.91	true	2025-08-03 06:23:14.132904
01908d61-8cd5-4ace-9825-d4999f0d2fd7	b92f4c0a-0274-4c85-8fd6-5d4e3eb77635	pratikspatil009@gmail.com	270059	email_verification	2025-08-03 07:45:11.422	true	2025-08-03 07:35:11.968948
cdd0946b-9149-4ce4-8896-aeac17a9278e	5a021fdc-7992-43e7-aa69-8e77ee0c2833	latishadwani706@gmail.com	408536	email_verification	2025-08-03 10:40:58.622	true	2025-08-03 10:30:58.652574
cf9c2cb2-4e04-4b8f-ba53-781be6cffb6d	33b2b3f0-6beb-4811-9c97-50f85a2f600d	razaali.webdev@gmail.com	986857	email_verification	2025-08-03 11:45:54.656	true	2025-08-03 11:35:55.142854
82eb131d-4025-47e5-ae20-f7dedc91b7ce	b57cab36-d1a3-4a60-9f22-12fd437e0d11	rahulkumarsharma776194@gmail.com	473973	email_verification	2025-08-03 12:24:11.971	true	2025-08-03 12:14:12.614817
a523097e-0be8-445b-a1e3-0394a2d32d7c	1fa979de-fd99-42b1-b777-9e721135ef59	mohinidaf5@gmail.com	885750	email_verification	2025-08-03 15:07:28.583	true	2025-08-03 14:57:29.124983
37eaf77e-e48c-4314-b04d-33b1eebac351	7879f8b2-694e-4b72-9088-95eaf6f1a4ab	ritsmit1122@gmail.com	808805	email_verification	2025-08-03 15:24:06.746	true	2025-08-03 15:14:07.245945
fadaa992-b942-43d0-8856-ca85a3dec7c4	0779b99a-7926-4f03-a849-fd1eca8f311c	radofi6551@im5z.com	595079	email_verification	2025-08-04 02:37:16.943	true	2025-08-04 02:27:17.510663
e2ac0f53-2862-4e7d-92cb-b4c2376f9afd	d2312378-b47a-408a-a045-63010e014566	raju@gmail.com	897110	email_verification	2025-08-04 17:16:31.125	false	2025-08-04 17:06:31.776501
22690421-19a8-4f5b-9cd1-d1453a1e3be6	3ae19963-ea4b-471e-b28c-3bd2918fec5c	harshit10.nvm@gmail.com	363202	email_verification	2025-08-05 04:14:29.032	true	2025-08-05 04:04:29.526794
af4bcbee-57b1-4578-be3e-b854b63cb7df	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	anubhav@gmail.com	563976	email_verification	2025-08-05 06:04:08.452	false	2025-08-05 05:54:08.46073
b5b6432e-dbc6-49b1-a7f9-300d94a90b8f	fda53052-7802-405f-a0e2-1ab7b01c5204	pratham000052@gmail.com	887458	email_verification	2025-08-05 06:40:24.895	true	2025-08-05 06:30:25.76261
4c8f88bc-e018-477b-a372-99e26954232c	1e47705c-d6e0-439a-9eaf-09a2090ad360	amolraut19122002@gmail.com	428902	email_verification	2025-08-05 08:43:47.679	true	2025-08-05 08:33:48.232528
00780edd-b8af-4528-b8a4-a8f22f35b873	c335355b-a52a-410b-9f1c-7b40d7192c6b	muchukund270@gmail.com	142445	email_verification	2025-08-05 12:34:17.422	false	2025-08-05 12:24:17.430111
cbee4386-e880-4636-ae3a-31efb98b16ab	6f4305d3-45f5-4c98-bf5b-d5db33eded3b	demo@gmail.com	929979	email_verification	2025-08-06 04:58:46.173	false	2025-08-06 04:48:47.1069
16e66c8d-b1ba-44e4-b52d-406f3ba33ce0	1cfbbfcc-c311-4fbd-a448-f44acbb668f3	nixplaying903@gmail.com	476756	email_verification	2025-08-06 05:00:42.16	true	2025-08-06 04:50:42.805748
3617ac69-7654-4007-be85-e55b8f0d86dd	fa1de5f2-289a-4169-bfa7-daae29af4fc2	shortanimation01@gmail.com	876021	email_verification	2025-08-08 10:58:00.321	true	2025-08-08 10:48:00.860631
029864ce-ed80-403c-bb5e-aab50d7aabc5	7879d1de-813a-494e-9edf-ee7594b18fdf	kushalkushalrishik@gmail.com	134802	email_verification	2025-08-09 02:38:12.034	false	2025-08-09 02:28:12.519959
5392209a-837c-470e-8f69-4b1b63e6ee48	0bf6eda1-c381-4e49-a217-867bbd2217be	azadsinghdinkar@gmail.com	295752	email_verification	2025-08-09 11:41:19.438	true	2025-08-09 11:31:19.926814
95ec76f6-fd55-48bb-acb5-99c5553cac1b	a26186d5-c37a-443c-9d20-bbe1528c05d7	unwanted288@gmail.com	897924	email_verification	2025-08-09 12:49:02.329	true	2025-08-09 12:39:03.061614
7d474487-6379-4cb3-85f1-1893de9bf871	cdaec509-038f-4d39-b9f3-5b469a654845	taresh345@gmail.com	860134	email_verification	2025-08-11 04:51:22.554	true	2025-08-11 04:41:23.099621
eb4b3b5a-7b3f-42d6-9eb8-2d87149d8855	a904c77b-a7c3-4197-bb7a-ae5e2e57b610	arnavvarshney2003@gmail.com	572490	email_verification	2025-08-11 18:40:37.972	false	2025-08-11 18:30:38.514907
8c271fe8-9b9c-47ee-9c6a-183f0783aec3	dcc7d65b-cf5a-4592-a137-e5d6fd3600ef	hs223151@gmail.com	997828	email_verification	2025-08-13 02:27:35.134	false	2025-08-13 02:17:35.646613
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.sessions (id, "userId", expires, "sessionToken") FROM stdin;
\.


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.submissions (id, user_id, problem_id, code, language, status, runtime, memory, test_cases_passed, total_test_cases, created_at) FROM stdin;
ff64a59f-b857-49e0-88be-84b61d19c0f4	60ef8034-5a20-4ece-b185-2bfab0b68fca	29021bca-113b-4d80-a0bc-372090fef41c	#include <iostream>\n#include <string>\n#include <stack>\n#include <unordered_map>\nusing namespace std;\n\nbool isValid(string s) {\n  stack<char> stack;\n  unordered_map<char, char> map = {{')', '('}, {'}', '{'}, {']', '['}};\n  \n  for (char c : s) {\n    if (map.find(c) != map.end()) {\n      if (stack.empty() || stack.top() != map[c]) {\n        return false;\n      }\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  \n  return stack.empty();\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  bool result = isValid(input);\n  cout << (result ? "true" : "false") << endl;\n  return 0;\n}	54	accepted	0	1036	5	5	2025-07-28 12:39:44.250387
4cf02fa1-752d-4055-bced-dc4d59db5397	60ef8034-5a20-4ece-b185-2bfab0b68fca	1a4f7ee0-8670-469f-b48c-dafcd8e98653	use std::io;\nuse std::cmp;\n\nfn max_sub_array(nums: Vec<i32>) -> i32 {\n  let mut max_sum = nums[0];\n  let mut current_sum = nums[0];\n  \n  for i in 1..nums.len() {\n    current_sum = cmp::max(nums[i], current_sum + nums[i]);\n    max_sum = cmp::max(max_sum, current_sum);\n  }\n  \n  max_sum\n}\n\nfn main() {\n  let mut input = String::new();\n  io::stdin().read_line(&mut input).unwrap();\n  \n  // Parse the array\n  let input = input.trim();\n  let input = &input[1..input.len()-1];\n  let nums: Vec<i32> = input.split(',').map(|s| s.parse().unwrap()).collect();\n  \n  let result = max_sub_array(nums);\n  println!("{}", result);\n}	73	accepted	0.025	3583	4	4	2025-07-28 12:41:24.025529
56261c77-8f96-4064-bb00-7c05ca955062	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	package main\nimport (\n    "bufio"\n    "fmt"\n    "os"\n    "strconv"\n)\n\nfunc isPalindrome(x int) bool {\n    if x < 0 {\n        return false\n    }\n    \n    original := x\n    reversed := 0\n    \n    for x > 0 {\n        digit := x % 10\n        reversed = reversed * 10 + digit\n        x /= 10\n    }\n    \n    return original == reversed\n}\n\nfunc main() {\n    scanner := bufio.NewScanner(os.Stdin)\n    scanner.Scan()\n    input := scanner.Text()\n    \n    x, _ := strconv.Atoi(input)\n    \n    result := isPalindrome(x)\n    fmt.Println(result)\n}	60	accepted	0.026	3974	4	4	2025-07-28 12:41:51.980893
473c2883-a862-4238-8057-d8b733298f9c	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	import sys\n\ndef is_palindrome(x):\n    # Negative numbers are not palindromes\n    if x < 0:\n        return False\n    \n    # Single digit numbers are palindromes\n    if x < 10:\n        return True\n    \n    # Numbers ending with 0 are not palindromes (except 0 itself)\n    if x % 10 == 0 and x != 0:\n        return False\n    \n    reversed_num = 0\n    while x > reversed_num:\n        reversed_num = reversed_num * 10 + x % 10\n        x //= 10\n    \n    # When the length is odd, we need to get rid of the middle digit\n    return x == reversed_num or x == reversed_num // 10\n\n# Parse input and test the function\nx = int(sys.stdin.read().strip())\nresult = is_palindrome(x)\nprint(str(result).lower())	71	accepted	0.145	3276	4	4	2025-07-28 14:48:56.645179
a4d4a260-4097-450d-9fe2-15849eb86fa0	60ef8034-5a20-4ece-b185-2bfab0b68fca	2ce1f789-5ed9-4b69-a11d-7b9299054b8d	import java.util.*;\nclass Solution {\n\npublic int climbStairs(int n) {\n  if (n <= 2) return n;\n  \n  int prev2 = 1, prev1 = 2;\n  \n  for (int i = 3; i <= n; i++) {\n    int current = prev1 + prev2;\n    prev2 = prev1;\n    prev1 = current;\n  }\n  \n  return prev1;\n}\n\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    \n    Solution sol = new Solution();\n    int result = sol.climbStairs(n);\n    System.out.println(result);\n  }\n}	62	accepted	0.701	13224	3	3	2025-08-07 19:44:30.595412
851325ca-7295-46c9-a64d-e26472a52601	454a7f7a-7b5d-42aa-87ff-901b7d706b46	3a1003a7-3e58-4e1c-a242-2fa5d204dc4d	#include <iostream>\r\n#include <unordered_set>\r\n#include <string>\r\nusing namespace std;\r\n\r\nint lengthOfLongestSubstring(string s) {\r\n    unordered_set<char> set;\r\n    int left = 0, maxLen = 0;\r\n\r\n    for (int right = 0; right < s.length(); right++) {\r\n        while (set.find(s[right]) != set.end()) {\r\n            set.erase(s[left]);\r\n            left++;\r\n        }\r\n        set.insert(s[right]);\r\n        maxLen = max(maxLen, right - left + 1);\r\n    }\r\n    return maxLen;\r\n}\r\n\r\nint main() {\r\n    string s;\r\n    getline(cin, s);\r\n    cout << lengthOfLongestSubstring(s) << endl;\r\n    return 0;\r\n}\r\n	54	accepted	0	970	5	5	2025-07-15 21:24:35.056703
83961acd-86a5-4824-b44f-1c97e2bfb765	067c5e22-f899-42e4-a451-32249bab95f9	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.026	1039	3	3	2025-08-08 06:52:50.951396
138cc5cc-8b79-4cb2-a7de-235b6bbd09fd	067c5e22-f899-42e4-a451-32249bab95f9	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	999	3	3	2025-08-08 06:53:18.85132
9beeb7d9-d34f-4885-b5b3-4bddef763380	72679203-2b7d-4f8b-b74f-98410a517d03	1e783cf7-2989-4cd5-8a00-5931acc42fe6	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    // Find the comma that separates array and target\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    // Parse array [2,7,11,15]\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2); // Remove [ ]\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0	1000	3	3	2025-07-15 19:51:38.254767
1da792db-91b5-4d1f-bf8f-654b0b30c2e8	067c5e22-f899-42e4-a451-32249bab95f9	afa5c09c-a868-4acd-9895-51e6dae3a81f	#include <iostream>\n#include <vector>\n#include <string>\n#include <functional>\nusing namespace std;\n\nvector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> solutions;\n    vector<string> board(n, string(n, '.'));\n    vector<bool> columns(n, false), diag1(2 * n - 1, false), diag2(2 * n - 1, false);\n    solve(0, n, board, solutions, columns, diag1, diag2);\n    return solutions;\n}\n\nvoid solve(int row, int n, vector<string>& board, vector<vector<string>>& solutions,\n           vector<bool>& columns, vector<bool>& diag1, vector<bool>& diag2) {\n    if (row == n) {\n        solutions.push_back(board);\n        return;\n    }\n    for (int col = 0; col < n; ++col) {\n        if (!columns[col] && !diag1[row - col + n - 1] && !diag2[row + col]) {\n            board[row][col] = 'Q';\n            columns[col] = diag1[row - col + n - 1] = diag2[row + col] = true;\n            solve(row + 1, n, board, solutions, columns, diag1, diag2);\n            board[row][col] = '.';\n            columns[col] = diag1[row - col + n - 1] = diag2[row + col] = false;\n        }\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<vector<string>> result = solveNQueens(n);\n    \n    // Convert to JSON-like format\n    cout << "[";\n    for (int i = 0; i < result.size(); i++) {\n        cout << "[";\n        for (int j = 0; j < result[i].size(); j++) {\n            cout << "\\"" << result[i][j] << "\\"";\n            if (j < result[i].size() - 1) {\n                cout << ",";\n            }\n        }\n        cout << "]";\n        if (i < result.size() - 1) {\n            cout << ",";\n        }\n    }\n    cout << "]" << endl;\n    \n    return 0;\n}	54	wrong answer	0.000	0	0	2	2025-08-08 07:37:50.189344
1d58ba18-b9fb-4c8f-a832-db85e45402bc	dd1e37fc-3687-4ea0-8aa3-c3d8dd2bfae1	3a1003a7-3e58-4e1c-a242-2fa5d204dc4d	#include <iostream>\r\n#include <unordered_set>\r\n#include <string>\r\nusing namespace std;\r\n\r\nint lengthOfLongestSubstring(string s) {\r\n    unordered_set<char> set;\r\n    int left = 0, maxLen = 0;\r\n\r\n    for (int right = 0; right < s.length(); right++) {\r\n        while (set.find(s[right]) != set.end()) {\r\n            set.erase(s[left]);\r\n            left++;\r\n        }\r\n        set.insert(s[right]);\r\n        maxLen = max(maxLen, right - left + 1);\r\n    }\r\n    return maxLen;\r\n}\r\n\r\nint main() {\r\n    string s;\r\n    getline(cin, s);\r\n    cout << lengthOfLongestSubstring(s) << endl;\r\n    return 0;\r\n}\r\n	54	accepted	0	1010	5	5	2025-07-15 21:13:13.836692
8da3a692-1bb9-490a-ac79-ab3463385d1c	dd1e37fc-3687-4ea0-8aa3-c3d8dd2bfae1	f85ab41d-e0c1-481b-a899-8d696f22cb24	def findMedianSortedArrays(nums1, nums2):\n    A, B = nums1, nums2\n    m, n = len(A), len(B)\n    if m > n:\n        A, B, m, n = B, A, n, m\n    imin, imax, half = 0, m, (m + n + 1) // 2\n    while imin <= imax:\n        i = (imin + imax) // 2\n        j = half - i\n        if i < m and B[j-1] > A[i]:\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            imax = i - 1\n        else:\n            if i == 0: max_of_left = B[j-1]\n            elif j == 0: max_of_left = A[i-1]\n            else: max_of_left = max(A[i-1], B[j-1])\n            if (m + n) % 2 == 1:\n                return float(max_of_left)\n            if i == m: min_of_right = B[j]\n            elif j == n: min_of_right = A[i]\n            else: min_of_right = min(A[i], B[j])\n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == "__main__":\n    import sys, ast\n    line = sys.stdin.readline().strip()\n    nums1_str, nums2_str = line.split('],')\n    nums1 = ast.literal_eval(nums1_str + ']')\n    nums2 = ast.literal_eval(nums2_str if nums2_str.startswith('[') else '[' + nums2_str)\n    print(findMedianSortedArrays(nums1, nums2))	71	accepted	0	3640	2	2	2025-07-15 21:13:58.346893
42b50d7c-af33-4941-8fc7-6025795e9d18	cecff317-6223-49f1-a6c7-d793e60c986b	f85ab41d-e0c1-481b-a899-8d696f22cb24	#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n\nvector<int> parseArray(const string& s) {\n    vector<int> res;\n    string num;\n    for (char c : s) {\n        if (isdigit(c) || c == '-' || c == '+') num += c;\n        else if (!num.empty()) { res.push_back(stoi(num)); num.clear(); }\n    }\n    if (!num.empty()) res.push_back(stoi(num));\n    return res;\n}\n\ndouble findMedianSortedArrays(vector<int>& A, vector<int>& B) {\n    int m = A.size(), n = B.size();\n    if (m > n) return findMedianSortedArrays(B, A);\n    int imin = 0, imax = m, half = (m + n + 1) / 2;\n    while (imin <= imax) {\n        int i = (imin + imax) / 2;\n        int j = half - i;\n        if (i < m && B[j-1] > A[i]) imin = i + 1;\n        else if (i > 0 && A[i-1] > B[j]) imax = i - 1;\n        else {\n            int max_of_left = 0;\n            if (i == 0) max_of_left = B[j-1];\n            else if (j == 0) max_of_left = A[i-1];\n            else max_of_left = max(A[i-1], B[j-1]);\n            if ((m + n) % 2 == 1) return max_of_left;\n            int min_of_right = 0;\n            if (i == m) min_of_right = B[j];\n            else if (j == n) min_of_right = A[i];\n            else min_of_right = min(A[i], B[j]);\n            return (max_of_left + min_of_right) / 2.0;\n        }\n    }\n    return 0.0;\n}\n\nint main() {\n    string line;\n    getline(cin, line);\n    size_t pos = line.find("],");\n    vector<int> nums1 = parseArray(line.substr(0, pos+1));\n    vector<int> nums2 = parseArray(line.substr(pos+1));\n    cout << fixed << setprecision(1) << findMedianSortedArrays(nums1, nums2) << endl;\n    return 0;\n}	54	accepted	0	952	2	2	2025-07-15 21:30:14.217498
1476506b-4860-4246-a871-c9666a5ea77b	cecff317-6223-49f1-a6c7-d793e60c986b	1e783cf7-2989-4cd5-8a00-5931acc42fe6	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    // Find the comma that separates array and target\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    // Parse array [2,7,11,15]\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2); // Remove [ ]\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0	981	3	3	2025-07-15 21:33:29.037658
3b151b11-8445-4c7b-be22-af955fe9b8bc	cecff317-6223-49f1-a6c7-d793e60c986b	3a1003a7-3e58-4e1c-a242-2fa5d204dc4d	import java.util.*;\r\n\r\npublic class Main {\r\n    public static int lengthOfLongestSubstring(String s) {\r\n        Set<Character> set = new HashSet<>();\r\n        int left = 0, maxLen = 0;\r\n\r\n        for (int right = 0; right < s.length(); right++) {\r\n            while (set.contains(s.charAt(right))) {\r\n                set.remove(s.charAt(left));\r\n                left++;\r\n            }\r\n            set.add(s.charAt(right));\r\n            maxLen = Math.max(maxLen, right - left + 1);\r\n        }\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        String s = sc.nextLine();\r\n        System.out.println(lengthOfLongestSubstring(s));\r\n    }\r\n}\r\n	62	accepted	1	13234	5	5	2025-07-15 21:34:59.488307
9a938be6-adc1-48de-a1cc-d01e49f697f4	cecff317-6223-49f1-a6c7-d793e60c986b	1e783cf7-2989-4cd5-8a00-5931acc42fe6	/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[]}\r\n */\r\nvar twoSum = function (nums, target) {\r\n    // ...existing code...\r\n    let map = {};\r\n    for (let i = 0; i < nums.length; i++) {\r\n        let complement = target - nums[i];\r\n        if (map.hasOwnProperty(complement)) {\r\n            return [map[complement], i];\r\n        }\r\n        map[nums[i]] = i;\r\n    }\r\n    return [];\r\n};\r\n\r\nconst readline = require('readline');\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n    terminal: false\r\n});\r\n\r\nlet input = '';\r\nrl.on('line', line => input += line.trim());\r\nrl.on('close', () => {\r\n    // Split the input by the last comma outside the array\r\n    const match = input.match(/^(\\[.*\\]),(\\d+)$/);\r\n    if (!match) {\r\n        console.log('[]');\r\n        return;\r\n    }\r\n    const nums = JSON.parse(match[1]);\r\n    const target = parseInt(match[2]);\r\n    const result = twoSum(nums, target);\r\n    console.log(JSON.stringify(result));\r\n});	63	accepted	0	7265	3	3	2025-07-15 21:45:18.505412
110fc8d2-78f1-4e04-8ae6-719ded19bf2a	067c5e22-f899-42e4-a451-32249bab95f9	afa5c09c-a868-4acd-9895-51e6dae3a81f	#include <iostream>\n#include <vector>\n#include <string>\n#include <functional>\nusing namespace std;\n\nvector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> solutions;\n    vector<string> board(n, string(n, '.'));\n    vector<bool> columns(n, false), diag1(2 * n - 1, false), diag2(2 * n - 1, false);\n    solve(0, n, board, solutions, columns, diag1, diag2);\n    return solutions;\n}\n\nvoid solve(int row, int n, vector<string>& board, vector<vector<string>>& solutions,\n           vector<bool>& columns, vector<bool>& diag1, vector<bool>& diag2) {\n    if (row == n) {\n        solutions.push_back(board);\n        return;\n    }\n    for (int col = 0; col < n; ++col) {\n        if (!columns[col] && !diag1[row - col + n - 1] && !diag2[row + col]) {\n            board[row][col] = 'Q';\n            columns[col] = diag1[row - col + n - 1] = diag2[row + col] = true;\n            solve(row + 1, n, board, solutions, columns, diag1, diag2);\n            board[row][col] = '.';\n            columns[col] = diag1[row - col + n - 1] = diag2[row + col] = false;\n        }\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<vector<string>> result = solveNQueens(n);\n    \n    // Convert to JSON-like format\n    cout << "[";\n    for (int i = 0; i < result.size(); i++) {\n        cout << "[";\n        for (int j = 0; j < result[i].size(); j++) {\n            cout << "\\"" << result[i][j] << "\\"";\n            if (j < result[i].size() - 1) {\n                cout << ",";\n            }\n        }\n        cout << "]";\n        if (i < result.size() - 1) {\n            cout << ",";\n        }\n    }\n    cout << "]" << endl;\n    \n    return 0;\n}	54	wrong answer	0.000	0	0	2	2025-08-08 07:37:37.357946
92a9e2ab-c8e5-4373-bf17-80e95e10bf42	10188956-617e-4e27-bef5-6666ef4a6b5f	31e779b1-66a8-4c94-a086-9eb658a644fc	#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint binarySearch(vector<int>& nums, int target) {\n    // Write your solution here\n    int left = 0;\n    int right = nums.size() - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n\n    return -1;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find_last_of(',');\n    string numsStr = input.substr(0, pos);\n    int target = stoi(input.substr(pos + 1));\n    \n    numsStr = numsStr.substr(1, numsStr.size() - 2);\n    stringstream ss(numsStr);\n    vector<int> nums;\n    string token;\n    \n    while (getline(ss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    \n    int result = binarySearch(nums, target);\n    cout << result << endl;\n    return 0;\n}	54	accepted	0	976	3	3	2025-07-26 19:16:20.632758
a4a51409-7626-4275-bbe2-1bca90719eee	24f97225-8d04-4602-85ef-c9b992581584	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n     unordered_map<int, int> numIndexMap;  // Map from number to its index\n    \n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        \n        // Check if complement exists in the map\n        if (numIndexMap.find(complement) != numIndexMap.end()) {\n            return {numIndexMap[complement], i};\n        }\n        \n        // Store the current number and index\n        numIndexMap[nums[i]] = i;\n    }\n    \n    // If no pair is found, return empty vector\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0	999	3	3	2025-07-26 19:19:08.528494
1233ec87-9d69-4ecc-9b3d-9074151fb45a	73d5bd1b-e668-436a-a7e5-27a6b1112d34	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0	1064	3	3	2025-07-27 16:16:27.31101
96040c1f-cd90-4784-a4da-de981beda72e	73d5bd1b-e668-436a-a7e5-27a6b1112d34	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0	1047	3	3	2025-07-27 16:16:31.763465
73026099-e65c-495e-81ec-fe03ac06ab10	11393749-d7df-45c2-8176-4538bac43c75	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	973	3	3	2025-07-30 08:14:01.712861
c481814d-c7fb-4b26-856a-267694f04401	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	979	3	3	2025-07-30 14:39:31.020684
27d72fb4-88b5-4474-bb48-104e79b2901c	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        // hellloooooooooooo\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.021	967	3	3	2025-07-30 14:40:38.158563
74dfed9c-767d-47a0-8e21-ce59a8a1dcc7	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	49b1bb9a-0e0e-480e-8f0a-67edce76056b	#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n  unordered_map<char, int> map;\n  int left = 0, maxLen = 0;\n  \n  for (int right = 0; right < s.length(); right++) {\n    if (map.count(s[right]) && map[s[right]] >= left) {\n      left = map[s[right]] + 1;\n    }\n    map[s[right]] = right;\n    maxLen = max(maxLen, right - left + 1);\n  }\n  \n  return maxLen;\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  int result = lengthOfLongestSubstring(input);\n  cout << result << endl;\n  return 0;\n}	54	accepted	0.020	977	3	3	2025-07-30 14:41:21.809796
2b1daf18-3b43-4bde-8c41-d7aa1ce1f551	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	98892b62-c56d-4769-bd0d-711a4ce0ff76	#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ndouble findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() > nums2.size()) {\n        swap(nums1, nums2);\n    }\n    \n    int x = nums1.size();\n    int y = nums2.size();\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        // hello brother\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];\n        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];\n        \n        int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];\n        int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];\n        \n        if (maxX <= minY && maxY <= minX) {\n            if ((x + y) % 2 == 0) {\n                return (max(maxX, maxY) + min(minX, minY)) / 2.0;\n            } else {\n                return max(maxX, maxY);\n            }\n        } else if (maxX > minY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }\n    \n    return 0.0;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find("],[");\n    string nums1Str = input.substr(1, pos - 1);\n    string nums2Str = input.substr(pos + 2, input.size() - pos - 3);\n    \n    vector<int> nums1, nums2;\n    stringstream ss1(nums1Str), ss2(nums2Str);\n    string token;\n    \n    while (getline(ss1, token, ',')) {\n        if (!token.empty()) {\n            nums1.push_back(stoi(token));\n        }\n    }\n    \n    while (getline(ss2, token, ',')) {\n        if (!token.empty()) {\n            nums2.push_back(stoi(token));\n        }\n    }\n    \n    double result = findMedianSortedArrays(nums1, nums2);\n    cout << fixed << setprecision(5) << result << endl;\n    return 0;\n}	54	wrong answer	0.000	0	0	3	2025-07-30 14:42:10.069091
2ba73716-0fb3-4b8c-a89e-4f057688992d	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	49b1bb9a-0e0e-480e-8f0a-67edce76056b	use std::io;\nuse std::collections::HashMap;\n\nfn length_of_longest_substring(s: String) -> i32 {\n  let mut map = HashMap::new();\n  let mut left = 0;\n  let mut max_len = 0;\n  \n  for (right, c) in s.chars().enumerate() {\n    if let Some(&idx) = map.get(&c) {\n      if idx >= left {\n        left = idx + 1;\n      }\n    }\n    map.insert(c, right);\n    max_len = max_len.max(right - left + 1);\n  }\n  \n  max_len as i32\n}\n\nfn main() {\n  let mut input = String::new();\n  io::stdin().read_line(&mut input).unwrap();\n  let input = input.trim().to_string();\n  let result = length_of_longest_substring(input);\n  println!("{}", result);\n}	73	accepted	0.016	3656	3	3	2025-07-30 14:43:23.486105
9500cfb6-976f-4685-bbcc-5c4fe6eb8ecf	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	49b1bb9a-0e0e-480e-8f0a-67edce76056b	import sys\n\ndef length_of_longest_substring(s):\n  char_map = {}\n  left = max_len = 0\n  \n  for right, char in enumerate(s):\n    if char in char_map and char_map[char] >= left:\n      left = char_map[char] + 1\n    char_map[char] = right\n    max_len = max(max_len, right - left + 1)\n    # helllo\n    \n  return max_len\n\ninput_data = sys.stdin.read().strip()\nresult = length_of_longest_substring(input_data)\nprint(result)	71	accepted	0.092	3297	3	3	2025-07-30 14:43:44.816771
d5bff621-03a4-4bbd-984c-2a5b5b1c1796	60ef8034-5a20-4ece-b185-2bfab0b68fca	31e779b1-66a8-4c94-a086-9eb658a644fc	import java.util.*;\nclass Solution {\n\nint binarySearch(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    \n    return -1;\n}\n\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        \n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int result = sol.binarySearch(nums, target);\n        System.out.println(result);\n    }\n}	62	accepted	0.647	13168	3	3	2025-07-30 18:37:13.264702
1be9f6ab-89fd-4b38-9b94-7fb0f9658097	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.016	1031	3	3	2025-07-31 10:43:13.080574
4fa68f8d-5944-45b8-ac45-cbe1c4b8c3be	c7e2be5d-f457-457e-a7b7-996c0d3cbd66	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	1008	3	3	2025-07-31 10:43:38.811973
020e7768-85ec-44ea-a465-405882e676ac	8d1dd681-8c40-4f8e-ad16-833e706c5508	49b1bb9a-0e0e-480e-8f0a-67edce76056b	#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n  unordered_map<char, int> map;\n  int left = 0, maxLen = 0;\n  \n  for (int right = 0; right < s.length(); right++) {\n    if (map.count(s[right]) && map[s[right]] >= left) {\n      left = map[s[right]] + 1;\n    }\n    map[s[right]] = right;\n    maxLen = max(maxLen, right - left + 1);\n  }\n  \n  return maxLen;\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  int result = lengthOfLongestSubstring(input);\n  cout << result << endl;\n  return 0;\n}	54	pending	\N	\N	0	3	2025-08-01 17:12:06.585689
e9d5284a-71a2-4e93-92e0-897c68f1b2ed	60ef8034-5a20-4ece-b185-2bfab0b68fca	49b1bb9a-0e0e-480e-8f0a-67edce76056b	use std::io;\nuse std::collections::HashMap;\n\nfn length_of_longest_substring(s: String) -> i32 {\n  let mut map = HashMap::new();\n  let mut left = 0;\n  let mut max_len = 0;\n  \n  for (right, c) in s.chars().enumerate() {\n    if let Some(&idx) = map.get(&c) {\n      if idx >= left {\n        left = idx + 1;\n      }\n    }\n    map.insert(c, right);\n    max_len = max_len.max(right - left + 1);\n  }\n  \n  max_len as i32\n}\n\nfn main() {\n  let mut input = String::new();\n  io::stdin().read_line(&mut input).unwrap();\n  let input = input.trim().to_string();\n  let result = length_of_longest_substring(input);\n  println!("{}", result);\n}	73	accepted	0.018	3644	3	3	2025-07-31 12:11:10.070456
aad549d1-97bc-423b-8411-1e7bcc9d1e33	ae2332b5-71fe-4b3a-90f0-2e4ece75cfa5	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.016	1059	3	3	2025-08-11 13:02:26.815478
be5b3fb1-98ce-444e-ba13-ffd9ae41b5db	05928038-08f7-4abb-8b88-902901077d53	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	915	3	3	2025-07-31 16:00:51.653751
5dd40834-8d51-414b-8340-4487c25aec94	05928038-08f7-4abb-8b88-902901077d53	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.020	953	3	3	2025-07-31 16:00:53.947067
a0f4a668-dffa-41b4-89b3-6a572dbccc22	91b63c9a-5abb-4e2e-9095-5a6f121e4228	afa5c09c-a868-4acd-9895-51e6dae3a81f	import sys\nimport json\n\ndef solve_n_queens(n):\n    result = []\n    \n    # Create empty board\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    \n    def is_valid(row, col):\n        # Check column\n        for i in range(row):\n            if board[i][col] == 'Q':\n                return False\n        \n        # Check upper left diagonal\n        i, j = row - 1, col - 1\n        while i >= 0 and j >= 0:\n            if board[i][j] == 'Q':\n                return False\n            i -= 1\n            j -= 1\n        \n        # Check upper right diagonal\n        i, j = row - 1, col + 1\n        while i >= 0 and j < n:\n            if board[i][j] == 'Q':\n                return False\n            i -= 1\n            j += 1\n        \n        return True\n    \n    def backtrack(row):\n        if row == n:\n            # Create solution without spaces\n            solution = []\n            for r in board:\n                solution.append(''.join(r))\n            result.append(solution)\n            return\n        \n        for col in range(n):\n            if is_valid(row, col):\n                board[row][col] = 'Q'\n                backtrack(row + 1)\n                board[row][col] = '.'\n    \n    backtrack(0)\n    return result\n\ninput_data = sys.stdin.read().strip()\nn = int(input_data)\nresult = solve_n_queens(n)\n# Ensure no spaces in JSON output\nprint(json.dumps(result).replace(" ", ""))	71	accepted	0.114	4162	2	2	2025-07-31 19:34:24.674509
ba548436-69e4-4f56-b703-53ad3391901e	91b63c9a-5abb-4e2e-9095-5a6f121e4228	afa5c09c-a868-4acd-9895-51e6dae3a81f	#include <iostream>\n#include <vector>\n#include <string>\n#include <functional>\nusing namespace std;\n\nvector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> result;\n    vector<string> board(n, string(n, '.'));\n    \n    // Check if position is valid\n    auto isValid = [&](int row, int col) -> bool {\n        // Check column\n        for (int i = 0; i < row; i++) {\n            if (board[i][col] == 'Q') {\n                return false;\n            }\n        }\n        \n        // Check upper left diagonal\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        // Check upper right diagonal\n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        return true;\n    };\n    \n    // Backtracking function\n    function<void(int)> backtrack = [&](int row) {\n        if (row == n) {\n            result.push_back(board);\n            return;\n        }\n        \n        for (int col = 0; col < n; col++) {\n            if (isValid(row, col)) {\n                board[row][col] = 'Q';\n                backtrack(row + 1);\n                board[row][col] = '.';\n            }\n        }\n    };\n    \n    backtrack(0);\n    return result;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<vector<string>> result = solveNQueens(n);\n    \n    // Convert to JSON-like format\n    cout << "[";\n    for (int i = 0; i < result.size(); i++) {\n        cout << "[";\n        for (int j = 0; j < result[i].size(); j++) {\n            cout << "\\"" << result[i][j] << "\\"";\n            if (j < result[i].size() - 1) {\n                cout << ",";\n            }\n        }\n        cout << "]";\n        if (i < result.size() - 1) {\n            cout << ",";\n        }\n    }\n    cout << "]" << endl;\n    \n    return 0;\n}	54	accepted	0.014	1016	2	2	2025-07-31 21:39:07.683408
e7309762-e601-44b3-bfdb-fea387eca90b	76fcb56d-19db-4834-a4b7-a998cad5e099	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.020	913	3	3	2025-07-31 21:56:38.458171
72e908ae-d7a6-4e4d-932f-df9199688d49	76fcb56d-19db-4834-a4b7-a998cad5e099	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.016	995	3	3	2025-07-31 21:56:41.302933
a724e67e-d130-4be0-b5d9-e70a579c5df6	76fcb56d-19db-4834-a4b7-a998cad5e099	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {mp[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	wrong answer	0.000	0	0	3	2025-07-31 21:57:10.307928
af4a0b11-9108-48d0-997f-6e02bea65603	76fcb56d-19db-4834-a4b7-a998cad5e099	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n    let map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n    return [];\n};\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    terminal: false\n});\n\nlet input = '';\nrl.on('line', line => input += line.trim());\nrl.on('close', () => {\n    const match = input.match(/^(\\[.*\\]),(\\d+)$/);\n    if (!match) {\n        console.log('[]');\n        return;\n    }\n    const nums = JSON.parse(match[1]);\n    const target = parseInt(match[2]);\n    const result = twoSum(nums, target);\n    console.log(JSON.stringify(result));\n});	63	accepted	0.247	7309	3	3	2025-07-31 21:57:28.780252
8a1f81ed-8413-4985-b471-62af25deb75d	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	bool isPalindrome(int x) {\n    // Negative numbers are not palindromes\n    if (x < 0) return false;\n    \n    // Single digit numbers are palindromes\n    if (x < 10) return true;\n    \n    // Numbers ending with 0 are not palindromes (except 0 itself)\n    if (x % 10 == 0 && x != 0) return false;\n    \n    int reversed = 0;\n    while (x > reversed) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    \n    // When the length is odd, we need to get rid of the middle digit\n    return x == reversed || x == reversed / 10;\n}	54	pending	\N	\N	0	1	2025-08-01 09:25:13.574549
dfbfcb11-fef7-4b67-872a-321b63b9b5ef	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	boolean isPalindrome(int x) {\n    // Negative numbers are not palindromes\n    if (x < 0) return false;\n    \n    // Single digit numbers are palindromes\n    if (x < 10) return true;\n    \n    // Numbers ending with 0 are not palindromes (except 0 itself)\n    if (x % 10 == 0 && x != 0) return false;\n    \n    int reversed = 0;\n    while (x > reversed) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    \n    // When the length is odd, we need to get rid of the middle digit\n    return x == reversed || x == reversed / 10;\n}	62	pending	\N	\N	0	1	2025-08-01 09:27:02.034145
df9edde3-b164-41ec-98fa-53f3b8289305	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	boolean isPalindrome(int x) {\n    // Negative numbers are not palindromes\n    if (x < 0) return false;\n    \n    // Single digit numbers are palindromes\n    if (x < 10) return true;\n    \n    // Numbers ending with 0 are not palindromes (except 0 itself)\n    if (x % 10 == 0 && x != 0) return false;\n    \n    int reversed = 0;\n    while (x > reversed) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    \n    // When the length is odd, we need to get rid of the middle digit\n    return x == reversed || x == reversed / 10;\n}	62	pending	\N	\N	0	1	2025-08-01 09:27:07.834687
ae10f4d0-bf7e-4e75-b8c4-6c6f3b973235	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	fn is_palindrome(x: i32) -> bool {\n    // Negative numbers are not palindromes\n    if x < 0 {\n        return false;\n    }\n    \n    // Single digit numbers are palindromes\n    if x < 10 {\n        return true;\n    }\n    \n    // Numbers ending with 0 are not palindromes (except 0 itself)\n    if x % 10 == 0 && x != 0 {\n        return false;\n    }\n    \n    let mut original = x;\n    let mut reversed = 0;\n    \n    while original > reversed {\n        reversed = reversed * 10 + original % 10;\n        original /= 10;\n    }\n    \n    // When the length is odd, we need to get rid of the middle digit\n    original == reversed || original == reversed / 10\n}	73	pending	\N	\N	0	1	2025-08-01 09:30:22.814262
b2bbfd78-b9d5-4a0f-8a4a-60ce4d0efbc6	60ef8034-5a20-4ece-b185-2bfab0b68fca	a08e5b03-7893-48b2-9379-5525c420ca77	vector<int> bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 0; i < n - 1; i++) {\n        bool swapped = false;\n        \n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap arr[j] and arr[j+1]\n                swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        \n        // If no swapping occurred in this pass, array is sorted\n        if (!swapped) break;\n    }\n    \n    return arr;\n}	54	pending	\N	\N	0	1	2025-08-01 09:36:52.774646
b3bb98d8-9e21-4a68-bb7f-f2495fdba8bb	60ef8034-5a20-4ece-b185-2bfab0b68fca	afa5c09c-a868-4acd-9895-51e6dae3a81f	vector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> result;\n    vector<string> board(n, string(n, '.'));\n    \n    // Check if position is valid\n    auto isValid = [&](int row, int col) -> bool {\n        // Check column\n        for (int i = 0; i < row; i++) {\n            if (board[i][col] == 'Q') {\n                return false;\n            }\n        }\n        \n        // Check upper left diagonal\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        // Check upper right diagonal\n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        return true;\n    };\n    \n    // Backtracking function\n    function<void(int)> backtrack = [&](int row) {\n        if (row == n) {\n            result.push_back(board);\n            return;\n        }\n        \n        for (int col = 0; col < n; col++) {\n            if (isValid(row, col)) {\n                board[row][col] = 'Q';\n                backtrack(row + 1);\n                board[row][col] = '.';\n            }\n        }\n    };\n    \n    backtrack(0);\n    return result;\n}	54	pending	\N	\N	0	1	2025-08-01 09:38:16.384256
e83b535e-5f62-4e0d-8b3a-14e9e38f9561	60ef8034-5a20-4ece-b185-2bfab0b68fca	1a4f7ee0-8670-469f-b48c-dafcd8e98653	def max_sub_array(nums)\n  max_sum = nums[0]\n  current_sum = nums[0]\n  \n  (1...nums.length).each do |i|\n    current_sum = [nums[i], current_sum + nums[i]].max\n    max_sum = [max_sum, current_sum].max\n  end\n  \n  max_sum\nend\n\ninput = gets.strip\nnums = eval(input)\nresult = max_sub_array(nums)\nputs result	72	accepted	0.489	9266	4	4	2025-08-01 12:14:04.920055
a7932c36-b852-40ba-8d03-77c6373e0f9e	60ef8034-5a20-4ece-b185-2bfab0b68fca	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.023	1020	3	3	2025-08-01 12:54:49.000125
42e3aab4-a82f-4850-8a24-2897f6b578b2	60ef8034-5a20-4ece-b185-2bfab0b68fca	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    // Negative numbers are not palindromes\n    if (x < 0) return false;\n    \n    // Single digit numbers are palindromes\n    if (x < 10) return true;\n    \n    // Numbers ending with 0 are not palindromes (except 0 itself)\n    if (x % 10 == 0 && x != 0) return false;\n    \n    int reversed = 0;\n    while (x > reversed) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    \n    // When the length is odd, we need to get rid of the middle digit\n    return x == reversed || x == reversed / 10;\n}\n\nint main() {\n    int x;\n    cin >> x;\n    \n    bool result = isPalindrome(x);\n    cout << (result ? "true" : "false") << endl;\n    return 0;\n}	54	accepted	0.025	964	4	4	2025-08-01 12:57:00.648282
a35d9e04-0747-4ee5-9136-348f20db8921	0e3df60e-b343-4508-bbda-f15ff5a02c94	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	951	3	3	2025-08-01 14:40:28.044787
8b1bef55-1427-4c89-bbaf-6ebdc77a17fe	52722750-137d-4a19-ab58-6231b0fd0e77	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.824	13656	3	3	2025-08-01 15:13:36.697172
7c6c05a2-38a6-4491-b247-7ba060e2a0f5	0bc82242-14c5-43fb-9058-ff3919a69388	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	965	3	3	2025-08-01 17:08:14.69911
2674047d-4e46-41c3-be55-0789b6a7159c	fd8abca1-70ed-49e6-acaa-800dd2c56130	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	1161	3	3	2025-08-01 17:10:43.956261
d81c556c-8e8e-450a-930b-b4731513f351	0bc82242-14c5-43fb-9058-ff3919a69388	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.020	905	3	3	2025-08-01 17:11:48.315599
99af3034-da3f-4096-bfa0-22f9d91feb9c	8d1dd681-8c40-4f8e-ad16-833e706c5508	49b1bb9a-0e0e-480e-8f0a-67edce76056b	#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n  unordered_map<char, int> map;\n  int left = 0, maxLen = 0;\n  \n  for (int right = 0; right < s.length(); right++) {\n    if (map.count(s[right]) && map[s[right]] >= left) {\n      left = map[s[right]] + 1;\n    }\n    map[s[right]] = right;\n    maxLen = max(maxLen, right - left + 1);\n  }\n  \n  return maxLen;\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  int result = lengthOfLongestSubstring(input);\n  cout << result << endl;\n  return 0;\n}	54	accepted	0.018	995	3	3	2025-08-01 17:11:51.51735
56a059e6-3d55-4c6d-baf5-ee93ef39aa97	8d1dd681-8c40-4f8e-ad16-833e706c5508	49b1bb9a-0e0e-480e-8f0a-67edce76056b	#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n  unordered_map<char, int> map;\n  int left = 0, maxLen = 0;\n  \n  for (int right = 0; right < s.length(); right++) {\n    if (map.count(s[right]) && map[s[right]] >= left) {\n      left = map[s[right]] + 1;\n    }\n    map[s[right]] = right;\n    maxLen = max(maxLen, right - left + 1);\n  }\n  \n  return maxLen;\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  int result = lengthOfLongestSubstring(input);\n  cout << result << endl;\n  return 0;\n}	54	pending	\N	\N	0	3	2025-08-01 17:12:01.526405
6dd93a4e-5d56-4e92-ab1c-1fb33c0036b3	0bc82242-14c5-43fb-9058-ff3919a69388	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i-1;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	wrong answer	0.022	939	0	3	2025-08-01 17:12:04.829444
78cdd3f1-d806-411e-a236-2d4b2731369c	d54c5548-4947-497b-89d6-cb22fbca1e6e	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	989	3	3	2025-08-01 17:13:50.778632
0f948f12-0490-44bb-964f-4ecee30cfdde	ed46aacf-79a5-4b97-8992-152fad7e21e9	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	1055	3	3	2025-08-01 17:15:05.482569
bc1b544f-df0d-4267-8e3f-bac3c1228ae3	ed46aacf-79a5-4b97-8992-152fad7e21e9	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	1053	3	3	2025-08-01 17:17:32.920869
fe47af70-4714-49a0-8b84-29788d8a6bda	1d88e363-0805-40f6-b0c4-26543fdbfa4f	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	933	3	3	2025-08-01 17:20:11.728992
9b5fffe7-ce9f-422d-9ebe-942c528294ce	1d88e363-0805-40f6-b0c4-26543fdbfa4f	49b1bb9a-0e0e-480e-8f0a-67edce76056b	#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n  unordered_map<char, int> map;\n  int left = 0, maxLen = 0;\n  \n  for (int right = 0; right < s.length(); right++) {\n    if (map.count(s[right]) && map[s[right]] >= left) {\n      left = map[s[right]] + 1;\n    }\n    map[s[right]] = right;\n    maxLen = max(maxLen, right - left + 1);\n  }\n  \n  return maxLen;\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  int result = lengthOfLongestSubstring(input);\n  cout << result << endl;\n  return 0;\n}	54	accepted	0.016	912	3	3	2025-08-01 17:20:44.45227
4e7c0a2c-b700-43d9-a7af-1875587e1793	1dbfa88d-f276-4b2f-be98-74caabef355a	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	957	3	3	2025-08-01 17:31:47.588067
a8ad3e2e-24a5-4ffd-af7c-5301420c0111	5697a76d-d167-443c-b2f9-ee7458bf0d63	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.794	14165	3	3	2025-08-01 17:33:48.802374
6c519b9d-6cd5-455d-a323-9085b0ed783c	0f9ec3a5-5128-4be4-829e-39c1b5217359	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import sys\n\ndef two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ninput_data = sys.stdin.read().strip()\ncomma_pos = input_data.rfind(',')\nnums_str = input_data[:comma_pos]\ntarget = int(input_data[comma_pos+1:])\nnums_str = nums_str[1:-1]\nnums = [int(x) for x in nums_str.split(',')]\nresult = two_sum(nums, target)\nprint('[' + ','.join(map(str, result)) + ']')	71	accepted	0.093	3300	3	3	2025-08-01 17:44:26.09337
5d1ab7ac-17c2-42b0-af6b-5149dc250c88	0f9ec3a5-5128-4be4-829e-39c1b5217359	49b1bb9a-0e0e-480e-8f0a-67edce76056b	import sys\n\ndef length_of_longest_substring(s):\n  char_map = {}\n  left = max_len = 0\n  \n  for right, char in enumerate(s):\n    if char in char_map and char_map[char] >= left:\n      left = char_map[char] + 1\n    char_map[char] = right\n    max_len = max(max_len, right - left + 1)\n    \n  return max_len\n\ninput_data = sys.stdin.read().strip()\nresult = length_of_longest_substring(input_data)\nprint(result)	71	accepted	0.105	3256	3	3	2025-08-01 17:45:21.001972
58b66d75-2126-4278-9deb-a377bce5067a	8a1bb73d-9293-4a4b-bd5a-8836031002ff	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n    let map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n    return [];\n};\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    terminal: false\n});\n\nlet input = '';\nrl.on('line', line => input += line.trim());\nrl.on('close', () => {\n    const match = input.match(/^(\\[.*\\]),(\\d+)$/);\n    if (!match) {\n        console.log('[]');\n        return;\n    }\n    const nums = JSON.parse(match[1]);\n    const target = parseInt(match[2]);\n    const result = twoSum(nums, target);\n    console.log(JSON.stringify(result));\n});	63	accepted	0.232	7289	3	3	2025-08-01 17:35:02.829226
455a3b6d-b95a-44f5-b4ba-45b7c0be766b	8a1bb73d-9293-4a4b-bd5a-8836031002ff	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        map.set(nums[i], i);\n    }\n    return [];\n};\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    terminal: false\n});\n\nlet input = '';\nrl.on('line', line => input += line.trim());\nrl.on('close', () => {\n    const match = input.match(/^(\\[.*\\]),(\\d+)$/);\n    if (!match) {\n        console.log('[]');\n        return;\n    }\n    const nums = JSON.parse(match[1]);\n    const target = parseInt(match[2]);\n    const result = twoSum(nums, target);\n    console.log(JSON.stringify(result));\n});	63	accepted	0.233	7224	3	3	2025-08-01 17:39:57.994979
446cdaca-01d4-43d5-8e60-2eed1b71ab5a	0f9ec3a5-5128-4be4-829e-39c1b5217359	98892b62-c56d-4769-bd0d-711a4ce0ff76	import sys\n\ndef find_median_sorted_arrays(nums1, nums2):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    x, y = len(nums1), len(nums2)\n    low, high = 0, x\n    \n    while low <= high:\n        partition_x = (low + high) // 2\n        partition_y = (x + y + 1) // 2 - partition_x\n        \n        max_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]\n        max_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]\n        \n        min_x = float('inf') if partition_x == x else nums1[partition_x]\n        min_y = float('inf') if partition_y == y else nums2[partition_y]\n        \n        if max_x <= min_y and max_y <= min_x:\n            if (x + y) % 2 == 0:\n                return (max(max_x, max_y) + min(min_x, min_y)) / 2\n            else:\n                return max(max_x, max_y)\n        elif max_x > min_y:\n            high = partition_x - 1\n        else:\n            low = partition_x + 1\n    \n    return 0\n\n# Parse input and test the function\ninput_data = sys.stdin.read().strip()\nparts = input_data.split('],[')\nnums1_str = parts[0].replace('[', '')\nnums2_str = parts[1].replace(']', '')\n\nnums1 = [int(x) for x in nums1_str.split(',')] if nums1_str else []\nnums2 = [int(x) for x in nums2_str.split(',')] if nums2_str else []\n\nresult = find_median_sorted_arrays(nums1, nums2)\nprint(f"{result:.5f}")	71	accepted	0.094	3288	3	3	2025-08-01 17:52:19.167201
75dad082-7a3f-4671-8494-ad153d8864ed	6c937868-0923-4fe5-ac56-5330836160f0	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    \n    int reverse = 0;\n  \n    // Copy of the original number so that the original\n    // number remains unchanged while finding the reverse\n    int temp = abs(x);\n    while (temp != 0) {\n        reverse = (reverse * 10) + (temp % 10);\n        temp = temp / 10;\n    }\n  \n    // If reverse is equal to the original number, the\n    // number is palindrome\n    return (reverse == abs(x));\n}\n\nint main() {\n    int x;\n    cin >> x;\n    \n    bool result = isPalindrome(x);\n    cout << (result ? "true" : "false") << endl;\n    return 0;\n}	54	wrong answer	0.025	911	3	4	2025-08-01 18:04:10.893845
e0f024ef-74d1-468e-87f5-a0086b9dc339	dc04fbef-a589-41be-870b-78b2e2100ff7	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	1017	3	3	2025-08-01 18:12:53.259665
37a58bdf-5a2a-4d74-852e-ef112811ffcd	6c937868-0923-4fe5-ac56-5330836160f0	2dc17b29-d21b-47dc-9f4b-761e82bac6ff	#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    // 1. Negative numbers are not palindromes (e.g., -121 reads differently forward and backward).\n    if (x < 0) {\n        return false;\n    }\n    \n    // 2. Numbers ending with 0 (e.g., 10, 120) are not palindromes unless the number itself is 0.\n    // This is because a palindrome must read the same backward, so if it ends in 0, it must also start in 0,\n    // which is only possible for the number 0 itself.\n    if (x % 10 == 0 && x != 0) {\n        return false;\n    }\n    \n    int reversed = 0;\n    // This loop cleverly builds the `reversed` number from the last half of `x`.\n    // It stops when `x` (the remaining front half) becomes less than or equal to `reversed` (the built-up back half).\n    while (x > reversed) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    \n    // For even-length numbers (e.g., 1221), `x` and `reversed` will be equal at the end (12 and 12).\n    // For odd-length numbers (e.g., 12321), `reversed` will include the middle digit (123) while `x` will be the remaining front part (12).\n    // In this case, we check if `x` is equal to `reversed / 10` (12 == 123 / 10 which is 12).\n    return x == reversed || x == reversed / 10;\n}\n\nint main() {\n    int x;\n    cin >> x;\n    \n    bool result = isPalindrome(x);\n    cout << (result ? "true" : "false") << endl;\n    return 0;\n}	54	accepted	0.025	939	4	4	2025-08-01 18:12:56.918329
fd08b799-6c24-48a5-aaf0-f44b998ecfdb	2744a854-df9c-4803-bb8b-7a046afd7a40	98892b62-c56d-4769-bd0d-711a4ce0ff76	import java.util.*;\nclass Solution {\n\ndouble findMedianSortedArrays(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        int[] temp = nums1;\n        nums1 = nums2;\n        nums2 = temp;\n    }\n    \n    int x = nums1.length;\n    int y = nums2.length;\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\n        int maxY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\n        \n        int minX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\n        int minY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\n        \n        if (maxX <= minY && maxY <= minX) {\n            if ((x + y) % 2 == 0) {\n                return (Math.max(maxX, maxY) + Math.min(minX, minY)) / 2.0;\n            } else {\n                return Math.max(maxX, maxY);\n            }\n        } else if (maxX > minY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }\n    \n    return 0.0;\n}\n\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        \n        String[] parts = input.split("\\\\],\\\\[");\n        String nums1Str = parts[0].replace("[", "");\n        String nums2Str = parts[1].replace("]", "");\n        \n        int[] nums1 = nums1Str.isEmpty() ? new int[0] : \n                     Arrays.stream(nums1Str.split(","))\n                           .mapToInt(Integer::parseInt)\n                           .toArray();\n        \n        int[] nums2 = nums2Str.isEmpty() ? new int[0] : \n                     Arrays.stream(nums2Str.split(","))\n                           .mapToInt(Integer::parseInt)\n                           .toArray();\n        \n        Solution sol = new Solution();\n        double result = sol.findMedianSortedArrays(nums1, nums2);\n        System.out.printf("%.5f%n", result);\n    }\n}	62	accepted	0.691	13728	3	3	2025-08-01 18:15:23.246245
d6686a20-a659-450e-9846-bada6ca06abb	2744a854-df9c-4803-bb8b-7a046afd7a40	98892b62-c56d-4769-bd0d-711a4ce0ff76	import java.util.*;\nclass Solution {\n\ndouble findMedianSortedArrays(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        int[] temp = nums1;\n        nums1 = nums2;\n        nums2 = temp;\n    }\n    \n    int x = nums1.length;\n    int y = nums2.length;\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\n        int maxY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\n        \n        int minX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\n        int minY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\n        \n        if (maxX <= minY && maxY <= minX) {\n            if ((x + y) % 2 == 0) {\n                return (Math.max(maxX, maxY) + Math.min(minX, minY)) / 2.0;\n            } else {\n                return Math.max(maxX, maxY);\n            }\n        } else if (maxX > minY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }\n    \n    return 0.0;\n}\n\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        \n        String[] parts = input.split("\\\\],\\\\[");\n        String nums1Str = parts[0].replace("[", "");\n        String nums2Str = parts[1].replace("]", "");\n        \n        int[] nums1 = nums1Str.isEmpty() ? new int[0] : \n                     Arrays.stream(nums1Str.split(","))\n                           .mapToInt(Integer::parseInt)\n                           .toArray();\n        \n        int[] nums2 = nums2Str.isEmpty() ? new int[0] : \n                     Arrays.stream(nums2Str.split(","))\n                           .mapToInt(Integer::parseInt)\n                           .toArray();\n        \n        Solution sol = new Solution();\n        double result = sol.findMedianSortedArrays(nums1, nums2);\n        System.out.printf("%.5f%n", result);\n    }\n}	62	accepted	0.678	13625	3	3	2025-08-01 18:15:16.399724
00bb20d1-a3cf-4e7c-bb3a-a5c10ed2143e	41fdd320-8475-47a6-bf32-fb59b5085248	4ed5c8d7-5bfd-4335-8aea-3c85ea3f3205	import java.util.*;\nclass Solution {\n\nvoid rotate(int[] nums, int k) {\n    int n = nums.length;\n    k = k % n; // In case k is greater than n\n\n    // Reverse the whole array\n    reverse(nums, 0, n - 1);\n    // Reverse first k elements\n    reverse(nums, 0, k - 1);\n    // Reverse the remaining elements\n    reverse(nums, k, n - 1);\n}\n\nvoid reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String numsStr = sc.nextLine().trim();\n        int k = Integer.parseInt(sc.nextLine().trim());\n        \n        // Parse input array\n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] numStrs = numsStr.split(",");\n        int[] nums = new int[numStrs.length];\n        for (int i = 0; i < numStrs.length; i++) {\n            nums[i] = Integer.parseInt(numStrs[i]);\n        }\n        \n        Solution sol = new Solution();\n        sol.rotate(nums, k);\n        \n        // Print result\n        System.out.print("[");\n        for (int i = 0; i < nums.length; i++) {\n            System.out.print(nums[i]);\n            if (i < nums.length - 1) {\n                System.out.print(",");\n            }\n        }\n        System.out.println("]");\n    }\n}	62	accepted	0.438	13020	2	2	2025-08-01 18:20:19.625595
8af75f17-7ec5-4f8b-9343-52bc49d7c02f	41fdd320-8475-47a6-bf32-fb59b5085248	4ed5c8d7-5bfd-4335-8aea-3c85ea3f3205	import java.util.*;\nclass Solution {\n\nvoid rotate(int[] nums, int k) {\n    int n = nums.length;\n    k = k % n; // In case k is greater than n\n\n    // Reverse the whole array\n    reverse(nums, 0, n - 1);\n    // Reverse first k elements\n    reverse(nums, 0, k - 1);\n    // Reverse the remaining elements\n    reverse(nums, k, n - 1);\n}\n\nvoid reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String numsStr = sc.nextLine().trim();\n        int k = Integer.parseInt(sc.nextLine().trim());\n        \n        // Parse input array\n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] numStrs = numsStr.split(",");\n        int[] nums = new int[numStrs.length];\n        for (int i = 0; i < numStrs.length; i++) {\n            nums[i] = Integer.parseInt(numStrs[i]);\n        }\n        \n        Solution sol = new Solution();\n        sol.rotate(nums, k);\n        \n        // Print result\n        System.out.print("[");\n        for (int i = 0; i < nums.length; i++) {\n            System.out.print(nums[i]);\n            if (i < nums.length - 1) {\n                System.out.print(",");\n            }\n        }\n        System.out.println("]");\n    }\n}	62	accepted	0.389	13096	2	2	2025-08-01 18:20:24.255724
7064877f-19d6-4d97-b8e8-915ad3826524	286d76e6-f479-4509-80e4-48769bedb12f	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.791	13640	3	3	2025-08-01 18:21:04.84254
db6daa9b-f444-4308-b347-45b278c3638f	1f6a900c-36f2-4a1b-a01d-61a509d5e14e	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.020	951	3	3	2025-08-01 19:25:31.333941
cbf575d0-3161-4722-9e30-ee3dc405f4ff	623c6999-3b5f-4ac6-ad3f-34c6ab17bfb8	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	972	3	3	2025-08-01 19:31:47.120363
52f958cc-18c6-4531-914a-16424c9ca195	60ef8034-5a20-4ece-b185-2bfab0b68fca	29021bca-113b-4d80-a0bc-372090fef41c	#include <iostream>\n#include <string>\n#include <stack>\n#include <unordered_map>\nusing namespace std;\n\nbool isValid(string s) {\n  stack<char> stack;\n  unordered_map<char, char> map = {{')', '('}, {'}', '{'}, {']', '['}};\n  \n  for (char c : s) {\n    if (map.find(c) != map.end()) {\n      if (stack.empty() || stack.top() != map[c]) {\n        return false;\n      }\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  \n  return stack.empty();\n}\n\nint main() {\n  string input;\n  getline(cin, input);\n  bool result = isValid(input);\n  cout << (result ? "true" : "false") << endl;\n  return 0;\n}	54	accepted	0.032	993	5	5	2025-08-01 22:35:39.678807
1f9b2ac0-41c5-4c56-86fc-b270ae6b4c00	71a2bc95-b908-419b-91f3-7d6835f9eb6a	69e1c569-051e-4d37-a6dd-a7dd453d6a25	#include <iostream>\n#include <vector>\nusing namespace std;\n\n#include <iostream>\n\nint fib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; ++i) {\n        int temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b;\n}\n\nint main() {\n    int n;\n    std::cout << "Enter n: ";\n    std::cin >> n;\n\n    std::cout << "Fibonacci(" << n << ") = " << fib(n) << std::endl;\n    return 0;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    int result = fibonacci(n);\n    cout << result << endl;\n    \n    return 0;\n}	54	wrong answer	0.000	0	0	3	2025-08-02 02:39:22.221332
3e3515ac-bce8-4945-9542-21563fd3fd14	0595ad95-38d0-428b-8512-d9e420dedc1b	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	1057	3	3	2025-08-02 06:15:30.933034
6447a554-3b36-40ca-98e5-da316b7ede38	f52ed304-6f64-493c-a48d-f888cb19c220	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	1048	3	3	2025-08-02 17:44:20.768134
75fe7f88-3be9-46e9-8a3c-a33ce58b923e	a5626a42-24e2-4aaf-8544-8907dbe40f3a	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	967	3	3	2025-08-02 19:08:24.733112
715fa447-e37c-49bf-9a94-c61e83713fac	23db0541-4ad7-407e-8a73-6000a590b14b	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.019	999	3	3	2025-08-02 19:29:30.923739
7bb5ec76-404d-4b8b-a314-afbeeb028d75	23db0541-4ad7-407e-8a73-6000a590b14b	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	984	3	3	2025-08-02 19:29:34.538927
12c93a12-d640-498a-97d3-3519300ef678	05604f0f-85f9-4f9a-8cd0-b115a191e77b	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import sys\n\ndef two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ninput_data = sys.stdin.read().strip()\ncomma_pos = input_data.rfind(',')\nnums_str = input_data[:comma_pos]\ntarget = int(input_data[comma_pos+1:])\nnums_str = nums_str[1:-1]\nnums = [int(x) for x in nums_str.split(',')]\nresult = two_sum(nums, target)\nprint('[' + ','.join(map(str, result)) + ']')	71	accepted	0.096	3273	3	3	2025-08-02 20:01:01.916885
d3ba3688-0d18-4d45-9f84-bd2d0eedb6a3	60ef8034-5a20-4ece-b185-2bfab0b68fca	a08e5b03-7893-48b2-9379-5525c420ca77	#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<int> bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 0; i < n - 1; i++) {\n        bool swapped = false;\n        \n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap arr[j] and arr[j+1]\n                swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        \n        // If no swapping occurred in this pass, array is sorted\n        if (!swapped) break;\n    }\n    \n    return arr;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    // Remove brackets\n    input = input.substr(1, input.length() - 2);\n    \n    vector<int> arr;\n    stringstream ss(input);\n    string item;\n    \n    while (getline(ss, item, ',')) {\n        arr.push_back(stoi(item));\n    }\n    \n    vector<int> result = bubbleSort(arr);\n    \n    cout << "[";\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i];\n        if (i < result.size() - 1) {\n            cout << ",";\n        }\n    }\n    cout << "]" << endl;\n    \n    return 0;\n}	54	accepted	0.021	931	3	3	2025-08-02 20:49:47.889658
74eee7be-430d-439b-8009-a3c06a631d71	60ef8034-5a20-4ece-b185-2bfab0b68fca	31e779b1-66a8-4c94-a086-9eb658a644fc	def binary_search(nums, target)\n  left = 0\n  right = nums.length - 1\n  \n  while left <= right\n    mid = (left + right) / 2\n    if nums[mid] == target\n      return mid\n    elsif nums[mid] < target\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  \n  -1\nend\n\n# Parse input and test the function\ninput = gets.strip\nparts = input.split(',')\ntarget = parts[-1].to_i\nnums_str = parts[0..-2].join(',')\nnums = nums_str.gsub(/[\\[\\]]/, '').split(',').map(&:to_i)\nresult = binary_search(nums, target)\nputs result	72	accepted	0.345	9253	3	3	2025-08-02 20:53:33.49475
5190e363-5802-472b-b74b-4f44549723b2	42e06dd4-ed52-4ad3-9213-10fe741202a4	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.017	916	3	3	2025-08-03 05:16:40.006149
0aecf747-f782-4621-80b9-2983c4ad2517	42e06dd4-ed52-4ad3-9213-10fe741202a4	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.822	14204	3	3	2025-08-03 05:17:27.604364
bcb64bab-cacd-4393-9a54-30c574ca8e87	60ef8034-5a20-4ece-b185-2bfab0b68fca	a08e5b03-7893-48b2-9379-5525c420ca77	#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<int> bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 0; i < n - 1; i++) {\n        bool swapped = false;\n        \n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap arr[j] and arr[j+1]\n                swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        \n        // If no swapping occurred in this pass, array is sorted\n        if (!swapped) break;\n    }\n    \n    return arr;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    // Remove brackets\n    input = input.substr(1, input.length() - 2);\n    \n    vector<int> arr;\n    stringstream ss(input);\n    string item;\n    \n    while (getline(ss, item, ',')) {\n        arr.push_back(stoi(item));\n    }\n    \n    vector<int> result = bubbleSort(arr);\n    \n    cout << "[";\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i];\n        if (i < result.size() - 1) {\n            cout << ",";\n        }\n    }\n    cout << "]" << endl;\n    \n    return 0;\n}	54	accepted	0.019	964	3	3	2025-08-03 07:04:45.172232
2820c5d0-984b-4cf8-be2c-287fefb6d8c3	60ef8034-5a20-4ece-b185-2bfab0b68fca	b4c0f978-d749-4831-a822-d5248386ff37	def product_except_self(nums)\n  n = nums.length\n  result = Array.new(n)\n  \n  # Left pass\n  result[0] = 1\n  (1...n).each do |i|\n    result[i] = result[i-1] * nums[i-1]\n  end\n  \n  # Right pass\n  right = 1\n  (n-1).downto(0) do |i|\n    result[i] *= right\n    right *= nums[i]\n  end\n  \n  result\nend\n\ninput = gets.strip\nnums = eval(input)\nresult = product_except_self(nums)\nputs result.to_s.gsub(' ', '')	72	accepted	0.356	9189	3	3	2025-08-03 13:55:30.050011
de884890-40a0-4fa7-922c-43a6c53b5f4a	60ef8034-5a20-4ece-b185-2bfab0b68fca	b4c0f978-d749-4831-a822-d5248386ff37	def product_except_self(nums)\n  n = nums.length\n  result = Array.new(n)\n  \n  # Left pass\n  result[0] = 1\n  (1...n).each do |i|\n    result[i] = result[i-1] * nums[i-1]\n  end\n  \n\n    right *= nums[i]\n  end\n  \n  result\nend\n\ninput = gets.strip\nnums = eval(input)\nresult = product_except_self(nums)\nputs result.to_s.gsub(' ', '')	72	wrong answer	0.329	9195	0	3	2025-08-03 13:56:16.135422
f1575b12-514d-42f6-acba-78f44f1369ad	7879f8b2-694e-4b72-9088-95eaf6f1a4ab	31e779b1-66a8-4c94-a086-9eb658a644fc	#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint binarySearch(vector<int>& nums, int target) {\n    // Write your solution here\n    int s=0, e=nums.size()-1;\n    while(s<=e){\n        int mid=s+((e-s)/2);\n        if(nums[mid]==target)return mid;\n        else if(nums[mid]>target)e=mid-1;\n        else s=mid+1;\n    }\n    return -1;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find_last_of(',');\n    string numsStr = input.substr(0, pos);\n    int target = stoi(input.substr(pos + 1));\n    \n    numsStr = numsStr.substr(1, numsStr.size() - 2);\n    stringstream ss(numsStr);\n    vector<int> nums;\n    string token;\n    \n    while (getline(ss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    \n    int result = binarySearch(nums, target);\n    cout << result << endl;\n    return 0;\n}	54	accepted	0.023	975	3	3	2025-08-03 15:16:36.760233
caa70c1f-c8c8-4a0e-84a0-05aebf6ec363	42e06dd4-ed52-4ad3-9213-10fe741202a4	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.018	968	3	3	2025-08-03 18:30:46.978678
5502a8f8-6325-41c4-b230-1209fcb77731	b41353f3-f993-4ab7-b2ee-a55bd1067e2c	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int diff = target - nums[i];\n        if (map.count(diff)) {\n            return {map[diff], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    size_t commaPos = input.find_last_of(',');\n    string arrayStr = input.substr(0, commaPos);\n    string targetStr = input.substr(commaPos + 1);\n\n    arrayStr = arrayStr.substr(1, arrayStr.size() - 2);\n    stringstream ss(arrayStr);\n    vector<int> nums;\n    string num;\n\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n\n    int target = stoi(targetStr);\n\n    vector<int> result = twoSum(nums, target);\n    cout << "[" << result[0] << "," << result[1] << "]" << endl;\n    return 0;\n}	54	accepted	0.020	951	3	3	2025-08-04 13:13:49.031335
58ee7199-930a-4629-a18e-4bb5c36a4015	fda53052-7802-405f-a0e2-1ab7b01c5204	31e779b1-66a8-4c94-a086-9eb658a644fc	#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint binarySearch(vector<int>& nums, int target) {\n    int low = 0;\n    int high = nums.size() - 1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        if (nums[mid] == target)\n            return mid;             // target found\n        else if (nums[mid] < target)\n            low = mid + 1;          // search in right half\n        else\n            high = mid - 1;         // search in left half\n    }\n\n    return -1; // target not found\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find_last_of(',');\n    string numsStr = input.substr(0, pos);\n    int target = stoi(input.substr(pos + 1));\n    \n    numsStr = numsStr.substr(1, numsStr.size() - 2);\n    stringstream ss(numsStr);\n    vector<int> nums;\n    string token;\n    \n    while (getline(ss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    \n    int result = binarySearch(nums, target);\n    cout << result << endl;\n    return 0;\n}	54	accepted	0.023	981	3	3	2025-08-05 06:36:55.687117
497def6f-03ee-4085-a06f-a95caec2ae4f	2b6a025c-1b76-4ab2-aa5e-e7f7ca4a782a	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.791	13763	3	3	2025-08-07 13:45:53.677801
11cac194-8e72-4eab-9596-89368e2e3e68	fda53052-7802-405f-a0e2-1ab7b01c5204	31e779b1-66a8-4c94-a086-9eb658a644fc	#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint binarySearch(vector<int>& nums, int target) {\n    int low = 0;\n    int high = nums.size() - 1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        if (nums[mid] == target)\n            return mid;             // target found\n        else if (nums[mid] < target)\n            low = mid + 1;          // search in right half\n        else\n            high = mid - 1;         // search in left half\n    }\n\n    return -1; // target not found\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find_last_of(',');\n    string numsStr = input.substr(0, pos);\n    int target = stoi(input.substr(pos + 1));\n    \n    numsStr = numsStr.substr(1, numsStr.size() - 2);\n    stringstream ss(numsStr);\n    vector<int> nums;\n    string token;\n    \n    while (getline(ss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    \n    int result = binarySearch(nums, target);\n    cout << result << endl;\n    return 0;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    \n    size_t pos = input.find_last_of(',');\n    string numsStr = input.substr(0, pos);\n    int target = stoi(input.substr(pos + 1));\n    \n    numsStr = numsStr.substr(1, numsStr.size() - 2);\n    stringstream ss(numsStr);\n    vector<int> nums;\n    string token;\n    \n    while (getline(ss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    \n    int result = binarySearch(nums, target);\n    cout << result << endl;\n    return 0;\n}	54	wrong answer	0.000	0	0	3	2025-08-05 06:38:23.123375
a49a5bcb-f85b-4fe3-8812-494f1bdda69d	d58a5eec-f186-4862-8c17-28256c924c06	25c514f9-2b6e-490c-a2aa-a48c8560bcb8	import java.util.*;\nclass Solution {\n\nint[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int commaPos = input.lastIndexOf(',');\n        String numsStr = input.substring(0, commaPos);\n        int target = Integer.parseInt(input.substring(commaPos + 1));\n        \n        numsStr = numsStr.substring(1, numsStr.length() - 1);\n        String[] parts = numsStr.split(",");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        \n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        System.out.println("[" + result[0] + "," + result[1] + "]");\n    }\n}	62	accepted	0.774	14139	3	3	2025-08-05 19:43:43.130604
\.


--
-- Data for Name: user_profiles; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.user_profiles (id, user_id, bio, github_url, linkedin_url, portfolio_url, created_at, updated_at, gender, location, birthday, summary, website_url, twitter_url, experience, education, skills) FROM stdin;
a3a1c937-d1a7-407e-9342-3b69a26c27dc	6ff10bb6-fe18-46ee-89e9-cdc48ec293b6	\N	\N	\N	\N	2025-08-03 06:27:40.497	2025-08-03 06:27:40.492	male	jaipur india	2025-08-07		\N	\N	"[{\\"company\\":\\"\\",\\"position\\":\\"\\",\\"startDate\\":\\"\\",\\"endDate\\":\\"\\",\\"current\\":false}]"	"[{\\"institution\\":\\"\\",\\"degree\\":\\"\\",\\"startDate\\":\\"\\",\\"endDate\\":\\"\\"}]"	"[]"
\.


--
-- Data for Name: verification_token; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.verification_token (identifier, expires, token) FROM stdin;
\.


--
-- Data for Name: votes; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.votes (user_id, post_id, vote_type, created_at) FROM stdin;
60ef8034-5a20-4ece-b185-2bfab0b68fca	5c0fc3be-2fa9-4710-a037-fc77b1cff06b	upvote	2025-07-22 10:02:37.472628
454a7f7a-7b5d-42aa-87ff-901b7d706b46	250df1f6-818e-4ee4-8de8-36a9d2afcd08	upvote	2025-07-22 10:06:00.422061
6bab2d60-6d42-432e-9276-2ea4ceae7564	2f262f03-63c1-44a7-8146-338ea6505a47	upvote	2025-07-31 12:20:16.709302
05c795e8-6270-47dc-811f-1286cc83bb59	11dac750-4922-4965-b06e-cb5e5771db00	upvote	2025-08-01 17:25:10.139117
05c795e8-6270-47dc-811f-1286cc83bb59	7a1aafb7-6444-4bbb-b888-c511f03ff22d	upvote	2025-08-01 17:27:02.650076
05c795e8-6270-47dc-811f-1286cc83bb59	addbb8ad-8b80-46be-ae1a-0a930b5c4540	upvote	2025-08-01 17:31:01.710261
05c795e8-6270-47dc-811f-1286cc83bb59	ea2978a0-8646-4485-8eaa-ac79349505df	upvote	2025-08-01 17:31:01.850961
8a1bb73d-9293-4a4b-bd5a-8836031002ff	528d6d96-025b-46e2-9155-c8b56db5c309	upvote	2025-08-01 17:51:19.252993
8a1bb73d-9293-4a4b-bd5a-8836031002ff	250df1f6-818e-4ee4-8de8-36a9d2afcd08	upvote	2025-08-01 17:53:31.467974
91b63c9a-5abb-4e2e-9095-5a6f121e4228	528d6d96-025b-46e2-9155-c8b56db5c309	downvote	2025-08-01 23:25:24.644846
91b63c9a-5abb-4e2e-9095-5a6f121e4228	addbb8ad-8b80-46be-ae1a-0a930b5c4540	downvote	2025-08-01 23:25:30.853836
91b63c9a-5abb-4e2e-9095-5a6f121e4228	ea2978a0-8646-4485-8eaa-ac79349505df	downvote	2025-08-01 23:25:31.883425
91b63c9a-5abb-4e2e-9095-5a6f121e4228	7a1aafb7-6444-4bbb-b888-c511f03ff22d	downvote	2025-08-01 23:25:33.317031
91b63c9a-5abb-4e2e-9095-5a6f121e4228	11dac750-4922-4965-b06e-cb5e5771db00	downvote	2025-08-01 23:25:35.363268
91b63c9a-5abb-4e2e-9095-5a6f121e4228	070f8b6d-8700-4906-9dba-729fcd9a9bf9	upvote	2025-08-02 01:11:50.740462
60ef8034-5a20-4ece-b185-2bfab0b68fca	b4662edb-420d-4d9a-91fc-3494f921f1de	upvote	2025-08-02 01:12:31.275609
60ef8034-5a20-4ece-b185-2bfab0b68fca	070f8b6d-8700-4906-9dba-729fcd9a9bf9	upvote	2025-08-02 11:28:28.495
60ef8034-5a20-4ece-b185-2bfab0b68fca	250df1f6-818e-4ee4-8de8-36a9d2afcd08	upvote	2025-08-02 11:28:29.644705
b2017bf5-b899-4dc3-a44d-186da5b1e4bd	250df1f6-818e-4ee4-8de8-36a9d2afcd08	upvote	2025-08-02 15:41:40.273335
b2017bf5-b899-4dc3-a44d-186da5b1e4bd	c9a9bb46-877a-4541-bfe4-106bf7bd5581	upvote	2025-08-02 15:41:41.563328
b2017bf5-b899-4dc3-a44d-186da5b1e4bd	070f8b6d-8700-4906-9dba-729fcd9a9bf9	upvote	2025-08-02 15:41:42.903629
6ff10bb6-fe18-46ee-89e9-cdc48ec293b6	070f8b6d-8700-4906-9dba-729fcd9a9bf9	upvote	2025-08-03 06:32:49.758035
60ef8034-5a20-4ece-b185-2bfab0b68fca	c9a9bb46-877a-4541-bfe4-106bf7bd5581	upvote	2025-08-05 11:30:18.540359
60ef8034-5a20-4ece-b185-2bfab0b68fca	331eac82-953b-447a-b922-86fde2c1249a	upvote	2025-08-05 11:30:27.995194
60ef8034-5a20-4ece-b185-2bfab0b68fca	dbede4d4-b06a-41a0-a84c-8fa670a7ecd8	upvote	2025-08-05 11:30:30.120275
60ef8034-5a20-4ece-b185-2bfab0b68fca	54cd3003-ebe8-48c2-b55b-79d1824f8804	upvote	2025-08-05 11:30:32.715769
60ef8034-5a20-4ece-b185-2bfab0b68fca	528d6d96-025b-46e2-9155-c8b56db5c309	upvote	2025-08-05 11:30:35.370224
\.


--
-- Name: __drizzle_migrations_id_seq; Type: SEQUENCE SET; Schema: drizzle; Owner: -
--

SELECT pg_catalog.setval('drizzle.__drizzle_migrations_id_seq', 33, true);


--
-- Name: accounts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.accounts_id_seq', 1, false);


--
-- Name: sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.sessions_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

